<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>默</title>
  <subtitle>为了生存，而一点点淡忘了最初的本意。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-30T16:35:31.285Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jasper</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python—生成测试文件</title>
    <link href="http://yoursite.com/2018/04/29/python%E2%80%94%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/04/29/python—生成测试文件/</id>
    <published>2018-04-29T02:17:11.000Z</published>
    <updated>2018-04-30T16:35:31.285Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>需要一些原始数据,简单记录</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWhitList_Size</span><span class="params">(ListSize)</span>:</span></div><div class="line">    numCount=ListSize</div><div class="line"></div><div class="line">    i=<span class="number">0</span></div><div class="line">    filePath=<span class="string">"List.txt"</span></div><div class="line">    <span class="keyword">with</span> open(filePath, <span class="string">"w"</span>, encoding=<span class="string">"GBK"</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">while</span> i&lt;numCount:</div><div class="line">        f.write(<span class="string">''</span>.join(random.choices(string.ascii_uppercase + string.digits, k=<span class="number">6</span>)))</div><div class="line">        f.write(<span class="string">"\n"</span>)</div><div class="line">        i=i+<span class="number">1</span></div><div class="line"></div><div class="line">getWhitList_Size(<span class="number">50000</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>python文件操作:</p>
<ul>
<li>其他语言也大同小异.</li>
<li>open write close</li>
</ul>
</li>
<li><p>核心是 随机生成字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">''</span>.join(random.choices(string.ascii_uppercase + string.digits, k=<span class="number">6</span>))</div></pre></td></tr></table></figure>
<p><code>random.choices(population, weights=None, *, cum_weights=None, k=1)</code><br>从population集群中随机抽取K个元素 weights是相对权重列表 cum_weights是累计权重 两个参数不能同时存在.<br>(注:random.choices是python3.6后新增方法)</p>
<ul>
<li><code>string.ascii_uppercase + string.digits</code> 是string包下代表大写字母和字符串的集合.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;需要一些原始数据,简单记录&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记—共享内存</title>
    <link href="http://yoursite.com/2018/04/19/linux%E7%AC%94%E8%AE%B0%E2%80%94%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
    <id>http://yoursite.com/2018/04/19/linux笔记—共享内存/</id>
    <published>2018-04-19T02:17:11.000Z</published>
    <updated>2018-04-30T16:33:39.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h1><ul>
<li>即多进程之间直接对读写同一段内存.相比较管道及消息队列,显而易见的好处是速度快,所有的IPC方法中效率最高.但共享内存并未提供同步机制,需要自行实现.</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li><p>顾名思义，共享内存就是说两个不同的进程A、B可以共同享有一块内存区域<br><img src="https://i.loli.net/2018/04/27/5ae2e1a5719a2.png" alt="20150124140604078.png"></p>
</li>
<li><p>整个处理流程是</p>
<ul>
<li>进程A第一次访问该页中的数据时, 生成一个缺页中断. 内核读入此页到内存并更新页表使之指向此页.</li>
<li>进程B访问同一页面而出现缺页中断,内核只将进程B的页表登记项指向次页即可.</li>
<li>进程A.B 即可访问同一段内存.</li>
</ul>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>shmget函数<br>shmget被用来开辟/初始化一段共享内存.其他进程使用相同的key 通过 shgat 获取同一段共享内存.，只有shmget函数才直接使用信号量键,所有其他的信号量函数使用由semget函数返回的信号量标识符.</p>
<p>函数原型</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span> size, <span class="keyword">int</span> shmflg)</span></span>;</div></pre></td></tr></table></figure>
<p>key : 与信号量的semget函数一样，使用共享内存key（非0整数）shmget函数成功时返回一个与key相关的共享内存标识符(非负整数),用于多进程的共享.调用失败返回-1.<br>size : 开辟的共享内存大小(字节).<br>shmflg : 权限控制,与IPC_CREAT做或操作,控制其他进程对共享内存权限. 0644即代表其他进程只有读的权限.</p>
</li>
<li><p>shmat函数<br>用来启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间</p>
<p>函数原型</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shm_id, <span class="keyword">const</span> <span class="keyword">void</span> *shm_addr, <span class="keyword">int</span> shmflg)</span></span>;</div></pre></td></tr></table></figure>
<p>shm_id: 由shmget函数返回的共享内存标识.<br>shm_addr: 指定共享内存连接到当前进程中的地址位置，通常为空，表示让系统来选择共享内存的地址.<br>shm_flg: 标志位，通常为0.</p>
</li>
<li><p>shmdt函数<br>将共享内存从当前进程中分离,使该共享内存对当前进程不再可用.</p>
<p>函数原型:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *shmaddr)</span></span>;</div></pre></td></tr></table></figure>
<p>shmaddr: shmat函数返回的地址指针，调用成功时返回0，失败时返回-1.</p>
</li>
<li><p>shmctl函数<br>控制共享内存.</p>
<p>函数原型</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span></div></pre></td></tr></table></figure>
<p>shm_id: shmget函数返回的共享内存标识符</p>
<p>command: 要采取的操作,以下三个值 ：</p>
<ul>
<li>IPC_STAT：把shmid_ds结构中的数据设置为共享内存的当前关联值，即用共享内存的当前关联值覆盖shmid_ds的值.</li>
<li>IPC_SET：如果进程有足够的权限，就把共享内存的当前关联值设置为shmid_ds结构中给出的值</li>
<li>IPC_RMID：删除共享内存段</li>
</ul>
<p>buf: 结构指针,指向共享内存模式和访问权限的结构.</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">shmid_ds结构至少包括以下成员：</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shmid_ds</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">uid_t</span> shm_perm.uid;</div><div class="line">    <span class="keyword">uid_t</span> shm_perm.gid;</div><div class="line">    <span class="keyword">mode_t</span> shm_perm.mode;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="系统限制及规避"><a href="#系统限制及规避" class="headerlink" title="系统限制及规避"></a>系统限制及规避</h2><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><ul>
<li>linux默认限制共享内存总大小由 SHMMAX 值确定.默认值未32MB</li>
<li><p>读取</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/sys/kernel/shmmax</div></pre></td></tr></table></figure>
</li>
<li><p>当超过系统限制时 提示 <code>unable to attach to shared memory</code>.</p>
</li>
<li><p>规避</p>
<ul>
<li><p>直接修改/proc.无需重启</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"2147483648"</span> &amp;gt; /proc/sys/kernel/shmmax</div></pre></td></tr></table></figure>
<p>可以将命令写入启动脚本 /etc/rc.local中.保证重启生效</p>
</li>
<li><p>使用 sysctl 命令修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysctl -w kernel.shmmax=2147483648</div></pre></td></tr></table></figure>
<p>可以将此参数插入到 /etc/sysctl.conf 启动文件中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"kernel.shmmax=2147483648"</span> &amp;gt;&amp;gt; /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>永久生效.</p>
</li>
</ul>
</li>
</ul>
<h3 id="数量"><a href="#数量" class="headerlink" title="数量"></a>数量</h3><ul>
<li>与大小类似的,共享内存创建的总数量由 SHMMNI 参数确定.</li>
<li><p>读取</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/sys/kernel/shmmni</div></pre></td></tr></table></figure>
<p>默认情况下是 4096.</p>
</li>
<li><p>一般不需要修改.</p>
</li>
</ul>
<h3 id="同一进程多次shmat"><a href="#同一进程多次shmat" class="headerlink" title="同一进程多次shmat"></a>同一进程多次shmat</h3><ul>
<li>shmat即挂载共享内存到进程的进程空间.</li>
<li><p>当同一进程多次调用shmat 挂载同一共享内存时,shamat每次返回的地址都不同,相当于在进程的线性空间中存在多个实际指向同一块共享内存.直到最后进程线性空间消耗殆尽.</p>
</li>
<li><p>解决:<br>需要在挂载共享内存前,判断申请的共享内存指针是否为空,为 NULL ,则第一次加载此共享内存.否则不再重复加载.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span>* p = <span class="literal">NULL</span>;</div><div class="line"><span class="comment">/*其他操作*/</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</div><div class="line">&#123;</div><div class="line">   p = shmat(shmid,p,<span class="number">0666</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="多个进程相同key多次创建共享内存"><a href="#多个进程相同key多次创建共享内存" class="headerlink" title="多个进程相同key多次创建共享内存"></a>多个进程相同key多次创建共享内存</h3><ul>
<li><p>共享内存创建有大小之分.key相同情况下,容量小的共享内存会获得之前创建的大的共享内存的内容.有可能导致之前创建共享内存的进程崩溃.</p>
</li>
<li><p>解决</p>
<ul>
<li><p>在shmage使用IPC_EXCL标记.现行判断共享内存是否已创建.如果已创建则挂载,没有创建返回失败后,再创建.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Shmid = Shmget(key, size,IPC_CREATE|IPC_EXCL); </div><div class="line"><span class="keyword">if</span> (<span class="number">-1</span> != shmid) </div><div class="line">&#123;</div><div class="line">  <span class="comment">/*错误处理*/</span></div><div class="line">  Shmid = Shmget(key, size,IPC_CREATE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不通过key 标记同一块共享内存.<br>shmget使用 kry = IPC_PRIVATE ,linux会忽略key值,直接新建一块共享内存.返回标识,通过管道/文件方式共享给其他进程使用.</p>
</li>
</ul>
</li>
</ul>
<h3 id="共享内存删除"><a href="#共享内存删除" class="headerlink" title="共享内存删除"></a>共享内存删除</h3><ul>
<li>调用shmctl 删除共享内存后,共享内存并不会立刻被系统清理.</li>
<li><p>首先共享内存的 shmid_ds结构中的 shm_nattch 减一.该共享内存从调用shmctl的进程剥离.但 shm_nattch 不为 0 的情况下,即仍然有别进程连接的情况下.共享内存并不会立刻清除. 只有在 shm_nattch 为 0 ,没有任何进程连接的情况下,系统才会清理 这段共享内存.</p>
</li>
<li><p>该段共享内存被任何连接的进程执行 shmctl 删除操作后, 新的进程将无法连接到该段共享内存. </p>
</li>
<li>与之对应的 Shmdt ,只是将共享内存由 调用的进程空间剥离.不会影响其他进程连接到该段共享内存.</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li>多进程共享数据.以链表为例.</li>
<li><p>有两种方式:</p>
<ul>
<li>开辟一段共享内存,之后存入整个链表.将共享内存连接到各个进程.<ul>
<li>优点:<ul>
<li>对原有代码改动少.</li>
</ul>
</li>
<li>缺点:<ul>
<li>封装链表操作时,各个进程头节点偏移量不同,不能简单的通过 <code>*p-&gt;next</code> 访问.</li>
<li>有共享内存大小限制.</li>
</ul>
</li>
</ul>
</li>
<li>每一个链表节点对应一个共享内存.开辟同等数量的共享内存.<ul>
<li>优点<ul>
<li>可以随用随创,相对节省内存.</li>
<li>链表节点next 存储相对链表头节点偏移即可,访问操作相对单一共享内存容易.</li>
</ul>
</li>
<li>缺点<ul>
<li>受限于 linux 默认 4096的总数量限制.且总数不易更改.</li>
<li>开辟新链表节点相对复杂.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>实际使用中第一种较为常见.</p>
</li>
</ul>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul>
<li>与共享内存类似的信号量,也是跨进程的.信号量是比较一种比较方便配合共享内存同步的方式.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;共享内存&quot;&gt;&lt;a href=&quot;#共享内存&quot; class=&quot;headerlink&quot; title=&quot;共享内存&quot;&gt;&lt;/a&gt;共享内存&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;即多进程之间直接对读写同一段内存.相比较管道及消息队列,显而易见的好处是速度快,所有的IPC方法中效率最高.但共
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android随手记—Rxjava2</title>
    <link href="http://yoursite.com/2018/04/14/Android%E9%9A%8F%E6%89%8B%E8%AE%B0-Rxjava2/"/>
    <id>http://yoursite.com/2018/04/14/Android随手记-Rxjava2/</id>
    <published>2018-04-14T04:00:00.000Z</published>
    <updated>2018-04-30T16:35:48.917Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li>编程环境<ul>
<li>Android Studio 3.2</li>
</ul>
</li>
</ul>
<hr>
<h2 id="解除订阅"><a href="#解除订阅" class="headerlink" title="解除订阅"></a>解除订阅</h2><ul>
<li>CompositeDisposable:<ul>
<li>得到一个Disposable实例时</li>
<li>调用CompositeDisposable.add()添加到订阅</li>
<li>生命周期结束 CompositeDisposable.clear() 可快速解除.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编程环境&lt;ul&gt;
&lt;li&gt;Android Studio 3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android随手记" scheme="http://yoursite.com/categories/Android%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>面试题汇总—Android</title>
    <link href="http://yoursite.com/2018/04/07/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB-Android/"/>
    <id>http://yoursite.com/2018/04/07/面试汇总-Android/</id>
    <published>2018-04-07T04:00:00.000Z</published>
    <updated>2018-04-06T06:42:46.897Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<blockquote>
<p><a href="https://github.com/AweiLoveAndroid/CommonDevKnowledge" target="_blank" rel="external">常用的Android开发的一些技能点以及BAT公司面试题汇集</a></p>
</blockquote>
<ul>
<li><p>感觉自己白学了////😂////</p>
</li>
<li><p>一道一道的找答案..</p>
</li>
</ul>
<hr>
<h1 id="Android面试题"><a href="#Android面试题" class="headerlink" title="Android面试题"></a>Android面试题</h1><p>Android面试题除了Android基础之外，更多的问的是一些源码级别的、原理这些等。所以想去大公司面试，一定要多看看源码和实现方式，常用框架可以试试自己能不能手写实现一下，锻炼一下自己。</p>
<h3 id="一、Android基础知识点"><a href="#一、Android基础知识点" class="headerlink" title="一、Android基础知识点"></a>一、Android基础知识点</h3><ul>
<li>四大组件是什么</li>
<li>四大组件的生命周期和简单用法</li>
<li>Activity之间的通信方式</li>
<li>Activity各种情况下的生命周期</li>
<li>横竖屏切换的时候，Activity 各种情况下的生命周期</li>
<li>Activity与Fragment之间生命周期比较</li>
<li>Activity上有Dialog的时候按Home键时的生命周期</li>
<li>两个Activity 之间跳转时必然会执行的是哪几个方法？</li>
<li>前台切换到后台，然后再回到前台，Activity生命周期回调方法。弹出Dialog，生命值周期回调方法。</li>
<li>Activity的四种启动模式对比</li>
<li>Activity状态保存于恢复</li>
<li>fragment各种情况下的生命周期</li>
<li>Fragment状态保存startActivityForResult是哪个类的方法，在什么情况下使用？</li>
<li>如何实现Fragment的滑动？</li>
<li>fragment之间传递数据的方式？</li>
<li>Activity 怎么和Service 绑定？</li>
<li>怎么在Activity 中启动自己对应的Service？</li>
<li>service和activity怎么进行数据交互？</li>
<li>Service的开启方式</li>
<li>请描述一下Service 的生命周期</li>
<li>谈谈你对ContentProvider的理解</li>
<li>说说ContentProvider、ContentResolver、ContentObserver 之间的关系</li>
<li>请描述一下广播BroadcastReceiver的理解</li>
<li>广播的分类</li>
<li>广播使用的方式和场景</li>
<li>在manifest 和代码中如何注册和使用BroadcastReceiver?</li>
<li>本地广播和全局广播有什么差别？</li>
<li>BroadcastReceiver，LocalBroadcastReceiver 区别</li>
<li>AlertDialog,popupWindow,Activity区别</li>
<li>Application 和 Activity 的 Context 对象的区别</li>
<li>Android属性动画特性</li>
<li>如何导入外部数据库?</li>
<li>LinearLayout、RelativeLayout、FrameLayout的特性及对比，并介绍使用场景。</li>
<li>谈谈对接口与回调的理解</li>
<li>回调的原理</li>
<li>写一个回调demo</li>
<li>介绍下SurfView</li>
<li>RecycleView的使用</li>
<li>序列化的作用，以及Android两种序列化的区别</li>
<li>差值器</li>
<li>估值器</li>
<li>Android中数据存储方式</li>
</ul>
<h3 id="二、Android源码相关分析"><a href="#二、Android源码相关分析" class="headerlink" title="二、Android源码相关分析"></a>二、Android源码相关分析</h3><ul>
<li>Android动画框架实现原理</li>
<li>Android各个版本API的区别</li>
<li>Requestlayout，onlayout，onDraw，DrawChild区别与联系</li>
<li>invalidate和postInvalidate的区别及使用</li>
<li>Activity-Window-View三者的差别</li>
<li>谈谈对Volley的理解</li>
<li>如何优化自定义View</li>
<li>低版本SDK如何实现高版本api？</li>
<li>描述一次网络请求的流程</li>
<li>HttpUrlConnection 和 okhttp关系</li>
<li>Bitmap对象的理解</li>
<li>looper架构</li>
<li>ActivityThread，AMS，WMS的工作原理</li>
<li>自定义View如何考虑机型适配</li>
<li>自定义View的事件</li>
<li>AstncTask+HttpClient 与 AsyncHttpClient有什么区别？</li>
<li>LaunchMode应用场景</li>
<li>AsyncTask 如何使用?</li>
<li>SpareArray原理</li>
<li>请介绍下ContentProvider 是如何实现数据共享的？</li>
<li>AndroidService与Activity之间通信的几种方式</li>
<li>IntentService原理及作用是什么？</li>
<li>说说Activity、Intent、Service 是什么关系</li>
<li>ApplicationContext和ActivityContext的区别</li>
<li>SP是进程同步的吗?有什么方法做到同步？</li>
<li>谈谈多线程在Android中的使用</li>
<li>进程和 Application 的生命周期</li>
<li>封装View的时候怎么知道view的大小</li>
<li>RecycleView原理</li>
<li>AndroidManifest的作用与理解</li>
</ul>
<h3 id="三、常见的一些原理性问题"><a href="#三、常见的一些原理性问题" class="headerlink" title="三、常见的一些原理性问题"></a>三、常见的一些原理性问题</h3><ul>
<li>Handler机制和底层实现</li>
<li>Handler、Thread和HandlerThread的差别</li>
<li>handler发消息给子线程，looper怎么启动？</li>
<li>关于Handler，在任何地方new Handler 都是什么线程下?</li>
<li>ThreadLocal原理，实现及如何保证Local属性？</li>
<li>请解释下在单线程模型中Message、Handler、Message Queue、Looper之间的关系</li>
<li>请描述一下View事件传递分发机制</li>
<li>Touch事件传递流程</li>
<li>事件分发中的onTouch 和onTouchEvent 有什么区别，又该如何使用？</li>
<li>View和ViewGroup分别有哪些事件分发相关的回调方法</li>
<li>View刷新机制</li>
<li>View绘制流程</li>
<li>自定义控件原理</li>
<li>自定义View如何提供获取View属性的接口？</li>
<li>Android代码中实现WAP方式联网</li>
<li>AsyncTask机制</li>
<li>AsyncTask原理及不足</li>
<li>如何取消AsyncTask？</li>
<li>为什么不能在子线程更新UI？</li>
<li>ANR产生的原因是什么？</li>
<li>ANR定位和修正</li>
<li>oom是什么？</li>
<li>什么情况导致oom？</li>
<li>有什么解决方法可以避免OOM？</li>
<li>Oom 是否可以try catch？为什么？</li>
<li>内存泄漏是什么？</li>
<li>什么情况导致内存泄漏？</li>
<li>如何防止线程的内存泄漏？</li>
<li>内存泄露场的解决方法</li>
<li>内存泄漏和内存溢出区别？</li>
<li>LruCache默认缓存大小</li>
<li>ContentProvider的权限管理(解答：读写分离，权限控制-精确到表级，URL控制)</li>
<li>如何通过广播拦截和abort一条短信？</li>
<li>广播是否可以请求网络？</li>
<li>广播引起anr的时间限制是多少？</li>
<li>计算一个view的嵌套层级</li>
<li>Activity栈</li>
<li>Android线程有没有上限？</li>
<li>线程池有没有上限？</li>
<li>ListView重用的是什么？</li>
<li>Android为什么引入Parcelable？</li>
<li>有没有尝试简化Parcelable的使用？</li>
</ul>
<h3 id="四、开发中常见的一些问题"><a href="#四、开发中常见的一些问题" class="headerlink" title="四、开发中常见的一些问题"></a>四、开发中常见的一些问题</h3><ul>
<li>ListView 中图片错位的问题是如何产生的?</li>
<li>混合开发有了解吗？</li>
<li>知道哪些混合开发的方式？说出它们的优缺点和各自使用场景？（解答：比如:RN，weex，H5，小程序，WPA等。做Android的了解一些前端js等还是很有好处的)；</li>
<li>屏幕适配的处理技巧都有哪些?</li>
<li>服务器只提供数据接收接口，在多线程或多进程条件下，如何保证数据的有序到达？</li>
<li>动态布局的理解</li>
<li>怎么去除重复代码？</li>
<li>画出 Android 的大体架构图</li>
<li>Recycleview和ListView的区别</li>
<li>ListView图片加载错乱的原理和解决方案</li>
<li>动态权限适配方案，权限组的概念</li>
<li>Android系统为什么会设计ContentProvider？</li>
<li>下拉状态栏是不是影响activity的生命周期</li>
<li>如果在onStop的时候做了网络请求，onResume的时候怎么恢复？</li>
<li>Bitmap 使用时候注意什么？</li>
<li>Bitmap的recycler()</li>
<li>Android中开启摄像头的主要步骤</li>
<li>ViewPager使用细节，如何设置成每次只初始化当前的Fragment，其他的不初始化？</li>
<li>点击事件被拦截，但是想传到下面的View，如何操作？</li>
<li>微信主页面的实现方式</li>
<li>微信上消息小红点的原理</li>
<li>CAS介绍（这是阿里巴巴的面试题，我不是很了解，可以参考博客: <a href="http://blog.csdn.net/jly4758/article/details/46673835" target="_blank" rel="external">CAS简介</a>）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AweiLoveAndroid/CommonDevKnowledge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用的Android
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Vscode系列—c语言</title>
    <link href="http://yoursite.com/2018/03/24/Vscode%E7%B3%BB%E5%88%97-c%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2018/03/24/Vscode系列-c语言/</id>
    <published>2018-03-24T04:00:00.000Z</published>
    <updated>2018-03-23T18:12:36.802Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>环境</p>
<ul>
<li>vscode 1.20.x</li>
<li>ubuntu</li>
</ul>
<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>写嵌入式的c语言太难搞了,受够了盗版 sourceinsight 艰难的代码提示和补全之后,尝试换一款编辑器.</li>
<li>跨平台,支持多种语言,自由度高.</li>
<li>vim 和 Emacs 命令行 有一点学习成本.</li>
<li>最后选定了 vscode 业余写点 python 和 java 写写 markdown 博客等等 (看pdf也行…).</li>
</ul>
<hr>
<ul>
<li>注意vscode首先是个编辑器,其他的功能都是通过 插件 + 后端 实现的.</li>
</ul>
<hr>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul>
<li>代码补全 最重要的<strong>c语言的结构体补全!!!</strong>.<ul>
<li>结构体补全曾经深深折磨这我,直到遇到了clang….</li>
<li>顺带着解决了语法检查,clang的语法检查很是好用.</li>
<li>插件: C/C++ Clang Command Adapter</li>
<li><img src="https://i.loli.net/2018/03/23/5ab4f9c678732.png" alt="auto.png"></li>
<li><img src="https://i.loli.net/2018/03/23/5ab4f9c6ec147.png" alt="autoa.png"></li>
</ul>
</li>
<li>语法检查<ul>
<li>常规clang足矣,但还不够.</li>
<li>clang是编译器,但有些错误编译器还是无能为力,祭出Cppcheck,C/C++代码缺陷静态检查工具.</li>
<li>插件: cppcheck</li>
<li><img src="https://i.loli.net/2018/03/23/5ab4f9c64e3af.png" alt="err.png"></li>
</ul>
</li>
<li>代码格式化<ul>
<li>眼瞅着clang 配套的clang-format .</li>
<li>插件: Clang-Format</li>
</ul>
</li>
<li>函数跳转<ul>
<li>微软官方c/c++插件就行了,但官方插件自带代码补全和语法检查,不怎么好,一定要关掉否则会与clang冲突.</li>
<li>插件: C/C++ for Visual Studio Code</li>
<li><img src="https://i.loli.net/2018/03/23/5ab4f9c702d2c.png" alt="jump.png"></li>
</ul>
</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>上文书说到,vscode实现编辑器以外的功能都需要插件+后端的形式 so 一般的安装步骤如下:</p>
</li>
<li><p>安装后端,如clang 、cppcheck 等.</p>
</li>
<li>安装对应插件</li>
<li><p>修改配置文件(json格式)</p>
</li>
<li><p>最后针对处理头文件等.</p>
</li>
</ul>
<h2 id="代码补全-语法检查"><a href="#代码补全-语法检查" class="headerlink" title="代码补全/语法检查"></a>代码补全/语法检查</h2><ul>
<li>代码补全/语法检查都依赖于后端clang,而ubunt自带的clang 3.8版本,而clang最新的稳定版本为5.0,这里选择5.0版本.</li>
<li>参考 &gt; <a href="https://apt.llvm.org/" target="_blank" rel="external">https://apt.llvm.org/</a></li>
</ul>
<h3 id="安装clang-5-0"><a href="#安装clang-5-0" class="headerlink" title="安装clang-5.0"></a>安装clang-5.0</h3><ul>
<li><p>修改ubuntu源 /etc/apt/source.list 添加llvm官方源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-5.0 main</div><div class="line">deb-src http://apt.llvm.org/trusty/ llvm-toolchain-trusty-5.0 main</div></pre></td></tr></table></figure>
</li>
<li><p>添加llvm源的 密钥</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -</div></pre></td></tr></table></figure>
</li>
<li><p>更新软件列表,这样就可以安装5.0版本了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
</li>
<li><p>安装clang5.0</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install clang-5.0 lldb-5.0</div></pre></td></tr></table></figure>
<p>或者安装全部llvm root用户下(太多偷个懒)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install clang-5.0 clang-tools-5.0 clang-5.0-doc libclang-common-5.0-dev libclang-5.0-dev libclang1-5.0 libclang1-5.0-dbg libllvm-5.0-ocaml-dev libllvm5.0 libllvm5.0-dbg lldb-5.0 llvm-5.0 llvm-5.0-dev llvm-5.0-doc llvm-5.0-examples llvm-5.0-runtime clang-format-5.0 python-clang-5.0 libfuzzer-5.0-dev</div></pre></td></tr></table></figure>
</li>
<li><p>完整安装需要良好的网络,llvm大概300M,等下就好.</p>
</li>
<li><p>验证</p>
<ul>
<li>命令行输入 clang-5.0 不会提示无此命令即可.</li>
</ul>
</li>
</ul>
<h3 id="clang"><a href="#clang" class="headerlink" title="clang"></a>clang</h3><ul>
<li><p>ubuntu自带版本3.8</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install clang</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="clang插件及配置"><a href="#clang插件及配置" class="headerlink" title="clang插件及配置"></a>clang插件及配置</h3><ul>
<li><p>插件名 C/C++ Clang Command Adapter,在vscode中搜索下载即可.<br>网络环境限制还可以在vscode官网下载vsix格式的文件,离线安装.</p>
</li>
<li><p>安装完成后,进入重头戏,也是初次上手vscode最难适应的地方.</p>
</li>
<li><p>进入vscode的设置 <code>setting.json</code> ,分为 用户区设置 和 工作区设置.</p>
<ul>
<li>用户区设置,是用户自定义全局设置,覆盖vscode默认设置,每个工程都有效.</li>
<li>工作区设置,是针对本工程的个性化设置,只在本工程生效.</li>
<li>简易是将clang等设置 保存在用户区,工作区保存追对 clang 的头文件设置.</li>
</ul>
</li>
<li><p>用户区设置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"clang.executable": "clang-5.0",</div><div class="line">"clang.completion.triggerChars": [</div><div class="line">      ".",</div><div class="line">      ":",</div><div class="line">      "&gt;"],</div></pre></td></tr></table></figure>
<ul>
<li>clang.executable : 后端clang的路径,这里是 clang-5.0 ,也可以写入 clang 的安装目录.</li>
<li>clang.completion.triggerChars : 触发代码补全的输入,常用的 . : &gt;.</li>
</ul>
</li>
<li><p>工作区设置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">"clang.cflags": [</div><div class="line">      "-std=c99",</div><div class="line">      "-I$&#123;cwd&#125;",</div><div class="line">      "-I/usr/include",</div><div class="line">      "-I/usr/include/c++/5",</div><div class="line">      "-I/usr/include/x86_64-linux-gnu/c++/5",</div><div class="line">      "-I/usr/include/c++/5/backward",</div><div class="line">      "-I/usr/lib/gcc/x86_64-linux-gnu/5/include",</div><div class="line">      "-I/usr/local/include",</div><div class="line">      "-I/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed",</div><div class="line">      "-I/usr/include/x86_64-linux-gnu",</div><div class="line">      "-I/usr/include",</div><div class="line">      "-I$&#123;workspaceRoot&#125;",</div><div class="line">      "-I$&#123;workspaceRoot&#125;/Include",</div><div class="line">      "-I$&#123;workspaceRoot&#125;/Libs/Cjson/Include"</div><div class="line">  ],</div></pre></td></tr></table></figure>
<ul>
<li>clang.cflags : <code>&quot;-std=c99&quot;</code> clang语法检查时 c/c++ 语言标准,要兼容历史项目,这就选的 c99 ,新项目简易 直接 c11.clang进行代码补全/语法检查的头文件路径, 格式是 <code>-I路径</code> ,支持直接和间接路径(${workspaceRoot}).</li>
<li>头文件一定要写全,否则一直会有错误提示.</li>
</ul>
</li>
<li><p>保存后,代码补全/语法检查 全部如上图所示.</p>
</li>
</ul>
<h2 id="语法检查"><a href="#语法检查" class="headerlink" title="语法检查"></a>语法检查</h2><ul>
<li>这里特指 cppcheck</li>
</ul>
<h3 id="安装cppcheck"><a href="#安装cppcheck" class="headerlink" title="安装cppcheck"></a>安装cppcheck</h3><ul>
<li><p>我没有追求最新,直接通过ubuntu官方源安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cppcheck</div></pre></td></tr></table></figure>
</li>
<li><p>安装完成,执行 cppcheck 命令,不提示无此命令即可.</p>
</li>
</ul>
<h3 id="cppcheck插件及配置"><a href="#cppcheck插件及配置" class="headerlink" title="cppcheck插件及配置"></a>cppcheck插件及配置</h3><ul>
<li><p>搜索安装 cppcheck</p>
</li>
<li><p>同样配置分为用户区和工作区.工作区对应头文件设置.</p>
</li>
<li><p>用户区</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"cppcheck.cppcheckPath": null,</div><div class="line">"cppcheck.standard": [</div><div class="line">      "c99",</div><div class="line">  ],</div><div class="line">"cppcheck.language": "c",</div></pre></td></tr></table></figure>
<ul>
<li>cppcheck.cppcheckPath : null时,会使用 cppcheck 命令指向的版本,也可以使用自定义路径.</li>
<li>cppcheck.standard : cppcheck 检查时 c/c++版本,历史原因我这里还是 c99.</li>
<li>cppcheck.language : 前置检查时 以 c 或者 c++ 检查.我这里都是 c 项目,填写 c .</li>
</ul>
</li>
<li><p>工作区</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">"cppcheck.includePaths": [</div><div class="line">  "$&#123;cwd&#125;",</div><div class="line">  "/usr/include",</div><div class="line">  "/usr/include/c++/5",</div><div class="line">  "/usr/include/x86_64-linux-gnu/c++/5",</div><div class="line">  "/usr/include/c++/5/backward",</div><div class="line">  "/usr/lib/gcc/x86_64-linux-gnu/5/include",</div><div class="line">  "/usr/local/include",</div><div class="line">  "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed",</div><div class="line">  "/usr/include/x86_64-linux-gnu",</div><div class="line">  "/usr/include",</div><div class="line">  "$&#123;workspaceRoot&#125;",</div><div class="line">  "$&#123;workspaceRoot&#125;/Include",</div><div class="line">  "$&#123;workspaceRoot&#125;/Code/APP/Code/Libs/Cjson/Include"</div><div class="line">],</div><div class="line">"cppcheck.force": true</div></pre></td></tr></table></figure>
<ul>
<li>cppcheck.includePaths : 头文件路径,这里没有 <code>-I</code> ,直接输入路径即可.支持直接和间接路径.</li>
<li>cppcheck.force : 强制检查所有枚举所有可能配置,有多个项目同时在工作,这里我放到工作区了,如果代码量小的工程建议放在用户区,作为全局配置.</li>
</ul>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>左下角,点击cppcheck 如图<br><img src="https://i.loli.net/2018/03/23/5ab4f7f51181a.png" alt="cppcheck.png"></p>
</li>
<li><p>3个选择</p>
<ul>
<li>分析当前打开文件</li>
<li>分析工作区所有文件</li>
<li>其他…没用过..</li>
</ul>
</li>
</ul>
<h2 id="函数跳转"><a href="#函数跳转" class="headerlink" title="函数跳转"></a>函数跳转</h2><ul>
<li>直接使用微软的 C/C++ for Visual Studio Code 即可.</li>
<li>官方的很强大,带代码补全和语法检查,,可惜表现不太好.函数跳转很好用.</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li><p>搜索安装 C/C++ for Visual Studio Code</p>
</li>
<li><p>不用安装后端了,对应的配置就稍微麻烦了.</p>
</li>
<li><p>在项目根目录下 查找 .vscode文件夹,进入.应该由 setting.json文件,对应工作区设置.</p>
</li>
<li><p>新建c_cpp_properties.json ,写入以下内容.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"configurations"</span>: [</div><div class="line">      &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"Mac"</span>,</div><div class="line">          <span class="attr">"includePath"</span>: [</div><div class="line">              <span class="string">"/usr/include"</span>,</div><div class="line">              <span class="string">"/usr/local/include"</span>,</div><div class="line">              <span class="string">"$&#123;workspaceRoot&#125;"</span></div><div class="line">          ],</div><div class="line">          <span class="attr">"defines"</span>: [],</div><div class="line">          <span class="attr">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span>,</div><div class="line">          <span class="attr">"browse"</span>: &#123;</div><div class="line">              <span class="attr">"path"</span>: [</div><div class="line">                  <span class="string">"/usr/include"</span>,</div><div class="line">                  <span class="string">"/usr/local/include"</span>,</div><div class="line">                  <span class="string">"$&#123;workspaceRoot&#125;"</span></div><div class="line">              ],</div><div class="line">              <span class="attr">"limitSymbolsToIncludedHeaders"</span>: <span class="literal">true</span>,</div><div class="line">              <span class="attr">"databaseFilename"</span>: <span class="string">""</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">"macFrameworkPath"</span>: [</div><div class="line">              <span class="string">"/System/Library/Frameworks"</span>,</div><div class="line">              <span class="string">"/Library/Frameworks"</span></div><div class="line">          ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"Linux"</span>,</div><div class="line">          <span class="attr">"includePath"</span>: [</div><div class="line">              <span class="string">"/usr/include/c++/5"</span>,</div><div class="line">              <span class="string">"/usr/include/x86_64-linux-gnu/c++/5"</span>,</div><div class="line">              <span class="string">"/usr/include/c++/5/backward"</span>,</div><div class="line">              <span class="string">"/usr/lib/gcc/x86_64-linux-gnu/5/include"</span>,</div><div class="line">              <span class="string">"/usr/local/include"</span>,</div><div class="line">              <span class="string">"/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed"</span>,</div><div class="line">              <span class="string">"/usr/include/x86_64-linux-gnu"</span>,</div><div class="line">              <span class="string">"/usr/include"</span>,</div><div class="line">              <span class="string">"$&#123;workspaceRoot&#125;"</span>,</div><div class="line">              <span class="string">"$&#123;workspaceRoot&#125;/Include"</span></div><div class="line">          ],</div><div class="line">          <span class="attr">"defines"</span>: [],</div><div class="line">          <span class="attr">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span>,</div><div class="line">          <span class="attr">"browse"</span>: &#123;</div><div class="line">              <span class="attr">"path"</span>: [</div><div class="line">                  <span class="string">"/usr/include/c++/5"</span>,</div><div class="line">                  <span class="string">"/usr/include/x86_64-linux-gnu/c++/5"</span>,</div><div class="line">                  <span class="string">"/usr/include/c++/5/backward"</span>,</div><div class="line">                  <span class="string">"/usr/lib/gcc/x86_64-linux-gnu/5/include"</span>,</div><div class="line">                  <span class="string">"/usr/local/include"</span>,</div><div class="line">                  <span class="string">"/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed"</span>,</div><div class="line">                  <span class="string">"/usr/include/x86_64-linux-gnu"</span>,</div><div class="line">                  <span class="string">"/usr/include"</span>,</div><div class="line">                  <span class="string">"$&#123;workspaceRoot&#125;"</span>,</div><div class="line">                  <span class="string">"$&#123;workspaceRoot&#125;/Include"</span></div><div class="line">              ],</div><div class="line">              <span class="attr">"limitSymbolsToIncludedHeaders"</span>: <span class="literal">true</span>,</div><div class="line">              <span class="attr">"databaseFilename"</span>: <span class="string">""</span></div><div class="line">          &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"Win32"</span>,</div><div class="line">          <span class="attr">"includePath"</span>: [</div><div class="line">              <span class="string">"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include"</span>,</div><div class="line">              <span class="string">"$&#123;workspaceRoot&#125;"</span></div><div class="line">          ],</div><div class="line">          <span class="attr">"defines"</span>: [</div><div class="line">              <span class="string">"_DEBUG"</span>,</div><div class="line">              <span class="string">"UNICODE"</span>,</div><div class="line">              <span class="string">"_UNICODE"</span></div><div class="line">          ],</div><div class="line">          <span class="attr">"intelliSenseMode"</span>: <span class="string">"msvc-x64"</span>,</div><div class="line">          <span class="attr">"browse"</span>: &#123;</div><div class="line">              <span class="attr">"path"</span>: [</div><div class="line">                  <span class="string">"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include/*"</span>,</div><div class="line">                  <span class="string">"$&#123;workspaceRoot&#125;"</span></div><div class="line">              ],</div><div class="line">              <span class="attr">"limitSymbolsToIncludedHeaders"</span>: <span class="literal">true</span>,</div><div class="line">              <span class="attr">"databaseFilename"</span>: <span class="string">""</span></div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"version"</span>: <span class="number">3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们只关注linux下的设置,将常用头文件路径添加到 <code>includePath</code> 和 <code>&quot;browse&quot;-&gt;&quot;path&quot;</code>下.<br><strong>可以不用手工添加</strong>,项目文件下,光标 指向提示找不到的 include 头文件 ,会有 💡 提示添加路径到path中,搞定!</p>
</li>
<li><p>至此代码跳转应该可以使用了.</p>
<ul>
<li>ctrl 悬浮提示,点击跳转.还有其他快捷键爽翻天.</li>
</ul>
</li>
</ul>
<h3 id="特别提醒"><a href="#特别提醒" class="headerlink" title="特别提醒"></a>特别提醒</h3><ul>
<li><p>上文提到 C/C++ for Visual Studio Code 会与 clang 的代码提示和语法检查冲突,所以一定要记得在用户区设置关闭自带.</p>
</li>
<li><p>用户区设置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"C_Cpp.autocomplete": "Disabled",</div><div class="line">"C_Cpp.errorSquiggles": "Disabled",</div><div class="line">"C_Cpp.formatting": "Disabled",</div></pre></td></tr></table></figure>
<ul>
<li>关闭自动补全 错误提示 和 代码格式化.</li>
</ul>
</li>
</ul>
<h2 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h2><ul>
<li>使用clang-5.0 配套的 clang-format-5.0即可.</li>
<li>clang-format可以通过配置文件控制很多格式化细节,推荐使用.</li>
</ul>
<h3 id="安装clang-format"><a href="#安装clang-format" class="headerlink" title="安装clang-format"></a>安装clang-format</h3><ul>
<li><p>进行过 安装clang-5.0 后,执行如下命令即可.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install clang-format-5.0</div></pre></td></tr></table></figure>
</li>
<li><p>ubuntu官方源 为3.8版本,也可以安装使用.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install clang-format</div></pre></td></tr></table></figure>
</li>
<li><p>最好与clang版本保持一致.</p>
</li>
</ul>
<h3 id="clang-format配置"><a href="#clang-format配置" class="headerlink" title="clang-format配置"></a>clang-format配置</h3><ul>
<li><p>这里使用配置文件形式详细自定义格式化.(也可以直接使用自带的几种格式,同样够用)</p>
</li>
<li><p>用户区设置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"clang-format.assumeFilename": ".clang-format",</div><div class="line">"clang-format.executable": "clang-format-5.0",</div></pre></td></tr></table></figure>
<ul>
<li>clang-format.assumeFilename : 制定格式化的标准,这里是通过文件 .clang-format 来配置.还可以留空通过<code>clang-format.fallbackStyle</code>指定 LLVM, Google, Chromium, Mozilla, WebKit 之一为格式化标准.</li>
<li>clang-format.executable : clang-format路径,这里安装的是 clang-format-5.0.</li>
</ul>
</li>
<li><p>指定通过.clang-format文件为格式化标准后,在项目根目录下 新建 .clang-format 文件.</p>
</li>
<li><p>每个版本的 clang-format 都有对应的详细定制说明.5.0版本<a href="http://releases.llvm.org/5.0.0/tools/clang/docs/ClangFormatStyleOptions.html" target="_blank" rel="external">对应说明</a></p>
</li>
<li><p>官方有几个风格实例:</p>
<ul>
<li><p>Linux Kernel style</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BasedOnStyle: LLVM</div><div class="line">IndentWidth: 8</div><div class="line">UseTab: Always</div><div class="line">BreakBeforeBraces: Linux</div><div class="line">AllowShortIfStatementsOnASingleLine: <span class="literal">false</span></div><div class="line">IndentCaseLabels: <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>效果如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">switch</span> (x) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                do_something();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                do_something_else();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (condition)</div><div class="line">                do_something_completely_different();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (x == y) &#123;</div><div class="line">                q();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y) &#123;</div><div class="line">                w();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                r();</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Visual Studio style</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">UseTab: Never</div><div class="line">IndentWidth: 4</div><div class="line">BreakBeforeBraces: Allman</div><div class="line">AllowShortIfStatementsOnASingleLine: <span class="literal">false</span></div><div class="line">IndentCaseLabels: <span class="literal">false</span></div><div class="line">ColumnLimit: 0</div></pre></td></tr></table></figure>
<p>效果如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span> (suffix)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        do_something();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        do_something_else();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (condition)</div><div class="line">        do_somthing_completely_different();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (x == y)</div><div class="line">    &#123;</div><div class="line">        q();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y)</div><div class="line">    &#123;</div><div class="line">        w();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        r();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>最后是我的自定义配置(中文说明),从网上收集+官方文档.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 配置以什么语言format当前文件</span></div><div class="line"><span class="comment"># CPP: C, C++, Objective-C, ObjectiveC++;</span></div><div class="line">Language: Cpp</div><div class="line"></div><div class="line"><span class="comment">#在llvm的配置基础上加定制配置</span></div><div class="line">BasedOnStyle: LLVM </div><div class="line"></div><div class="line"><span class="comment">#someLongFunction(argument1,</span></div><div class="line"><span class="comment">#                 argument2);</span></div><div class="line">AlignAfterOpenBracket: Align</div><div class="line"></div><div class="line"><span class="comment"># true: 表示对齐连续的紧跟注释（连续行使用双斜杠注释，包括在函数体内），多用于Model定义、property说明、私有成员变量说明；</span></div><div class="line">AlignTrailingComments: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#对齐连续赋值运算符</span></div><div class="line">AlignConsecutiveAssignments : <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#若true，则对齐连续声明.</span></div><div class="line">AlignConsecutiveDeclarations : <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#换行符选项 左对齐</span></div><div class="line">AlignEscapedNewlines: Left</div><div class="line"></div><div class="line"><span class="comment">#水平对齐二目运算符和三目运算符的操作数</span></div><div class="line">AlignOperands : <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># true：允许较短(一般只有一行，多为内联C函数)的Function在一行显示,如“int f() &#123; return 1; &#125;”，规定设为false；</span></div><div class="line">AllowShortFunctionsOnASingleLine: <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">#true: 允许较短的if判断在一行显示，否则换行显示（没有自动加花括号）；</span></div><div class="line">AllowShortIfStatementsOnASingleLine: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#??? true 允许较短的循环（while、for）在一行显示，否则换行显示（没有自动加花括号）；</span></div><div class="line">AllowShortLoopsOnASingleLine: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#true：允许只有Break语句的case标签在一行显示，false：不允许（自动换行显示）, 规范为不允许</span></div><div class="line">AllowShortCaseLabelsOnASingleLine: <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">#true：允许将较长的literal－String字符串分割成多行显示；</span></div><div class="line">AlwaysBreakBeforeMultilineStrings: <span class="literal">false</span></div><div class="line"></div><div class="line">BreakBeforeBraces: Allman</div><div class="line"></div><div class="line"><span class="comment">#连续行的缩进长度（通常缩进＋设置值）， 一般用于首参数小于后续参数的method名字、多行的String－literals</span></div><div class="line">ContinuationIndentWidth: 4</div><div class="line"></div><div class="line"><span class="comment">#设置代码的最大长度（回自动对代码长度进行换行显示，并对注释自动换行；当长度加大的时候，AllowAllParametersOfDeclarationOnNextLine＝true失效）</span></div><div class="line">ColumnLimit: 100</div><div class="line"></div><div class="line"><span class="comment">#如果为真（true）, 分析最常见的格式化文件中“&amp;”和“\*”的对齐方式。pointeralignment则仅作为后备。</span></div><div class="line">DerivePointerAlignment: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#true: 将switch的case标签从switch表达式缩进一级；否则将switch表达式对齐；</span></div><div class="line">IndentCaseLabels: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#缩进字符长度</span></div><div class="line">IndentWidth:     4</div><div class="line"></div><div class="line"><span class="comment">#所有位置的指针星号（＊）或取地址符号（&amp;）对齐位置：Left、Middle、Right，当作为乘号时候居中 （规范为Right）</span></div><div class="line">PointerAlignment: Right</div><div class="line"></div><div class="line"><span class="comment">#整个文件任意位置最大能够保持的连续空行数（如果超过MAX值，减少到Max行，小于不管；）</span></div><div class="line">MaxEmptyLinesToKeep: 2</div><div class="line"></div><div class="line"><span class="comment">#true:在赋值运算符之前添加一个空格，否则去掉；(规范为添加)</span></div><div class="line">SpaceBeforeAssignmentOperators: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">#是否在括号之前添加一个空格，Never：任何情况都不添加；ControlStatements：只在控制结构（for、if、while）的地方添加空格；AlWays: 除开在function－like的的宏定义之外在任何地方都需要添加空格；（规范为ControlStatements）</span></div><div class="line">SpaceBeforeParens: ControlStatements</div><div class="line"></div><div class="line"><span class="comment">#在紧跟注释之前所留空格数，一般建议为2个空格</span></div><div class="line">SpacesBeforeTrailingComments: 2</div><div class="line"></div><div class="line">UseTab: Never</div><div class="line"></div><div class="line"><span class="comment"># 格式兼容C++11</span></div><div class="line">Standard: Cpp11</div><div class="line"></div><div class="line"><span class="comment">#当前配置生效开关，true：打开，false：关闭</span></div><div class="line">DisableFormat: <span class="literal">false</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="编译-调试"><a href="#编译-调试" class="headerlink" title="编译/调试"></a>编译/调试</h1><ul>
<li>待续</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ul>
<li>至此,vscode 编写c语言的体验就十分完整了.跨平台一致化的体验真的很好.推荐还在苦恼 c 编辑器的可以一试.</li>
<li>下一篇vscode的 python 配置.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vscode 1.20.x&lt;/li&gt;
&lt;li&gt;ubuntu&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>面试题汇总—java</title>
    <link href="http://yoursite.com/2018/03/07/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB-java/"/>
    <id>http://yoursite.com/2018/03/07/面试汇总-java/</id>
    <published>2018-03-07T04:00:00.000Z</published>
    <updated>2018-04-06T06:42:47.935Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<blockquote>
<p><a href="https://github.com/AweiLoveAndroid/CommonDevKnowledge" target="_blank" rel="external">常用的Android开发的一些技能点以及BAT公司面试题汇集</a></p>
</blockquote>
<ul>
<li><p>感觉自己白学了////😂////</p>
</li>
<li><p>一道一道的找答案..</p>
</li>
</ul>
<hr>
<h1 id="java面试题汇总"><a href="#java面试题汇总" class="headerlink" title="java面试题汇总"></a>java面试题汇总</h1><p>熟练掌握java是很关键的，大公司不仅仅要求你会使用几个api，更多的是要你熟悉源码实现原理，甚至要你知道有哪些不足，怎么改进，还有一些java有关的一些算法，设计模式等等。</p>
<h2 id="一、java基础面试知识点"><a href="#一、java基础面试知识点" class="headerlink" title="一、java基础面试知识点"></a>一、java基础面试知识点</h2><ul>
<li><p>java中==和equals和hashCode的区别</p>
<ul>
<li>关系操作符 ==：<ul>
<li>基本数据类型，== 判断的是左右两边操作数的值是否相等</li>
<li>引用数据类型，== 判断的是左右两边操作数的内存地址是否相同,是否是同一个对象。</li>
</ul>
</li>
<li>equals方法 基类Object中的实例方法<ul>
<li>本质是期望比较 对象的内容</li>
</ul>
</li>
<li>hashCode方法,基类Object中的实例方法,返回一个int类型 hash值.<ul>
<li>重写上述两个方法,必须保证hashCode与equals的结果一致性,内容相同的对象,hash值相同,比较返回 true</li>
<li>hash值为确定对象在哈希表中位置的标识.</li>
</ul>
</li>
</ul>
</li>
<li><p>int、char、long各占多少字节数</p>
<ul>
<li>int 4字节</li>
<li>char 2个字节</li>
<li>long 8个字节</li>
</ul>
</li>
<li><p>int与integer的区别</p>
<ul>
<li>int为java的内置基本类型</li>
<li>integer 为int的包装类</li>
</ul>
</li>
<li><p>探探对java多态的理解</p>
<ul>
<li>类之间存在继承关系,子类可以重写父类相同的方法名.</li>
<li>调用时 子类直接调用自己实现的同命方法.</li>
</ul>
</li>
<li><p>String、StringBuffer、StringBuilder区别</p>
<ul>
<li>String 是不可变对象,所有操作都会生成新的String对象</li>
<li>StringBuffer StringBuilder 为可变对象.<ul>
<li>StringBufferd 线程安全</li>
<li>StringBuilder 线程不安全,但是单线程性能好</li>
</ul>
</li>
</ul>
</li>
<li><p>什么是内部类？内部类的作用</p>
<ul>
<li><p>内部类主要定义在类的内部</p>
<ul>
<li>成员内部类<ul>
<li>作为外部类的成员，可以直接使用外部类的所有成员和方法，即使是private</li>
<li>外部类要访问内部类的所有成员变量或方法，则需要通过内部类的对象来获取</li>
<li>成员内部类不能含有 static 的变量和方法</li>
</ul>
</li>
<li>局部内部类 <ul>
<li>指内部类定义在方法和作用域内，就是在外部类的方法中定义的内部类就是局部内部类</li>
<li>局部内部类由于是在方法中定义的，其作用域也是在方法内部中，方法外执行到，则被JVM回收。局部内部类的实例化也只能在方法中进行</li>
<li>局部内部类方法中想要使用局部变量，该变量必须声明为 final 类型</li>
</ul>
</li>
<li>静态内部类<ul>
<li>修饰为static的内部类</li>
<li>直接引用 <code>外部类.内部类</code></li>
<li>实例化: <code>外部类.内部类 对象 = new 外部类.内部类()</code></li>
</ul>
</li>
<li>匿名内部类<ul>
<li>局部内部类一种</li>
<li>没有名称,只能使用new声明<code>new &lt;类或接口&gt; &lt;类的主体&gt;</code></li>
<li>使用最多的实例(创建线程):<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">                    System.out.print(i + <span class="string">" "</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>内部类能独立地继承自一个类（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。内部类使得多重继承的解决方案变得完整。接口解决了部分问题，而内部类有效地实现了“多重继承”。</p>
</li>
</ul>
</li>
<li><p>抽象类和接口区别</p>
<ul>
<li>抽象类是对事物的抽象,接口是对行为的抽象</li>
</ul>
</li>
<li><p>抽象类的意义</p>
<ul>
<li>更利于代码的维护和重用</li>
</ul>
</li>
<li><p>抽象类与接口的应用场景</p>
<ul>
<li>接口是为了使用它规范的某一个行为</li>
<li>抽象类是为了使用这个类属性和行为</li>
</ul>
</li>
<li><p>抽象类是否可以没有方法和属性？</p>
<ul>
<li>可以</li>
</ul>
</li>
<li><p>接口的意义</p>
<ul>
<li>补足多重继承关系.</li>
<li>赋予多态更多的实现方式</li>
</ul>
</li>
<li><p>泛型中extends和super的区别</p>
<ul>
<li><code>&lt;? super T&gt;</code> 代表泛型T及其父类 ?的下界</li>
<li><code>&lt;? extends T&gt;</code> 代表泛型T及其子类 ?的上界</li>
<li>频繁往外读取内容的，适合用上界Extends。</li>
<li>经常往里插入的，适合用下界Super。</li>
</ul>
</li>
<li><p>父类的静态方法能否被子类重写</p>
<ul>
<li>否 静态方法与对象无关</li>
</ul>
</li>
<li><p>进程和线程的区别</p>
<ul>
<li>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。</li>
<li>线程是进程的一个实体, 是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</li>
<li>一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。</li>
<li>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序 健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</li>
</ul>
</li>
<li><p>final，finally，finalize的区别</p>
<ul>
<li>final 修饰符 修饰类标识无法再被继承</li>
<li>finally 用于错误处理</li>
<li>finalize 析构函数,但调用后 资源回收时间由 jvm决定</li>
</ul>
</li>
<li><p>序列化的方式(<strong>待考</strong>)</p>
<ul>
<li>序列化，表示将一个对象转换成可存储或可传输的状态。序列化后的对象可以在网络上进行传输，也可以存储到本地</li>
<li>Json,Serializable,Parcelable,ObjectOutputStream</li>
</ul>
</li>
<li><p>Serializable 和Parcelable 的区别</p>
<ul>
<li>Serializable是java api，Parcelable是Android api;</li>
<li>Serializable过程需要大量的I/O操作,开销大,效率低</li>
<li>Parcelable过程不需要大量的I/O操作,开销小,效率高</li>
</ul>
</li>
<li><p>静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？</p>
<ul>
<li>可以被继承,但不能被重写,静态方法和静态属性是属于类.</li>
</ul>
</li>
<li><p>静态内部类的设计意图</p>
<ul>
<li>静态内部类可以独立存在，又希望只被外部类使用，private修饰的时候不被同一个包下的其他类使用。</li>
<li>非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。</li>
<li>静态内部类的作用：</li>
<li>只是为了降低包的深度，方便类的使用，</li>
<li>静态内部类适用于包含类当中，但又不依赖与外在的类，不能使用外在类的非静态属性和方法，只是为了方便管理类结构而定义。</li>
<li>在创建静态内部类的时候，不需要外部类对象的引用。</li>
<li>非静态内部类有一个很大的优点：可以自由使用外部类的所有变量和方法</li>
</ul>
</li>
<li><p>成员内部类、静态内部类、局部内部类和匿名内部类的理解，以及项目中的应用</p>
<ul>
<li>见上内部类</li>
</ul>
</li>
<li><p>谈谈对kotlin的理解</p>
<ul>
<li>代码量下降</li>
<li>语法糖</li>
<li>与java 100%兼容</li>
<li>函数式编程</li>
</ul>
</li>
<li><p>闭包和局部内部类的区别</p>
</li>
</ul>
<ul>
<li>string 转换成 integer的方式及原理</li>
</ul>
<h2 id="二、java深入源码级的面试题（有难度）"><a href="#二、java深入源码级的面试题（有难度）" class="headerlink" title="二、java深入源码级的面试题（有难度）"></a>二、java深入源码级的面试题（有难度）</h2><ul>
<li>哪些情况下的对象会被垃圾回收机制处理掉？</li>
<li>讲一下常见编码方式？</li>
<li>utf-8编码中的中文占几个字节；int型几个字节？</li>
<li>静态代理和动态代理的区别，什么场景使用？</li>
<li>Java的异常体系</li>
<li>谈谈你对解析与分派的认识。</li>
<li>修改对象A的equals方法的签名，那么使用HashMap存放这个对象实例的时候，会调用哪个equals方法？</li>
<li>Java中实现多态的机制是什么？</li>
<li>如何将一个Java对象序列化到文件里？</li>
<li>说说你对Java反射的理解</li>
<li>说说你对Java注解的理解</li>
<li>说说你对依赖注入的理解</li>
<li>说一下泛型原理，并举例说明</li>
<li>Java中String的了解</li>
<li>String为什么要设计成不可变的？</li>
<li>Object类的equal和hashCode方法重写，为什么？</li>
</ul>
<h2 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a>三、数据结构</h2><ul>
<li><p>常用数据结构简介</p>
</li>
<li><p>并发集合了解哪些？</p>
</li>
<li>列举java的集合以及集合之间的继承关系</li>
<li>集合类以及集合框架</li>
<li>容器类介绍以及之间的区别（容器类估计很多人没听这个词，Java容器主要可以划分为4个部分：List列表、Set集合、Map映射、工具类（Iterator迭代器、Enumeration枚举类、Arrays和Collections），具体的可以看看这篇博文 <a href="http://alexyyek.github.io/2015/04/06/Collection/" target="_blank" rel="external">Java容器类</a>）</li>
<li>List,Set,Map的区别</li>
<li>List和Map的实现方式以及存储方式</li>
<li>HashMap的实现原理</li>
<li>HashMap数据结构？</li>
<li>HashMap源码理解</li>
<li>HashMap如何put数据（从HashMap源码角度讲解）？</li>
<li>HashMap怎么手写实现？</li>
<li>ConcurrentHashMap的实现原理</li>
<li>ArrayMap和HashMap的对比</li>
<li>HashTable实现原理</li>
<li>TreeMap具体实现</li>
<li>HashMap和HashTable的区别</li>
<li>HashMap与HashSet的区别</li>
<li>HashSet与HashMap怎么判断集合元素重复？</li>
<li>集合Set实现Hash怎么防止碰撞</li>
<li>ArrayList和LinkedList的区别，以及应用场景</li>
<li>数组和链表的区别</li>
<li>二叉树的深度优先遍历和广度优先遍历的具体实现</li>
<li>堆的结构</li>
<li>堆和树的区别</li>
<li>堆和栈在内存中的区别是什么(解答提示：可以从数据结构方面以及实际实现方面两个方面去回答)？</li>
<li>什么是深拷贝和浅拷贝</li>
<li>手写链表逆序代码</li>
<li>讲一下对树，B+树的理解</li>
<li>讲一下对图的理解</li>
<li>判断单链表成环与否？</li>
<li>链表翻转（即：翻转一个单项链表）</li>
<li>合并多个单有序链表（假设都是递增的）</li>
</ul>
<h2 id="四、线程、多线程和线程池"><a href="#四、线程、多线程和线程池" class="headerlink" title="四、线程、多线程和线程池"></a>四、线程、多线程和线程池</h2><ul>
<li>开启线程的三种方式？</li>
<li>线程和进程的区别？</li>
<li>为什么要有线程，而不是仅仅用进程？</li>
<li>run()和start()方法区别</li>
<li>如何控制某个方法允许并发访问线程的个数？</li>
<li>在Java中wait和seelp方法的不同；</li>
<li>谈谈wait/notify关键字的理解</li>
<li>什么导致线程阻塞？</li>
<li>线程如何关闭？</li>
<li>讲一下java中的同步的方法</li>
<li>数据一致性如何保证？</li>
<li>如何保证线程安全？</li>
<li>如何实现线程同步？</li>
<li>两个进程同时要求写或者读，能不能实现？如何防止进程的同步？</li>
<li>线程间操作List</li>
<li>Java中对象的生命周期</li>
<li>Synchronized用法</li>
<li>synchronize的原理</li>
<li>谈谈对Synchronized关键字，类锁，方法锁，重入锁的理解</li>
<li>static synchronized 方法的多线程访问和作用</li>
<li>同一个类里面两个synchronized方法，两个线程同时访问的问题</li>
<li>volatile的原理</li>
<li>谈谈volatile关键字的用法</li>
<li>谈谈volatile关键字的作用</li>
<li>谈谈NIO的理解</li>
<li>synchronized 和volatile 关键字的区别</li>
<li>synchronized与Lock的区别</li>
<li>ReentrantLock 、synchronized和volatile比较</li>
<li>ReentrantLock的内部实现</li>
<li>lock原理</li>
<li>死锁的四个必要条件？</li>
<li>怎么避免死锁？</li>
<li>对象锁和类锁是否会互相影响？</li>
<li>什么是线程池，如何使用?</li>
<li>Java的并发、多线程、线程模型</li>
<li>谈谈对多线程的理解</li>
<li>多线程有什么要注意的问题？</li>
<li>谈谈你对并发编程的理解并举例说明</li>
<li>谈谈你对多线程同步机制的理解？</li>
<li>如何保证多线程读写文件的安全？</li>
<li>多线程断点续传原理</li>
<li>断点续传的实现</li>
</ul>
<h2 id="并发编程有关知识点（这个是一般Android开发用的少的，所以建议多去看看）："><a href="#并发编程有关知识点（这个是一般Android开发用的少的，所以建议多去看看）：" class="headerlink" title="并发编程有关知识点（这个是一般Android开发用的少的，所以建议多去看看）："></a>并发编程有关知识点（这个是一般Android开发用的少的，所以建议多去看看）：</h2><p>平时Android开发中对并发编程可以做得比较少，Thread这个类经常会用到，但是我们想提升自己的话，一定不能停留在表面，,我们也应该去了解一下java的关于线程相关的源码级别的东西。</p>
<hr>
<p><strong>学习的参考资料如下：</strong></p>
<blockquote>
<p>Java 内存模型</p>
</blockquote>
<ul>
<li><a href="http://www.iteye.com/topic/806990" target="_blank" rel="external">java线程安全总结</a></li>
<li><a href="http://ifeve.com/java-memory-model-0/" target="_blank" rel="external">深入理解java内存模型系列文章</a></li>
</ul>
<blockquote>
<p>线程状态：</p>
</blockquote>
<ul>
<li><a href="https://my.oschina.net/mingdongcheng/blog/139263" target="_blank" rel="external">一张图让你看懂JAVA线程间的状态转换</a></li>
</ul>
<blockquote>
<p>锁：</p>
</blockquote>
<ul>
<li><a href="http://blog.csdn.net/vking_wang/article/details/9952063" target="_blank" rel="external">锁机制：synchronized、Lock、Condition</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/java-concurrent/locks-in-java.html" target="_blank" rel="external">Java 中的锁</a></li>
</ul>
<blockquote>
<p>并发编程：</p>
</blockquote>
<ul>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920357.html" target="_blank" rel="external">Java并发编程：Thread类的使用</a></li>
<li><a href="http://blog.51cto.com/lavasoft/27069" target="_blank" rel="external">Java多线程编程总结</a></li>
<li><a href="https://www.jianshu.com/p/053943a425c3#" target="_blank" rel="external">Java并发编程的总结与思考</a></li>
<li><a href="http://www.cnblogs.com/chenssy/p/4701027.html" target="_blank" rel="external">Java并发编程实战—–synchronized</a></li>
<li><a href="http://www.infoq.com/cn/articles/ConcurrentHashMap#" target="_blank" rel="external">深入分析ConcurrentHashMap</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AweiLoveAndroid/CommonDevKnowledge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用的Android
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>算法第四版笔记—</title>
    <link href="http://yoursite.com/2018/02/07/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88%E2%80%94%E6%91%98%E5%BD%95/"/>
    <id>http://yoursite.com/2018/02/07/算法第四版—摘录/</id>
    <published>2018-02-07T04:00:00.000Z</published>
    <updated>2018-02-23T12:32:37.572Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li><p>算法第四版</p>
</li>
<li><p>目前是云里雾里的,摘录一些有用的,再补充</p>
</li>
</ul>
<hr>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul>
<li><p>对象是能够承载数据类型的值的实体,包含 状态 标识 行为 3个重要特征.</p>
<ul>
<li>状态:数据类型的值</li>
<li>标识:能够将对象区分</li>
<li>行为:对数据类型的操作</li>
</ul>
</li>
<li><p>引用类型和原始数据类型并列,引用可以认为是内存地址,这一点非常容易和<code>C</code>中的指针搞混,(到现在还是头晕)</p>
</li>
<li><p>赋值语句不会创建一个新的对象,只是创建另一个指向已存在对象的引用.</p>
</li>
<li><p>java中数组对象即是一个由对象引用组成的数组.</p>
</li>
<li><p>java绝对不允许直接对引用修改.(与c的指针的区别现在还是有些混乱)</p>
</li>
</ul>
<h2 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h2><ul>
<li><p>背包</p>
<ul>
<li>不支持从中删除元素</li>
<li>与顺序无关</li>
<li>只是用来囊括所有元素</li>
</ul>
</li>
<li><p>先进先出队列(队列) FIFO</p>
<ul>
<li>先进先出</li>
<li>遍历的顺序就是添加进队列的顺序</li>
</ul>
</li>
<li><p>下压栈(栈)</p>
<ul>
<li>后进先出</li>
<li>遍历顺序是添加顺序的逆序.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;算法第四版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目前是云里雾里的,摘录一些有用的,再补充&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="算法第四版" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>总结</title>
    <link href="http://yoursite.com/2018/01/22/2017%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/01/22/2017总结/</id>
    <published>2018-01-22T04:00:11.000Z</published>
    <updated>2018-01-22T13:15:40.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h3><ul>
<li>找到了兴趣-Android开始正式学习。</li>
<li>搭建了自己的blog，虽然周围人没人关注，有一篇日子的阅读量过了1万，还是很惊喜的</li>
<li>嵌入式工作没用找到满意的，只能说等春招 Andoid的实习，这段时间努力提高自己，</li>
<li>放弃了考研</li>
<li>心情走过了类似抑郁的经历，对体制种种各有看法，是对是错，让时间见证</li>
</ul>
<hr>
<h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><ul>
<li>希望有自己的收入，经济相对自由一点</li>
<li>谈一段恋爱，遇到合适的女孩吧</li>
<li>Android的路上，顺利一点吧</li>
<li>不给自己设定限制，走一步再走一步</li>
</ul>
<h3 id="2017-1"><a href="#2017-1" class="headerlink" title="2017"></a>2017</h3><ul>
<li>工作了,有了一点自己的收入</li>
<li>有喜欢的人,却很无力的选择遗忘</li>
<li>在从事android以外的工作,2018准备转行.</li>
</ul>
<hr>
<h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h3><ul>
<li>迟到的终结</li>
<li>转行android,补足基础.</li>
<li>日常迁移到linux下,熟悉python,提升效率.</li>
<li>博客不要断,记清楚自己的目标</li>
<li>体制重重,守护好家人,除此之外,别无他求.</li>
<li>保持自己对环境的体察,珍惜剩下的时间.</li>
<li>要记得 有过的梦想,即使已经遥不可及,不等于要违背自己的底线.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2016&quot;&gt;&lt;a href=&quot;#2016&quot; class=&quot;headerlink&quot; title=&quot;2016&quot;&gt;&lt;/a&gt;2016&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;找到了兴趣-Android开始正式学习。&lt;/li&gt;
&lt;li&gt;搭建了自己的blog，虽然周围人没人关注，有一篇日子
    
    </summary>
    
      <category term="随" scheme="http://yoursite.com/categories/%E9%9A%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>python—n函数</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94n%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/19/python—n函数/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:04:49.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul>
<li>参数数量不对 TypeError错误</li>
<li>参数类型错误，TypeError的错误，并且给出错误信息</li>
<li>int()转换为int类型</li>
<li>float()</li>
<li>bool()</li>
<li><p>str()</p>
</li>
<li><p>函数名为一指向函数对象的引用,可以将变量指向函数,再调用</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = abs <span class="comment"># 变量a指向abs函数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">-1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><ul>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">      <span class="keyword">return</span> x</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">      <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
<p>def 函数名(参数) :<br>  函数体<br>  return </p>
</li>
<li>没有return 则返回 None</li>
<li><p>import 包含模块,java一样</p>
</li>
<li><p>空函数 pass 语句.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>示例 返回多个参数</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">  nx = x + step * math.cos(angle)</div><div class="line">  ny = y - step * math.sin(angle)</div><div class="line">  <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure>
<p>返回的是一个tuple .. 按位置赋值给变量</p>
</li>
</ul>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li><strong>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数</strong></li>
</ul>
<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></div><div class="line">...</div><div class="line"></div><div class="line">power(<span class="number">5</span>)   power(<span class="number">5</span>, <span class="number">2</span>)  power(n=<span class="number">3</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数必须指向不变对象</p>
</li>
<li>多个参数时，变化大的参数在前，变化小的参数在后。变化小的参数就可以作为默认参数。</li>
<li>多个默认参数，可以按顺序提供默认参数</li>
<li><p>也可以不按顺序提供。当不按顺序提供部分默认参数时，需要把参数名写上 <code>enroll(&#39;Adam&#39;, &#39;M&#39;, city=&#39;Tianjin&#39;)</code></p>
</li>
<li><p><strong><code>坑</code></strong></p>
<ul>
<li>默认参数 不可变性 每次调用均会改变其值.</li>
</ul>
</li>
</ul>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">  sum = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">      sum = sum + n * n</div><div class="line">  <span class="keyword">return</span> sum</div><div class="line"></div><div class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">calc(*nums)   <span class="comment">#相同</span></div><div class="line">calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>传入的参数个数可变,传入组装成了tuple</p>
</li>
<li>当作c语言指针吧😂 传入数组的地址</li>
</ul>
<h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">  print(name, age, city, job)</div><div class="line"></div><div class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>命名关键字参数需要一个特殊分隔符<em>，</em>后面的参数被视为命名关键字参数</p>
</li>
<li><p>函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">  print(name, age, args, city, job)</div></pre></td></tr></table></figure>
</li>
<li><p>如果没有可变参数，就必须加一个<em>作为特殊分隔符。如果缺少</em>，Python解释器将无法识别位置参数和命名关键字参数</p>
<h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4></li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></div><div class="line">  print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div><div class="line"></div><div class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=extra[<span class="string">'city'</span>], job=extra[<span class="string">'job'</span>])</div><div class="line"><span class="comment">#相同</span></div><div class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</div></pre></td></tr></table></figure>
</li>
<li><p>关键字参数在函数内部组装为一个dict</p>
</li>
<li>函数内部获得是 dict的拷贝,修改对原值无影响.</li>
<li>可以传入任意不受限制的关键字参数</li>
</ul>
<h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><ul>
<li>python 不含尾递归优化,注意层级,否则非常容易堆栈溢出.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;常用&quot;&gt;&lt;a href=&quot;#常用&quot; class=&quot;headerlink&quot; title=&quot;常用&quot;&gt;&lt;/a&gt;常用&lt;/h3&gt;&lt;ul&gt;
&lt;
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—基础</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/01/19/python—基础/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T14:54:56.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>整数 浮点数 <h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3></li>
<li>字符串以单引号 ‘ 或 “ 包括. </li>
<li>转义字符 \ 依然有效. r’’表示此字符串默认不转移.</li>
<li>/n有效, 可用 开头 … 替换<h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3></li>
<li>只有True 和 Flase </li>
<li>and or not 3种常用操作</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul>
<li>通常都为大写表示.</li>
<li>除法有两种 / 或 //<br>/ 结果可能为浮点, // 结果为整数(地板除)</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>None 空值,不为0.谨记</li>
<li>动态语言,so,变量的类型无所谓.</li>
<li>浮点数精度无限,但超过限制直接表示为 <code>inf</code></li>
</ul>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><ul>
<li>简而言之 文件使用utf-8就对了.</li>
<li>utf-8 属于万国码的简化,低位与 ASCII 兼容.</li>
</ul>
<h3 id="python字符串编码"><a href="#python字符串编码" class="headerlink" title="python字符串编码"></a>python字符串编码</h3><ul>
<li>py3中默认是 Unicode 万国码.</li>
<li>ord()获取字符的整数表示，chr()把编码转换为字符.</li>
<li>Python对bytes类型的数据用带b前缀的单引号或双引号表示 <code>x = b&#39;ABC&#39;</code></li>
<li><p>以Unicode表示的str通过encode()方法可以编码为指定的bytes</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">b'ABC'</span></div><div class="line"><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></div></pre></td></tr></table></figure>
</li>
<li><p>对应的decode()方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'中文'</span></div></pre></td></tr></table></figure>
<p>可以传入errors=’ignore’忽略错误的字节</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">b'\xe4\xb8\xad\xff'</span>.decode(<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>len(),str计算字符.bytes计算字节</p>
</li>
<li>开头,第一行,可执行文件(windows会忽视注释)<br>第二行,以utf-8处理文件.<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><ul>
<li><p>占位符与c基本相同 %d %s %x %f</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>))</div><div class="line">print(<span class="string">'%.2f'</span> % <span class="number">3.1415926</span>)</div></pre></td></tr></table></figure>
<p>需要 % 时, %%</p>
</li>
<li><p>format()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>, <span class="number">17.125</span>)</div><div class="line"><span class="string">'Hello, 小明, 成绩提升了 17.1%'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="list-tuple"><a href="#list-tuple" class="headerlink" title="list tuple"></a>list tuple</h2><h3 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h3><ul>
<li><p>示例, <code>= [ , , ]</code> 可变 有序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>索引以 0 开始,可以倒序 <code>-n</code> 当然越界都是 <code>IndexError</code> 错误</p>
</li>
<li>.len(),list元素个数.</li>
<li>.append(x) 末尾添加</li>
<li>.insert(i,x) 对应索引处插入</li>
<li>.pop(i) 删除i对应元素,为空则删除末尾元素.</li>
<li>替换i位置,直接赋值.</li>
<li>list的元素可以为一个list.多重数组.</li>
</ul>
<h3 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple 元组"></a>tuple 元组</h3><ul>
<li><p>示例<code>= ( , , )</code> 不可变 有序 更安全,其他与list相同</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t = (<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
<li><p><code>t = (1,)</code>声明一个元素元组,比较特殊.</p>
</li>
</ul>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul>
<li><p>示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> true :</div><div class="line">    print(<span class="string">"1"</span>)</div><div class="line"><span class="keyword">elif</span> true :</div><div class="line">    print(<span class="string">"2"</span>)</div><div class="line"><span class="keyword">else</span> :</div><div class="line">    print(<span class="string">"3"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>if 条件可简写,<code>if x</code> x非零数值、非空字符串、非空list 则为true</p>
</li>
<li>提及用户输入 input()</li>
<li>input默认返回字符串,如需要其他类型 int()转换.</li>
</ul>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li><p>示例 与c相同</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> names:</div><div class="line">    print(x)</div></pre></td></tr></table></figure>
</li>
<li><p>示例 与c相同</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">    print(n)</div></pre></td></tr></table></figure>
</li>
<li><p>break 跳出此层循环</p>
</li>
<li>continue 跳出本轮循环</li>
</ul>
<h2 id="dict-和-set"><a href="#dict-和-set" class="headerlink" title="dict 和 set"></a>dict 和 set</h2><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><ul>
<li>字典,使用键值对储存数据,索引极快,空间换时间.</li>
<li>对应其他语言的 map </li>
<li><p>示例: {‘’: ,’’: ,…}</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line">d[<span class="string">'Michael'</span>]</div><div class="line"><span class="number">95</span></div></pre></td></tr></table></figure>
</li>
<li><p>key</p>
<ul>
<li>必须为不可变对象,整数、字符串等</li>
<li>一个key对应一个value</li>
<li><p>key不存在</p>
<ul>
<li><p>in判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
</li>
<li><p>get()获取</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d.get(<span class="string">'Thomas'</span>) <span class="comment"># 返回空</span></div><div class="line">d.get(<span class="string">'Thomas'</span>, <span class="number">-1</span>) <span class="comment"># 不存在? 返回-1: ;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>pop()删除</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d.pop(<span class="string">'Bob'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul>
<li>key的集合,但不存在value</li>
<li>无序、不重复、元素为不可变对象</li>
<li>创建set需要一个list</li>
<li><p>示例 set([ , , …])</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>.add(key)</code>/<code>.remove(key)</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;整数 浮点数 &lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—面向对象</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/01/19/python—面向对象/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:00:27.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li>类 方法 实例</li>
<li>封装 继承 多态</li>
</ul>
<h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><ul>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">      self.name = name</div><div class="line">      self.score = score</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">      print(<span class="string">'%s: %s'</span> % (self.name, self.score))</div><div class="line"></div><div class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>定义类的关键词与java一样 <code>class</code> 括号内为继承的父类.没有父类时,选择 <code>object</code> 作为基类.(<code>object</code>是所有类的基类)</p>
</li>
<li><p>变量比较特殊,不像java中有单独字段.python 类中变量定义是在<code>__init__</code>方法</p>
</li>
<li><p>方法的声明和函数类似. <code>def 方法名 (参数)</code></p>
<ul>
<li>类中 第一个参数必须是<code>self</code>,意为创建的实例自身.方法中调用类中其他变量都要通过 <code>self.xxx</code> 访问.</li>
</ul>
</li>
<li><p>一些必须实现的属性在<code>__init__</code>方法中定义.如示例.第一个参数是 <code>self</code> 之后是具体变量值,在方法内 使用self访问类中定义的变量.</p>
</li>
<li><p>Python允许对实例变量绑定任何数据,so just do it😈</p>
</li>
</ul>
<h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><ul>
<li>类似java private 字段的python实现</li>
<li>属性的名称前加上两个下划线 <code>__</code> 该属性就成为了类的私有属性,只能在实例的内部访问.(<code>self.xxx</code>) </li>
<li><p>获取/修改,使用 <code>get/set</code> 获取或修改对应属性.(一般在set中可以添加类型检查)</p>
</li>
<li><p>类似<code>__xxx__</code>的变量，双下划线开头，并且以双下划线结尾的，是特殊变量.特殊变量是可以直接访问的，不是private变量.也<strong>最好不要定义<code>__xxx__</code>变量名</strong></p>
</li>
<li><p>以下划线开头的实例变量名，例如<code>_name</code>.可以在外部访问的，但是，约定俗成,请直接忽视.</p>
</li>
<li><p>特例:</p>
<ul>
<li>双下划线开头的实例变量不能直接访问是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>.<strong>仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量</strong>.</li>
<li><p>一个错误设置示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name()</div><div class="line"><span class="string">'Bart Simpson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name = <span class="string">'New Name'</span> <span class="comment"># 设置__name变量！</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name</div><div class="line"><span class="string">'New Name'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name() <span class="comment"># get_name()内部返回self.__name</span></div><div class="line"><span class="string">'Bart Simpson'</span></div></pre></td></tr></table></figure>
</li>
<li><p>如同示例,外部代码直接赋给 <code>bart.__name</code> 不会影响实例中原有属性,只会新增一个属性.究其原因,实例中的属性已经被解释器重命名为了<code>bart._Student__name</code>.</p>
</li>
</ul>
</li>
</ul>
<h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><ul>
<li>继承和多态概念与java类似.不多语了.</li>
<li>那么重点来了:</li>
<li>python本身是动态语言,体现在变量/类等各个方面,自由度极高.在继承上,亦是如此.<ul>
<li>java中定义一个su方法,调用model类实例实现的run方法.su方法可传入的只有 model类或其子类的实例</li>
<li>但python中 只要是定义了 run方法(别管内容/功能一样不一样)类的实例,都可以作为参数传入 su 方法.</li>
</ul>
</li>
<li>java中对类的类型的处理,相当于照猫🐱画虎🐯,传入的起码要是个猫科动物. python 中对类的类型处理,额头写个<code>王</code>字,哪怕传入具体对象是个猫头鹰🦉,也当作猫科处理了.</li>
</ul>
<hr>
<ul>
<li>note:<br>判断一个变量是否是某个类型可以用isinstance()<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a, list)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h3><hr>
<h2 id="让我想起了java反射-不过能获取的信息要全多了"><a href="#让我想起了java反射-不过能获取的信息要全多了" class="headerlink" title="* 让我想起了java反射..不过能获取的信息要全多了."></a>* 让我想起了java反射..不过能获取的信息要全多了.</h2><h4 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h4><ul>
<li><p>示例:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; type(123)</div><div class="line">&lt;class 'int'&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; type(a)</div><div class="line">&lt;class '__main__.Animal'&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; type(123)==type(456)</div><div class="line">True</div></pre></td></tr></table></figure>
</li>
<li><p>判断对象类型</p>
</li>
<li>由变量指向函数或者类，也可以用type()判断</li>
<li><p>type返回对应的Class类型,可直接 <code>== 类型</code>判断</p>
</li>
<li><p>判断一个对象是否是函数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import types</div><div class="line">&gt;&gt;&gt; def fn():</div><div class="line">...     pass</div><div class="line">...</div><div class="line">&gt;&gt;&gt; type(fn)==types.FunctionType</div><div class="line">True</div><div class="line">&gt;&gt;&gt; type(abs)==types.BuiltinFunctionType</div><div class="line">True</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(h, Husky)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (list, tuple))</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>判断继承关系,一打一个准.</p>
</li>
<li>能用type()判断的基本类型也可以用isinstance()判断</li>
<li>总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。</li>
</ul>
<h4 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="string">'ABC'</span>)</div><div class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>,..., <span class="string">'__subclasshook__'</span>, <span class="string">'capitalize'</span>, <span class="string">'casefold'</span>,..., <span class="string">'zfill'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>获得一个对象的所有属性和方法.直接返回一个字符串list.</p>
</li>
<li><p>配合getattr()、setattr()以及hasattr()，可以直接操作一个对象的状态.</p>
</li>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'x'</span>) <span class="comment"># 有属性'x'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>obj.x</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(obj, <span class="string">'y'</span>, <span class="number">19</span>) <span class="comment"># 设置一个属性'y'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'y'</span>) <span class="comment"># 获取属性'y'</span></div><div class="line"><span class="number">19</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>obj.y <span class="comment"># 获取属性'y'</span></div><div class="line"><span class="number">19</span></div></pre></td></tr></table></figure>
</li>
<li><p>不存在的属性，会抛出AttributeError的错误,可以传入一个default参数，如果属性不存在，就返回默认值.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'z'</span>, <span class="number">404</span>) <span class="comment"># 获取属性'z'，如果不存在，返回默认值404</span></div><div class="line"><span class="number">404</span></div></pre></td></tr></table></figure>
</li>
<li><p>也可以获得对象的方法</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'power'</span>) <span class="comment"># 有属性'power'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'</span></div><div class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0x10077a6a0</span>&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn = getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'并赋值到变量fn</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn <span class="comment"># fn指向obj.power</span></div><div class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0x10077a6a0</span>&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn() <span class="comment"># 调用fn()与调用obj.power()是一样的</span></div><div class="line"><span class="number">81</span></div></pre></td></tr></table></figure>
</li>
<li><p>只有在不知道对象信息的时候，才会去获取对象信息.谨记,谨记.</p>
</li>
</ul>
<h3 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h3><ul>
<li>类似java类中静态变量 与 普通变量区别.</li>
<li><p>类的属性,直接在类的cclass中声明.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">  name = <span class="string">'Student'</span></div></pre></td></tr></table></figure>
</li>
<li><p>访问时,类的属性会被实例的同名属性覆盖,但不会被修改,互相独立.</p>
</li>
<li>删除实例属性后，再使用相同的名称，访问到的将是类属性</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类 方法 实例&lt;/li&gt;
&lt;li&gt;封装 继承 多态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类和实例&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—模块</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/01/19/python—模块/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:01:52.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li>模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。</li>
<li><p>涉及到概念 包(Package) 和 模块(Module)</p>
</li>
<li><p>创建自己的模块时，要注意：</p>
<ul>
<li>模块名要遵循Python变量命名规范，不要使用中文、特殊字符；</li>
<li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。</li>
</ul>
</li>
</ul>
<h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><ul>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">' a test module '</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Michael Liao'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        print(<span class="string">'Hello, world!'</span>)</div><div class="line">    <span class="keyword">elif</span> len(args)==<span class="number">2</span>:</div><div class="line">        print(<span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'Too many arguments!'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure>
</li>
<li><p>注释:</p>
<ul>
<li>第1行注释可以让这个hello.py文件直接在Unix/Linux/Mac上运行</li>
<li>第2行注释表示.py文件本身使用标准UTF-8编码；</li>
<li>第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释</li>
<li>第6行使用<strong>author</strong>变量把作者写进去</li>
</ul>
</li>
<li><p>重点<code>if __name__==&#39;__main__&#39;:</code></p>
</li>
<li>Python解释器把一个特殊变量<strong>name</strong>置为<strong>main</strong>，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试.</li>
</ul>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><ul>
<li>Python中，是通过<code>_</code>前缀 标记 private </li>
<li>note: <strong>python中语法没有限制 <code>_</code>开头的变量/函数!</strong></li>
</ul>
<h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><ul>
<li><p><code>pip</code>命令 </p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install xxx</div></pre></td></tr></table></figure>
</li>
<li><p>或者在文件中自定义路径.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;涉及到概念 包(Packag
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—高级特性</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2018/01/19/python—高级特性/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:03:49.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><ul>
<li>代码精炼</li>
<li>python代码量越少,开发效率越高.<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3></li>
<li>取list或tuple的部分元素</li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">L[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#0到3,但结果不包括索引3</span></div><div class="line">L[:<span class="number">3</span>] <span class="comment">#0可省略</span></div></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">L[<span class="number">-2</span>:]  <span class="comment">#-2到0 但不包括索引0</span></div><div class="line">L[<span class="number">-2</span>:<span class="number">-1</span>] <span class="comment">#-2</span></div></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L[:<span class="number">10</span>:<span class="number">2</span>] <span class="comment">#前10 每隔2个取一个</span></div><div class="line">L[::<span class="number">5</span>] <span class="comment">#所有,每隔5个取一个</span></div><div class="line">L[:] <span class="comment">#原样复制</span></div></pre></td></tr></table></figure>
</li>
<li><p>对tuple取切片,结果依然是tuple.</p>
</li>
<li><strong>字符串可以看作一个list</strong>,每个字符占一位.</li>
</ul>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul>
<li>迭代很随便…太随便了…</li>
<li>list tuple不多说了</li>
<li><p>dict字典也可以迭代,因为无序,输出的顺序不一定相同.<br>默认迭代的是key 但value 也可以迭代,key value也可以同时迭代</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d.values()</div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()</div></pre></td></tr></table></figure>
</li>
<li><p>上文书中说的,字符串可以当作list,所以也可以迭代.</p>
</li>
<li><p>问题来了,如何判断可迭代对象?<br><code>collections模块的Iterable类型判断</code></p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>类似c/java的带下标循环实现?<br>Python内置的<code>enumerate函数</code>,把一个list变成索引-元素对</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line">  print(i, value)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><ul>
<li><code>用来生成list</code></li>
<li><p>示例: [1x1, 2x2, 3x3, …, 10x10]</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)] </div><div class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>] <span class="comment">#两层</span></div></pre></td></tr></table></figure>
</li>
<li><p>for可以同时循环两个甚至多个变量,dict的items()可以同时迭代key和value</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125; <span class="comment"># 多个变量</span></div><div class="line">[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()] <span class="comment"># 生成list</span></div><div class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L] <span class="comment"># 全部小写</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul>
<li>generator 依照某种算法不断循环生成数据,而不是一次性生成完.节省大量空间.</li>
<li><p>创建generator</p>
<ul>
<li><p>把列表生成式的[]改成()</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div></pre></td></tr></table></figure>
<p>调用<code>next(g)</code>可获取下一个值.<br>最常用<code>for n in g:</code>代入for循环.也没有抛出错误.</p>
</li>
<li><p>定义一个包含<code>yield</code>关键字的函数.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">while</span> n &lt; max:</div><div class="line">    <span class="keyword">yield</span> b</div><div class="line">    a, b = b, a + b</div><div class="line">    n = n + <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure>
<ul>
<li>变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</li>
<li>用for循环调用generator时，拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li><p>可以被for循环的对象统称为可迭代对象：<code>Iterable</code><br>使用isinstance()判断一个对象是否是Iterable对象</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(&#123;&#125;, Iterable)</div></pre></td></tr></table></figure>
</li>
<li><p>可以被next()函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code> 表示一个惰性计算的序列 <code>Iterator</code>甚至可以表示一个无限大的数据流<br>isinstance()判断一个对象是否是Iterator对象</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</div></pre></td></tr></table></figure>
</li>
<li><p>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</p>
</li>
<li>Python的for循环本质上就是通过不断调用next()</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;高级特性&quot;&gt;&lt;a href=&quot;#高级特性&quot; class=&quot;headerlink&quot; title=&quot;高级特性&quot;&gt;&lt;/a&gt;高级特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码精炼&lt;/li&gt;
&lt;li&gt;python代码量越少,开发效率越高.&lt;h3 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—函数式编程</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/19/python—函数式编程/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:02:50.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul>
<li>纯函数式编程没有变量,一个函数只要输出确定,输出就是确定的,称为没有副作用.使用变量的函数内部由于变量状态不确定性,有副作用.</li>
<li>函数式编程另一个特点是允许函数本身作为参数传入,也可以直接返回另外一个函数.</li>
<li>python对函数式编程提供有限支持.(还使用变量 so不是纯函数式编程语言)<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3></li>
<li>python中函数本身也可以赋值给变量,变量可以指向函数</li>
<li>函数的参数可以传入另一个函数,这种函数称为高阶函数.</li>
</ul>
<h4 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h4><ul>
<li>map()接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回</li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]) <span class="comment"># list所有数字转为字符串</span></div></pre></td></tr></table></figure>
</li>
<li><p>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算</p>
</li>
<li>示例<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></div><div class="line"><span class="meta">... </span>    digits = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> digits[s]</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, map(char2num, <span class="string">'13579'</span>))</div><div class="line"><span class="number">13579</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><ul>
<li>filter()接收一个函数和一个序列。filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</li>
<li>filter()函数返回的是一个 惰性序列 Iterator，也就是一个惰性序列,需要用list()函数获得所有结果并返回list</li>
<li>示例<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">  <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>])) <span class="comment"># 只保留奇数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></div><div class="line">  <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</div><div class="line"></div><div class="line">list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="keyword">None</span>, <span class="string">'C'</span>, <span class="string">'  '</span>])) <span class="comment"># 删除空字符</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><ul>
<li>sorted()函数接收一个key函数来实现自定义的排序.第三个参数<code>reverse=True</code>决定正序倒序.</li>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  &gt;&gt;&gt; sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>],key=str.lower)</div><div class="line">  [<span class="string">'about'</span>, <span class="string">'bob'</span>, <span class="string">'Credit'</span>, <span class="string">'Zoo'</span>]</div><div class="line"></div><div class="line">  &gt;&gt;&gt; sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</div><div class="line">  [<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</div><div class="line">  ``` </div><div class="line"></div><div class="line"><span class="comment">### 返回函数</span></div><div class="line">* 将函数作为结果返回.(很随便😂)</div><div class="line">* 闭包（Closure）:相关参数和变量都保存在返回函数.</div><div class="line">* **note:**返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用</div><div class="line">* 示例(坑):</div><div class="line">  ```py</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">  f1, f2, f3 = count()</div><div class="line"></div><div class="line">  &gt;&gt;&gt; f1()</div><div class="line">  <span class="number">9</span></div><div class="line">  &gt;&gt;&gt; f2()</div><div class="line">  <span class="number">9</span></div><div class="line">  &gt;&gt;&gt; f3()</div><div class="line">  <span class="number">9</span></div></pre></td></tr></table></figure>
</li>
<li><p>返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9</p>
</li>
<li>一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变</li>
<li>示例:<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">          <span class="keyword">return</span> j*j</div><div class="line">      <span class="keyword">return</span> g</div><div class="line">  fs = []</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">      fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></div><div class="line">  <span class="keyword">return</span> fs</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul>
<li>不显式定义的函数. python中是 <code>lambda</code> 但与java不同.</li>
<li>python中<code>lambda</code>限制，只能有一个表达式，不用写return，返回值就是该表达式的结果</li>
<li>匿名函数不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</li>
<li>示例<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f = <span class="keyword">lambda</span> x: x * x</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><ul>
<li>代码运行期间,动态增加功能方式称为装饰器(Decorator)</li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">      print(<span class="string">'call %s():'</span> % func.__name__)</div><div class="line">      <span class="keyword">return</span> func(*args, **kw)</div><div class="line">  <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'2015-3-25'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now()</div><div class="line">call now():</div><div class="line"><span class="number">2015</span><span class="number">-3</span><span class="number">-25</span></div></pre></td></tr></table></figure>
</li>
<li><p>如示例,装饰器 接受一个函数作为参数,并返回原函数.在原函数定义时,以 <code>@ xxx</code>作为标记.示例1 为2层,如果打印文本可以自定义.</p>
</li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">          print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">          <span class="keyword">return</span> func(*args, **kw)</div><div class="line">      <span class="keyword">return</span> wrapper</div><div class="line">  <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'2015-3-25'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now()</div><div class="line">execute now():</div><div class="line"><span class="number">2015</span><span class="number">-3</span><span class="number">-25</span></div></pre></td></tr></table></figure>
<p>打印可自定义 又加上了一层.</p>
</li>
<li><p>如上两种定义后,函数对象的名称等发生了变化,so,终极版</p>
</li>
<li>Python内置的functools.wraps 会将原始函数的<code>__name__</code>等属性复制到wrapper()函数中.</li>
<li>示例<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="comment"># 不带参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="comment"># 带参数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><ul>
<li>functools.partial的作用是把一个函数的某些参数设置默认值，返回一个新的函数.</li>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"></div><div class="line">int2(<span class="string">'1000000'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>注意: 仅仅是把base参数重新设定默认值为2，<strong>但也可以在函数调用时传入其他值</strong></p>
</li>
<li>由于python 中函数也可以最为参数传入,so,参数固定成某一个函数也可.</li>
<li><p>同理: <code>*args</code> 和 <code>**kw</code> 也可以.</p>
</li>
<li><p>简化函数调用.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;纯函数式编程没有变量,一个函数只要输出确定,输出就是确定的,称为没有副作用.使用变量的函数内部由于变量状
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记—Linux文件夹操作</title>
    <link href="http://yoursite.com/2018/01/18/linux%E7%AC%94%E8%AE%B0%E2%80%94Linux%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/01/18/linux笔记—Linux文件夹操作/</id>
    <published>2018-01-18T02:17:11.000Z</published>
    <updated>2018-03-23T18:12:57.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux下文件夹相关操作"><a href="#linux下文件夹相关操作" class="headerlink" title="linux下文件夹相关操作"></a>linux下文件夹相关操作</h2><ul>
<li>参考<blockquote>
<p><a href="http://blog.csdn.net/u011118014/article/details/43232693" target="_blank" rel="external">http://blog.csdn.net/u011118014/article/details/43232693</a></p>
<h2 id="打开文件夹-遍历访问每个文件"><a href="#打开文件夹-遍历访问每个文件" class="headerlink" title="打开文件夹,遍历访问每个文件"></a>打开文件夹,遍历访问每个文件</h2><h3 id="切换到文件夹路径下"><a href="#切换到文件夹路径下" class="headerlink" title="切换到文件夹路径下"></a>切换到文件夹路径下</h3></blockquote>
</li>
<li>调用 chdir 即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chdir(&quot;/info&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="打开文件夹"><a href="#打开文件夹" class="headerlink" title="打开文件夹"></a>打开文件夹</h3><ul>
<li><p>源码,打开文件夹返回对应文件夹的DIR结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DIR *dir;	</div><div class="line">dir = opendir(pcDirName);</div><div class="line">if (NULL == dir)&#123;</div><div class="line">  continue ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>DIR结构体 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">struct __dirstream</div><div class="line"> &#123;</div><div class="line">  void *__fd;</div><div class="line">  char *__data;</div><div class="line">  int __entry_data;</div><div class="line">  char *__ptr;</div><div class="line">  int __entry_ptr;</div><div class="line">  size_t __allocation;</div><div class="line">  size_t __size;</div><div class="line">  __libc_lock_define (, __lock)</div><div class="line"> &#125;;</div><div class="line">typedef struct __dirstream DIR;</div></pre></td></tr></table></figure>
<p>保存文件夹相关内容,无需深究</p>
</li>
<li><p>源码,遍历文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">struct direct    *ent;</div><div class="line">while (NULL != (ent = readdir(dir)))&#123;</div><div class="line">  /*如果 指向 . ..*/</div><div class="line">  if (0 == strcmp(ent-&gt;d_name, &quot;.&quot;) \</div><div class="line">    || 0 == strcmp(ent-&gt;d_name, &quot;..&quot;) \</div><div class="line">    || 4 == ent-&gt;d_type)&#123;</div><div class="line">      continue;</div><div class="line">  &#125;    </div><div class="line">  /*遍历*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>dirent结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct dirent</div><div class="line">&#123;</div><div class="line">  long d_ino; /* inode number 索引节点号 */</div><div class="line">  off_t d_off; /* offset to this dirent 在目录文件中的偏移 */</div><div class="line">  unsigned short d_reclen; /* length of this d_name 文件名长 */</div><div class="line">  unsigned char d_type; /* the type of d_name 文件类型 */</div><div class="line">  char d_name [NAME_MAX+1]; /* file name (null-terminated) 文件名，最长255字符 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dirent指向目录和目录中某个具体文件,但还是桥梁作用,访问文件具体内容还需要通过d_name找到stat结构体支援.</p>
</li>
<li><p>源码,获取stat结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stat  f_stat;</div><div class="line">sdwRet = stat(ent-&gt;d_name, &amp;f_stat);</div></pre></td></tr></table></figure>
</li>
<li><p>stat结构体是指向文件的结构体 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">struct stat &#123;</div><div class="line">  mode_t     st_mode;       //文件访问权限</div><div class="line">  ino_t      st_ino;       //索引节点号</div><div class="line">  dev_t      st_dev;        //文件使用的设备号</div><div class="line">  dev_t      st_rdev;       //设备文件的设备号</div><div class="line">  nlink_t    st_nlink;      //文件的硬连接数</div><div class="line">  uid_t      st_uid;        //所有者用户识别号</div><div class="line">  gid_t      st_gid;        //组识别号</div><div class="line">  off_t      st_size;       //以字节为单位的文件容量</div><div class="line">  time_t     st_atime;      //最后一次访问该文件的时间</div><div class="line">  time_t     st_mtime;      //最后一次修改该文件的时间</div><div class="line">  time_t     st_ctime;      //最后一次改变该文件状态的时间</div><div class="line">  blksize_t st_blksize;    //包含该文件的磁盘块的大小</div><div class="line">  blkcnt_t   st_blocks;     //该文件所占的磁盘块</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>之后愉快访问吧</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux下文件夹相关操作&quot;&gt;&lt;a href=&quot;#linux下文件夹相关操作&quot; class=&quot;headerlink&quot; title=&quot;linux下文件夹相关操作&quot;&gt;&lt;/a&gt;linux下文件夹相关操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参考&lt;blockquote&gt;
&lt;p&gt;&lt;a
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android随手记—Android M闪退小记</title>
    <link href="http://yoursite.com/2017/11/23/Android%E9%9A%8F%E6%89%8B%E8%AE%B0-Android%20M%E9%97%AA%E9%80%80%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/23/Android随手记-Android M闪退小记/</id>
    <published>2017-11-23T04:00:00.000Z</published>
    <updated>2017-11-23T13:25:12.337Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>编程环境</p>
<ul>
<li>Android Studio 3.0.1</li>
</ul>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>MyPrivacy 在android M上闪退,在模拟器中复现.提示<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>进入第二个Activity应用设置时,才出现,而且 7.1无问题.模拟器复现,抓log.</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>log的意思是启动activity的context不是 activity.</li>
<li><p>对应代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(MyApplicantion.getContext(),   AppSettingActivity.class);</div><div class="line">intent.putExtra(&quot;PackageName&quot;, AppId);</div><div class="line">MyApplicantion.getContext().startActivity(intent);</div></pre></td></tr></table></figure>
</li>
<li><p>需要对intent声明 FLAG_ACTIVITY_NEW_TASK</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>网上的原因分析:</li>
<li>因为standard模式的Activity默认会进入启动它的Activity所属的任务栈中，但是由于非Activity类型的context（ApplicationContext）并没有所谓的任务栈，所以就出现问题了。需要指定Activity为FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候，就会为它创建一个新的任务栈了。–android开发艺术探究</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 3.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;M
    
    </summary>
    
      <category term="Android随手记" scheme="http://yoursite.com/categories/Android%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android随手记—ScrollView</title>
    <link href="http://yoursite.com/2017/11/12/Android%E9%9A%8F%E6%89%8B%E8%AE%B0-ScrollView/"/>
    <id>http://yoursite.com/2017/11/12/Android随手记-ScrollView/</id>
    <published>2017-11-12T04:00:00.000Z</published>
    <updated>2017-11-12T09:48:39.562Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>编程环境</p>
<ul>
<li>Android Studio 3.0</li>
</ul>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>横屏模式下,显示内容被遮挡</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>Google😂</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>ScrollView 只允许嵌套一个子布局.超出范围部分会自动增加滚动条</li>
</ul>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>ScrollView 只能添加竖直方向滚动条.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;横屏模
    
    </summary>
    
      <category term="Android随手记" scheme="http://yoursite.com/categories/Android%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—Rxjava2</title>
    <link href="http://yoursite.com/2017/11/06/Android%E7%AC%94%E8%AE%B0%E2%80%94Rxjava2/"/>
    <id>http://yoursite.com/2017/11/06/Android笔记—Rxjava2/</id>
    <published>2017-11-06T04:00:00.000Z</published>
    <updated>2017-11-06T15:10:08.181Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下<br><a href="http://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="external">给初学者的RxJava2.0教程</a>(demo代码来源)</p>
<blockquote>
<p><a href="http://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="external">http://www.jianshu.com/u/c50b715ccaeb</a></p>
</blockquote>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<hr>
<ul>
<li>在Gradle配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;io.reactivex.rxjava2:rxjava:2.0.1&apos;</div><div class="line">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul>
<li>在Eventbus中亦涉及了相关概念,比较简单.包括Observable(被观察者)、Observer(观察者)、subscribe().事件由Observable(被观察者)开始发出,通过subscribe()最终被传递到Observer(观察者).而整个过程中你是站在Observer(观察者)的位置,也就是事件的末尾,观察Observable(被观察者).</li>
<li><p>上图</p>
</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">              emitter.onNext(1);</div><div class="line">              emitter.onComplete();</div><div class="line">          &#125;</div><div class="line">      &#125;).subscribe(new Observer&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void onSubscribe(Disposable d) &#123;</div><div class="line">              Log.d(TAG, &quot;subscribe&quot;);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onNext(Integer value) &#123;</div><div class="line">              Log.d(TAG, &quot;&quot; + value);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onError(Throwable e) &#123;</div><div class="line">              Log.d(TAG, &quot;error&quot;);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onComplete() &#123;</div><div class="line">              Log.d(TAG, &quot;complete&quot;);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>事件由<code>emitter.onNext(1);</code>开始,最终被<code>public void onNext(Integer value)</code>相应.被观察者事件发送结束调用<code>emitter.onComplete();</code>,同时观察者最终以<code>public void onComplete()</code>相应.</p>
</li>
</ul>
<hr>
<h2 id="note-上下游以-subscribe建立连接后-事件才会开始发送"><a href="#note-上下游以-subscribe建立连接后-事件才会开始发送" class="headerlink" title="* note: 上下游以.subscribe建立连接后,事件才会开始发送."></a>* note: 上下游以<code>.subscribe</code>建立连接后,事件才会开始发送.</h2><h3 id="Observable-被观察者-Observer-观察者"><a href="#Observable-被观察者-Observer-观察者" class="headerlink" title="Observable(被观察者) Observer(观察者)"></a>Observable(被观察者) Observer(观察者)</h3><ul>
<li>ObservableEmitter<br>ObservableEmitter： Emitter意为发射器,事件发送.onNext(T value)、onComplete()和onError(Throwable error)分别对应next事件、complete事件和error事件。</li>
<li>Observer<integer>中onNext(Integer value)、onError(Throwable e)、onComplete()对应接受next事件、complete事件和error事件</integer></li>
<li>被观察者发送complete事件和error事件后,观察者接受后不再继续响应事件,即使被观察者还在发送事件.<strong>complete事件和error事件互斥.</strong></li>
<li>在Observer<integer>中,调用Disposable.dispose(),切断管道.被观察者继续发送,但观察者不再响应.</integer></li>
</ul>
<h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><ul>
<li>建立Observable(被观察者) Observer(观察者)之间的管道.有多个重载.</li>
<li><p>重载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final Disposable subscribe() &#123;&#125;</div><div class="line"></div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext) &#123;&#125;</div><div class="line"></div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError) &#123;&#125; </div><div class="line"></div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete) &#123;&#125;</div><div class="line"></div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe) &#123;&#125;</div><div class="line"></div><div class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重载说明</p>
<ul>
<li>不带参数 : 观察者不关心任何事件(有卵用😵)</li>
<li>只带onNext : 观察者只响应next事件.</li>
<li>其他类似….演绎推理….</li>
<li>最后一个是传入完整的Observer对象.(demo就是🙃)</li>
</ul>
</li>
</ul>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ul>
<li>基于Rxjava的观察者模式可以拆分大多数的业务逻辑,即使再增加很多功能整体也不会过于混乱.</li>
<li>但Rxjava的强大并不局限在拆分逻辑.由被观察者到观察者的整个事件传递过程,基于Rxjava我们可以<strong>任意拆分 合并 转换 事件、切换线程等.</strong></li>
</ul>
<hr>
<h2 id="note-操作符搭配-Lambda-表达式食用更佳-🤣"><a href="#note-操作符搭配-Lambda-表达式食用更佳-🤣" class="headerlink" title="* note: 操作符搭配 Lambda 表达式食用更佳 🤣"></a>* note: 操作符搭配 Lambda 表达式食用更佳 🤣</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li>产生并发送 Obserable 事件.</li>
<li>仅常用,详细在<a href="https://maxwell-nc.github.io/android/rxjava2-2.html#timer" target="_blank" rel="external"> RxJava 2.x 使用详解(二) 创建操作符</a> <h4 id="creat"><a href="#creat" class="headerlink" title=".creat"></a>.creat</h4></li>
<li>前面demo中已经实际使用过了</li>
<li>用于产生一个 Obserable 被观察者对象,demo如上所示.</li>
</ul>
<h4 id="just"><a href="#just" class="headerlink" title=".just"></a>.just</h4><ul>
<li>对于简单的几个数据,直接使用just发送即可,无需创建 Obserable 对象.just最多可以接收 <strong>10</strong> 个参数.</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable.just(&quot;test&quot;,&quot;test2&quot;)</div><div class="line">      .subscribe(str -&gt; Log.i(&quot;tag&quot;, str));</div></pre></td></tr></table></figure>
<p>相当于顺序调用onNext(“test”)和onNext(“test2”)，最后调用onComplete方法。</p>
</li>
</ul>
<h4 id="fromArray"><a href="#fromArray" class="headerlink" title=".fromArray"></a>.fromArray</h4><ul>
<li>功能与just类似但fromArray来接收任意长度的数据数组,也可以直接传入数组<code>fromArray(new int[]{1, 2, 3})</code></li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable.fromArray(1, 2, 3, 4, 5)</div><div class="line">      .subscribe(integer -&gt; Log.i(&quot;tag&quot;, String.valueOf(integer)));</div></pre></td></tr></table></figure>
<p>fromArray不支持直接传入list进，list会被当作一个整体发送.</p>
</li>
</ul>
<h4 id="fromIterable"><a href="#fromIterable" class="headerlink" title=".fromIterable"></a>.fromIterable</h4><ul>
<li>功能与fromArray类似,但是可以接收 list 类型,遍历可迭代数据集合.</li>
<li>demo<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line">list.add(&quot;a&quot;);</div><div class="line">list.add(&quot;b&quot;);</div><div class="line">list.add(&quot;c&quot;);</div><div class="line"></div><div class="line">Flowable.fromIterable(list).subscribe(</div><div class="line">      s -&gt; Log.i(&quot;tag&quot;, s)</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="timer"><a href="#timer" class="headerlink" title=".timer"></a>.timer</h4><ul>
<li>指定一段时间间隔后发送数据(一次性),不太常用.</li>
</ul>
<h3 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h3><ul>
<li>默认事件传递的双方在同一线程工作.</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribeOn(Schedulers.newThread())     </div><div class="line">       .subscribeOn(Schedulers.io())              </div><div class="line">       .observeOn(AndroidSchedulers.mainThread()) </div><div class="line">       .observeOn(Schedulers.io())                </div><div class="line">       .subscribe(consumer);</div></pre></td></tr></table></figure>
</li>
<li><p>方法:</p>
<ul>
<li>.subscribeOn() : 指定被观察者发送事件线程,<strong>仅第一次调用时有效!</strong>  </li>
<li>.observeOn() : 指定观察者/流变换(对发送的事件处理🖖)线程,<strong>多次调用,多次切换有效</strong></li>
</ul>
</li>
<li><p>参数:</p>
<ul>
<li>Schedulers.io() : 适用于io密集型操作,网络通信、磁盘操作等.</li>
<li>Schedulers.computation() : CPU密集操作,需要大量CPU计算的操作.</li>
<li>Schedulers.newThread() : 创建新线程.</li>
<li>AndroidSchedulers.mainThread() : Android主线程,通常为更新UI等.</li>
</ul>
</li>
</ul>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><ul>
<li>对 Obserable 事件筛选.</li>
<li>仅常用,详细在<a href="https://maxwell-nc.github.io/android/rxjava2-3.html#filter" target="_blank" rel="external">RxJava 2.x 使用详解(三) 过滤操作符</a></li>
</ul>
<h4 id="filter"><a href="#filter" class="headerlink" title=".filter"></a>.filter</h4><ul>
<li>基本过滤操作符,按照任意自定规则过滤.</li>
</ul>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><h4 id="map"><a href="#map" class="headerlink" title=".map"></a>.map</h4><ul>
<li>处理前后事件数量之比<strong>1:1</strong>,事件变换前后顺序<strong>不变</strong></li>
<li>map作用是对Observable发送的每一个事件,应用处理变换函数,再继续像下游发送.中间过程可以转换事件类型、改变事件内容等等.<strong>只需要变换后的事件类型与下游接收的类型匹配即可.</strong></li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">              emitter.onNext(1);</div><div class="line">              emitter.onNext(2);</div><div class="line">              emitter.onNext(3);</div><div class="line">          &#125;</div><div class="line">      &#125;).map(new Function&lt;Integer, String&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public String apply(Integer integer) throws Exception &#123;</div><div class="line">              return &quot;This is result &quot; + integer;</div><div class="line">          &#125;</div><div class="line">      &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void accept(String s) throws Exception &#123;</div><div class="line">              Log.d(TAG, s);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>这里是把int类型转换为了string类型,与观察者接收的类型匹配即可.</p>
</li>
</ul>
<h4 id="flatMap"><a href="#flatMap" class="headerlink" title=".flatMap"></a>.flatMap</h4><ul>
<li>处理前后事件数量之比 <strong>1:n</strong>,事件变换前后顺序<strong>不保证</strong></li>
<li>flatMap,通俗点就是把Observable发送的事件拆散变换再,继续像下游发送.1个Observable事件可拆成任意个.<strong>只需要变换后的事件类型与下游接收的类型匹配即可.</strong></li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">              emitter.onNext(1);</div><div class="line">              emitter.onNext(2);</div><div class="line">              emitter.onNext(3);</div><div class="line">          &#125;</div><div class="line">      &#125;).flatMap(new Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public ObservableSource&lt;String&gt; apply(Integer integer) throws Exception &#123;</div><div class="line">              final List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line">              for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">                  list.add(&quot;I am value &quot; + integer);</div><div class="line">              &#125;</div><div class="line">              return Observable.fromIterable(list).delay(10,TimeUnit.MILLISECONDS);</div><div class="line">          &#125;</div><div class="line">      &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void accept(String s) throws Exception &#123;</div><div class="line">              Log.d(TAG, s);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>这里是flatMap把一个int类型事件拆成了3个String类型,运行结果看,最终事件到达顺序与onNext(1);onNext(2);的发送顺序无关</p>
</li>
</ul>
<h4 id="concatMap"><a href="#concatMap" class="headerlink" title=".concatMap"></a>.concatMap</h4><ul>
<li>处理前后事件数量之比 <strong>1:n</strong>,事件变换前后顺序<strong>按顺序</strong></li>
<li>与flatMap作用相同,只是保证了事件严格按顺序达到下游.</li>
<li>demo 就不上了,直接替换flatMap的位置就好.</li>
</ul>
<h4 id="zip"><a href="#zip" class="headerlink" title=".zip"></a>.zip</h4><ul>
<li>处理前后事件数量之比 <strong>n:1</strong>,事件变换前后顺序<strong>严格按顺序</strong></li>
<li>zip.最常见的压缩文件格式,在这里也是类似的意思,zip可以严格按照顺序合并多个 <strong>不同类型</strong> Observable发送的事件.总的发送事件数量与上游Observable发送最少的那个数量相同.</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable1 = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;         </div><div class="line">  @Override                                                                                      </div><div class="line">  public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;                   </div><div class="line">      Log.d(TAG, &quot;emit 1&quot;);                                                                      </div><div class="line">      emitter.onNext(1);                                                                         </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit 2&quot;);                                                                      </div><div class="line">      emitter.onNext(2);                                                                         </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit 3&quot;);                                                                      </div><div class="line">      emitter.onNext(3);                                                                         </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit 4&quot;);                                                                      </div><div class="line">      emitter.onNext(4);                                                                         </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit complete1&quot;);                                                              </div><div class="line">      emitter.onComplete();                                                                      </div><div class="line">  &#125;                                                                                              </div><div class="line">&#125;).subscribeOn(Schedulers.io());                                                                   </div><div class="line"></div><div class="line">Observable&lt;String&gt; observable2 = Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;           </div><div class="line">  @Override                                                 public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception &#123;                    </div><div class="line">      Log.d(TAG, &quot;emit A&quot;);                                                                  </div><div class="line">      emitter.onNext(&quot;A&quot;);                                                                       </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit B&quot;);                                                                      </div><div class="line">      emitter.onNext(&quot;B&quot;);                                                                       </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit C&quot;);                                                                      </div><div class="line">      emitter.onNext(&quot;C&quot;);                                                                       </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit complete2&quot;);                                                              </div><div class="line">      emitter.onComplete();                                                                      </div><div class="line">  &#125;                                                                                              </div><div class="line">&#125;).subscribeOn(Schedulers.io());                                                                   </div><div class="line"></div><div class="line">Observable.zip(observable1, observable2, new BiFunction&lt;Integer, String, String&gt;() &#123;               </div><div class="line">  @Override                                                                                      </div><div class="line">  public String apply(Integer integer, String s) throws Exception &#123;                              </div><div class="line">      return integer + s;                                                                        </div><div class="line">  &#125;                                                                                              </div><div class="line">&#125;).subscribe(new Observer&lt;String&gt;() &#123;                    </div><div class="line">  @Override                                                                                      </div><div class="line">  public void onSubscribe(Disposable d) &#123;                                                        </div><div class="line">      Log.d(TAG, &quot;onSubscribe&quot;);                                                                 </div><div class="line">  &#125;                                                                                              </div><div class="line"></div><div class="line">  @Override                                                                                      </div><div class="line">  public void onNext(String value) &#123;                                                             </div><div class="line">      Log.d(TAG, &quot;onNext: &quot; + value);                                                            </div><div class="line">  &#125;                                                                                              </div><div class="line"></div><div class="line">  @Override                                                                                      </div><div class="line">  public void onError(Throwable e) &#123;                                                             </div><div class="line">      Log.d(TAG, &quot;onError&quot;);                                                                     </div><div class="line">  &#125;                                                                                              </div><div class="line"></div><div class="line">  @Override                                                                                      </div><div class="line">  public void onComplete() &#123;                                                                     </div><div class="line">      Log.d(TAG, &quot;onComplete&quot;);                                                                  </div><div class="line">  &#125;                                                                                              </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里两个事件发送在同一线程中.当两个事件发送不再同一线程时,情况类似,不过当异步时,数量较少的事件发送完成,发送Complete事件后,通道随即被切断.</p>
</li>
</ul>
<h4 id="Concat"><a href="#Concat" class="headerlink" title=".Concat"></a>.Concat</h4><ul>
<li>处理前后事件数量之比 <strong>n:1</strong>,事件变换前后顺序<strong>严格按顺序</strong></li>
<li>Concat,可以严格按照顺序合并 <strong>相同类型</strong> Observable发送的事件.</li>
</ul>
<h2 id="Backpressure"><a href="#Backpressure" class="headerlink" title="Backpressure"></a>Backpressure</h2><hr>
<h2 id="被翻译为背压…-如此文不达意的直译-能忍-往下都是因为原文-😈"><a href="#被翻译为背压…-如此文不达意的直译-能忍-往下都是因为原文-😈" class="headerlink" title="* 被翻译为背压…(如此文不达意的直译,能忍?往下都是因为原文..😈)"></a>* 被翻译为背压…(如此文不达意的直译,能忍?往下都是因为原文..😈)</h2><ul>
<li>其实概念有够简单:将整个事件产生/传递/处理的过程想象为一条河流由上而下, Backpressure 指的是上游产生的事件太快,远远超过了下游的处理速度,以至于缓冲区溢出.上游来了洪水,下游径流量不够,以至于中间河道跨过了堤岸,溢出.</li>
</ul>
<h3 id="Flowable基础"><a href="#Flowable基础" class="headerlink" title="Flowable基础"></a>Flowable基础</h3><ul>
<li><p>Rxjava 1.x中需要自行通过操作符处理,到了2.0中,则有了专门对付发洪水上游的被观察者- Flowable .我们常用的 observable 在2.x中一般用于不涉及 Backpressure 的情况.而对应与 observable 的 Observer ,改为了  Subscriber .</p>
</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">Flowable&lt;Integer&gt; upstream = Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void subscribe(FlowableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">              Log.d(TAG, &quot;emit 1&quot;);</div><div class="line">              emitter.onNext(1);</div><div class="line">              Log.d(TAG, &quot;emit 2&quot;);</div><div class="line">              emitter.onNext(2);</div><div class="line">              Log.d(TAG, &quot;emit 3&quot;);</div><div class="line">              emitter.onNext(3);</div><div class="line">              Log.d(TAG, &quot;emit complete&quot;);</div><div class="line">              emitter.onComplete();</div><div class="line">          &#125;</div><div class="line">      &#125;, BackpressureStrategy.ERROR); //增加了一个参数</div><div class="line"></div><div class="line">      Subscriber&lt;Integer&gt; downstream = new Subscriber&lt;Integer&gt;() &#123;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onSubscribe(Subscription s) &#123;</div><div class="line">              Log.d(TAG, &quot;onSubscribe&quot;);</div><div class="line">              s.request(Long.MAX_VALUE);  //注意这句代码</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onNext(Integer integer) &#123;</div><div class="line">              Log.d(TAG, &quot;onNext: &quot; + integer);</div><div class="line"></div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onError(Throwable t) &#123;</div><div class="line">               Log.w(TAG, &quot;onError: &quot;, t);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onComplete() &#123;</div><div class="line">              Log.d(TAG, &quot;onComplete&quot;);</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      upstream.subscribe(downstream);</div></pre></td></tr></table></figure>
</li>
<li><p>注意两个地方</p>
<ul>
<li>Flowable创建时比 observable 多了一个参数.(参数作用下节说明)</li>
<li>Subscriber中调用了 s.request .</li>
</ul>
</li>
<li><p>Flowable 与 Observable 最大的不同就是 Flowable再次发送事件需要等待 Subscriber 中调用 .request </p>
</li>
<li><p>.request() 实质上是下游告知上游自己的处理能力,使得上游根据下游处理能力发送事件.<strong>多次调用,上游表示处理能力的数字会叠加</strong>,上游每发送一个事件,该数字减一,到0抛出异常</p>
<ul>
<li>上下游在同一线程时,下游没有或没有及时调用 .request ,上游会抛出异常</li>
<li>异步线程时,下游即使没有调用 .request 会有128个事件的缓存区.上游可继续发出事件,缓存区超出128个事件后,抛出异常.</li>
</ul>
</li>
</ul>
<h3 id="Flowable拓展"><a href="#Flowable拓展" class="headerlink" title="Flowable拓展"></a>Flowable拓展</h3><h2 id="这里对-Flowable-多的参数进行说明"><a href="#这里对-Flowable-多的参数进行说明" class="headerlink" title="* 这里对 Flowable 多的参数进行说明."></a>* 这里对 Flowable 多的参数进行说明.</h2><ul>
<li>参数<ul>
<li>BackpressureStrategy.BUFFER : 默认缓存区128,这个参数极大拓展了缓存区,使得 Flowable 表现与 Observable 差不多.</li>
<li>BackpressureStrategy.DROP : 128缓存区满了,就丢弃上游事件,直到下游处理了一个事件,缓存区 -1 ,再允许存入新的上游事件.</li>
<li>BackpressureStrategy.LATEST : 永远保存最后达到的128个上游事件,上游有新的事件到达满载的缓存区时,丢弃第一个存入缓存区的上游事件.</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>对于不是由我们编写的 Flowable 也可以通过 interval 操作符来加工.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Flowable.interval(1, TimeUnit.MICROSECONDS)</div><div class="line">              .onBackpressureDrop()  //加上 Backpressure 策略</div></pre></td></tr></table></figure>
</li>
<li><p>对应上文,指定参数有3,意思同上.</p>
<ul>
<li>onBackpressureBuffer()</li>
<li>onBackpressureDrop()</li>
<li>onBackpressureLatest()</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/u/c50b715ccaeb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给初学者的RxJava2.0教程&lt;/a&gt;(demo代码来源)&lt;/p&gt;
&lt;blockqu
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android随手记—Glide加载Drawable对象</title>
    <link href="http://yoursite.com/2017/11/04/Android%E9%9A%8F%E6%89%8B%E8%AE%B0-Glide%E5%8A%A0%E8%BD%BDDrawable%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/11/04/Android随手记-Glide加载Drawable对象/</id>
    <published>2017-11-04T04:00:00.000Z</published>
    <updated>2017-11-04T13:59:36.566Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>编程环境</p>
<ul>
<li>Android Studio 3.0</li>
</ul>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li><p>Glide是一个通用的图片缓存框架,但是在MyPrivacy显示appIcon时,传入 一个Drawable对象,提示类型不匹配. </p>
</li>
<li><p>(注意: 这里是直接传入Drawable对象,不是经过 R.xx 引用 !)</p>
</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>查阅资料后,确认Glide不支持直接加载传入的Drawable对象,转换为bitDrawable类型也不可.</li>
<li><p>解决思路来自</p>
<blockquote>
<p><a href="https://github.com/bumptech/glide/issues/588" target="_blank" rel="external">https://github.com/bumptech/glide/issues/588</a></p>
</blockquote>
</li>
<li><p>不支持直接加载,但Glide的.error(Icon)错误时显示   .placeholder(Icon)占位符,支持Drawable对象</p>
</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>不再直接加载 .load 传入空字符串, 通过 .placeholder 简洁加载.</li>
<li>demo <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Drawable Icon　＝　ｘｘｘ；</div><div class="line"></div><div class="line">RequestOptions options = new RequestOptions()</div><div class="line">             .error(Icon)</div><div class="line">             .placeholder(Icon);</div><div class="line"></div><div class="line"> Glide.with(context)</div><div class="line">             .load(&quot;&quot;)</div><div class="line">             .apply(options)</div><div class="line">             .into(imageView);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>placeholder 在Glide 4.x版本中,移入了 RequestOptions 对象中.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Android随手记" scheme="http://yoursite.com/categories/Android%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记—qemu运行linux</title>
    <link href="http://yoursite.com/2017/09/10/linux%E7%AC%94%E8%AE%B0%E2%80%94qemu%E8%BF%90%E8%A1%8Clinux/"/>
    <id>http://yoursite.com/2017/09/10/linux笔记—qemu运行linux/</id>
    <published>2017-09-10T02:17:11.000Z</published>
    <updated>2017-09-10T01:50:57.633Z</updated>
    
    <content type="html"><![CDATA[<hr>
<ul>
<li>ubuntu16.04</li>
<li>使用busybox编译最小文件系统，使用qemu运行起来。</li>
<li>内容来自 奔跑吧linux内核第6章</li>
<li>这里将输入代码过程集合到了几个.sh文件,不做重复的工作 !</li>
<li>当然网好是前提,最好挂代理.</li>
</ul>
<hr>
<h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><ul>
<li><p>首先需要安装qemu gcc, ubuntu16.04中自带的gcc版本较低,这里我们安装书中推荐的gcc-arm-linux-gnueabi </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install qemu libncurses5-dev gcc-arm-linux-gnueabi build-essential</div></pre></td></tr></table></figure>
</li>
<li><p>下载busybox源码</p>
<ul>
<li>书中推荐版本是1.24,但最新版本已经到了busybox-1.27.2.这里我们使用最新版<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://busybox.net/downloads/busybox-1.27.2.tar.bz2</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>解压到 busybox 文件夹<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -jxvf busybox-1.27.2.tar.bz2</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>下载linux内核源码<ul>
<li>还是以配套的4.0源码为例,(提醒:内核解压后大约占800MB,请预留出足够空间)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.0.tar.gz</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>解压到linux文件夹<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -jxvf linux-4.0.tar.gz</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="编译最小文件系统"><a href="#编译最小文件系统" class="headerlink" title="编译最小文件系统"></a>编译最小文件系统</h2><h2 id="别问我最小文件系统是什么-我也有点😵-但是先用起来"><a href="#别问我最小文件系统是什么-我也有点😵-但是先用起来" class="headerlink" title="* 别问我最小文件系统是什么,我也有点😵,但是先用起来."></a>* 别问我最小文件系统是什么,我也有点😵,但是先用起来.</h2><ul>
<li><p>首先利用 busybox 手工编译一个最小文件系统。<br>在busybox文件夹下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export ARCH=ARM</div><div class="line">export CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make menuconfig</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>进入menuconfig后,配置静态编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Busybox Settings ---&gt;</div><div class="line">Build Options ---&gt;</div><div class="line">[*] Build BusyBox as a static binary (no shared libs)</div></pre></td></tr></table></figure>
</li>
<li><p>然后 make install 编译完成。编译完成后,把 busybox 根目录下面的_install 目录拷贝到 linux-4.0 下。</p>
</li>
<li><p>进入_install 目录，创建 etc、dev 等目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir etc</div><div class="line">mkdir dev</div><div class="line">mkdir mnt</div><div class="line">mkdir -p etc/init.d/</div></pre></td></tr></table></figure>
</li>
<li><p>在_install /etc/init.d/目录下创建 文件名rcS 的文件，写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mkdir –p /proc</div><div class="line">mkdir –p /tmp</div><div class="line">mkdir -p /sys</div><div class="line">mkdir –p /mnt</div><div class="line">/bin/mount -a</div><div class="line">mkdir -p /dev/pts</div><div class="line">mount -t devpts devpts /dev/pts</div><div class="line">echo /sbin/mdev &gt; /proc/sys/kernel/hotplug</div><div class="line">mdev –s</div></pre></td></tr></table></figure>
<p>同时使用 <code>chmod +x rcS</code>修改rcS的可执行权限.</p>
</li>
<li><p>在_install /etc 目录创建文件名 fstab 的文件，并写入以下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">proc /proc proc defaults 0 0</div><div class="line">tmpfs /tmp tmpfs defaults 0 0</div><div class="line">sysfs /sys sysfs defaults 0 0</div><div class="line">tmpfs /dev tmpfs defaults 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs defaults 0 0</div></pre></td></tr></table></figure>
</li>
<li><p>在_install /etc 目录创建文件名 inittab 的文件，并写入如下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">::sysinit:/etc/init.d/rcS</div><div class="line">::respawn:-/bin/sh</div><div class="line">::askfirst:-/bin/sh</div><div class="line">::ctrlaltdel:/bin/umount -a –r</div></pre></td></tr></table></figure>
</li>
<li><p>在_install/dev 目录下创建如下设备节点，以root权限执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd _install/dev/</div><div class="line">sudo mknod console c 5 1</div><div class="line">sudo mknod null c 1 3</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="sh-配合chmod-x使用"><a href="#sh-配合chmod-x使用" class="headerlink" title=".sh(配合chmod +x使用)"></a>.sh(配合chmod +x使用)</h3><ul>
<li><p>build.sh: 编译busybox</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export ARCH=ARM</div><div class="line">export CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make menuconfig</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>creat.sh: _install文件夹下处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">rm -rf etc </div><div class="line">rm -rf dev </div><div class="line">rm -rf mnt </div><div class="line">mkdir etc</div><div class="line">mkdir dev</div><div class="line">mkdir mnt</div><div class="line">mkdir -p etc/init.d/</div><div class="line"></div><div class="line">echo &quot;mkdir -p /proc</div><div class="line">mkdir -p /tmp</div><div class="line">mkdir -p /sys</div><div class="line">mkdir -p /mnt</div><div class="line">/bin/mount -a</div><div class="line">mkdir -p /dev/pts</div><div class="line">mount -t devpts devpts /dev/pts</div><div class="line">echo /sbin/mdev &gt; /proc/sys/kernel/hotplug</div><div class="line">mdev -s</div><div class="line">&quot; &gt; etc/init.d/rcS</div><div class="line">chmod +x etc/init.d/rcS</div><div class="line"></div><div class="line">echo &quot;proc /proc proc defaults 0 0</div><div class="line">tmpfs /tmp tmpfs defaults 0 0</div><div class="line">sysfs /sys sysfs defaults 0 0</div><div class="line">tmpfs /dev tmpfs defaults 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs defaults 0 0</div><div class="line">&quot; &gt; etc/fstab</div><div class="line"></div><div class="line">echo &quot;::sysinit:/etc/init.d/rcS</div><div class="line">::respawn:-/bin/sh</div><div class="line">::askfirst:-/bin/sh</div><div class="line">::ctrlaltdel:/bin/umount -a -r</div><div class="line">&quot; &gt; etc/inittab</div><div class="line"></div><div class="line">cd dev/</div><div class="line">sudo mknod console c 5 1</div><div class="line">sudo mknod null c 1 3</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><ul>
<li><p>编译内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd linux-4.0</div><div class="line">export ARCH=arm</div><div class="line">export CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make vexpress_defconfig</div><div class="line">make menuconfig</div></pre></td></tr></table></figure>
</li>
<li><p>配置 initramfs，在 initramfs source file 中填入_install。另外需要把 Default kernel command string 清空。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">General setup ---&gt;</div><div class="line">[*] Initial RAM filesystem and RAM disk (initramfs/initrd) support</div><div class="line">(_install) Initramfs source file(s)</div><div class="line">Boot options --&gt;</div><div class="line">()Default kernel command string</div></pre></td></tr></table></figure>
</li>
<li><p>配置 memory split 为“3G/1G user/kernel split”以及打开高端内存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Kernel Features ---&gt;</div><div class="line">Memory split (3G/1G user/kernel split) ---&gt;</div><div class="line">[ *] High Memory Support</div></pre></td></tr></table></figure>
</li>
<li><p>开始编译 kernel</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make bzImage -j4 ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make dtbs</div></pre></td></tr></table></figure>
</li>
<li><p>运行 QEMU 来模拟 4 核 Cortex-A9 的 Versatile Express 开发平台。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-system-arm -M vexpress-a9 -smp 4 -m 1024M -kernel arch/arm/boot/zImage -append &quot;rdinit=/linuxrc console=ttyAMA0 loglevel=8&quot; -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="sh-配合chmod-x"><a href="#sh-配合chmod-x" class="headerlink" title=".sh(配合chmod +x)"></a>.sh(配合chmod +x)</h3><ul>
<li><p>build.sh : 编译内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">export ARCH=arm</div><div class="line">export CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make vexpress_defconfig</div><div class="line">make menuconfig</div><div class="line">make bzImage -j4 ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make dtbs</div></pre></td></tr></table></figure>
</li>
<li><p>run.sh : 运行arm内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-system-arm -M vexpress-a9 -smp 4 -m 1024M -kernel arch/arm/boot/zImage -append &quot;rdinit=/linuxrc console=ttyAMA0 loglevel=8&quot; -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographicyun</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;ubuntu16.04&lt;/li&gt;
&lt;li&gt;使用busybox编译最小文件系统，使用qemu运行起来。&lt;/li&gt;
&lt;li&gt;内容来自 奔跑吧linux内核第6章&lt;/li&gt;
&lt;li&gt;这里将输入代码过程集合到了几个.sh文件,不做重复的工作 !&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="qemu" scheme="http://yoursite.com/tags/qemu/"/>
    
  </entry>
  
</feed>
