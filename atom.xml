<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>默</title>
  <subtitle>为了生存，而一点点淡忘了最初的本意。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-23T12:32:37.572Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jasper</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法第四版笔记—</title>
    <link href="http://yoursite.com/2018/02/07/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88%E2%80%94%E6%91%98%E5%BD%95/"/>
    <id>http://yoursite.com/2018/02/07/算法第四版—摘录/</id>
    <published>2018-02-07T04:00:00.000Z</published>
    <updated>2018-02-23T12:32:37.572Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li><p>算法第四版</p>
</li>
<li><p>目前是云里雾里的,摘录一些有用的,再补充</p>
</li>
</ul>
<hr>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul>
<li><p>对象是能够承载数据类型的值的实体,包含 状态 标识 行为 3个重要特征.</p>
<ul>
<li>状态:数据类型的值</li>
<li>标识:能够将对象区分</li>
<li>行为:对数据类型的操作</li>
</ul>
</li>
<li><p>引用类型和原始数据类型并列,引用可以认为是内存地址,这一点非常容易和<code>C</code>中的指针搞混,(到现在还是头晕)</p>
</li>
<li><p>赋值语句不会创建一个新的对象,只是创建另一个指向已存在对象的引用.</p>
</li>
<li><p>java中数组对象即是一个由对象引用组成的数组.</p>
</li>
<li><p>java绝对不允许直接对引用修改.(与c的指针的区别现在还是有些混乱)</p>
</li>
</ul>
<h2 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h2><ul>
<li><p>背包</p>
<ul>
<li>不支持从中删除元素</li>
<li>与顺序无关</li>
<li>只是用来囊括所有元素</li>
</ul>
</li>
<li><p>先进先出队列(队列) FIFO</p>
<ul>
<li>先进先出</li>
<li>遍历的顺序就是添加进队列的顺序</li>
</ul>
</li>
<li><p>下压栈(栈)</p>
<ul>
<li>后进先出</li>
<li>遍历顺序是添加顺序的逆序.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;算法第四版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目前是云里雾里的,摘录一些有用的,再补充&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="算法第四版" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>总结</title>
    <link href="http://yoursite.com/2018/01/22/2017%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/01/22/2017总结/</id>
    <published>2018-01-22T04:00:11.000Z</published>
    <updated>2018-01-22T13:15:40.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h3><ul>
<li>找到了兴趣-Android开始正式学习。</li>
<li>搭建了自己的blog，虽然周围人没人关注，有一篇日子的阅读量过了1万，还是很惊喜的</li>
<li>嵌入式工作没用找到满意的，只能说等春招 Andoid的实习，这段时间努力提高自己，</li>
<li>放弃了考研</li>
<li>心情走过了类似抑郁的经历，对体制种种各有看法，是对是错，让时间见证</li>
</ul>
<hr>
<h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><ul>
<li>希望有自己的收入，经济相对自由一点</li>
<li>谈一段恋爱，遇到合适的女孩吧</li>
<li>Android的路上，顺利一点吧</li>
<li>不给自己设定限制，走一步再走一步</li>
</ul>
<h3 id="2017-1"><a href="#2017-1" class="headerlink" title="2017"></a>2017</h3><ul>
<li>工作了,有了一点自己的收入</li>
<li>有喜欢的人,却很无力的选择遗忘</li>
<li>在从事android以外的工作,2018准备转行.</li>
</ul>
<hr>
<h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h3><ul>
<li>迟到的终结</li>
<li>转行android,补足基础.</li>
<li>日常迁移到linux下,熟悉python,提升效率.</li>
<li>博客不要断,记清楚自己的目标</li>
<li>体制重重,守护好家人,除此之外,别无他求.</li>
<li>保持自己对环境的体察,珍惜剩下的时间.</li>
<li>要记得 有过的梦想,即使已经遥不可及,不等于要违背自己的底线.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2016&quot;&gt;&lt;a href=&quot;#2016&quot; class=&quot;headerlink&quot; title=&quot;2016&quot;&gt;&lt;/a&gt;2016&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;找到了兴趣-Android开始正式学习。&lt;/li&gt;
&lt;li&gt;搭建了自己的blog，虽然周围人没人关注，有一篇日子
    
    </summary>
    
      <category term="随" scheme="http://yoursite.com/categories/%E9%9A%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>python—高级特性</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2018/01/19/python—高级特性/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:03:49.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><ul>
<li>代码精炼</li>
<li>python代码量越少,开发效率越高.<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3></li>
<li>取list或tuple的部分元素</li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">L[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#0到3,但结果不包括索引3</span></div><div class="line">L[:<span class="number">3</span>] <span class="comment">#0可省略</span></div></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">L[<span class="number">-2</span>:]  <span class="comment">#-2到0 但不包括索引0</span></div><div class="line">L[<span class="number">-2</span>:<span class="number">-1</span>] <span class="comment">#-2</span></div></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L[:<span class="number">10</span>:<span class="number">2</span>] <span class="comment">#前10 每隔2个取一个</span></div><div class="line">L[::<span class="number">5</span>] <span class="comment">#所有,每隔5个取一个</span></div><div class="line">L[:] <span class="comment">#原样复制</span></div></pre></td></tr></table></figure>
</li>
<li><p>对tuple取切片,结果依然是tuple.</p>
</li>
<li><strong>字符串可以看作一个list</strong>,每个字符占一位.</li>
</ul>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul>
<li>迭代很随便…太随便了…</li>
<li>list tuple不多说了</li>
<li><p>dict字典也可以迭代,因为无序,输出的顺序不一定相同.<br>默认迭代的是key 但value 也可以迭代,key value也可以同时迭代</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d.values()</div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()</div></pre></td></tr></table></figure>
</li>
<li><p>上文书中说的,字符串可以当作list,所以也可以迭代.</p>
</li>
<li><p>问题来了,如何判断可迭代对象?<br><code>collections模块的Iterable类型判断</code></p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>类似c/java的带下标循环实现?<br>Python内置的<code>enumerate函数</code>,把一个list变成索引-元素对</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line">  print(i, value)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><ul>
<li><code>用来生成list</code></li>
<li><p>示例: [1x1, 2x2, 3x3, …, 10x10]</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)] </div><div class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>] <span class="comment">#两层</span></div></pre></td></tr></table></figure>
</li>
<li><p>for可以同时循环两个甚至多个变量,dict的items()可以同时迭代key和value</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125; <span class="comment"># 多个变量</span></div><div class="line">[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()] <span class="comment"># 生成list</span></div><div class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L] <span class="comment"># 全部小写</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul>
<li>generator 依照某种算法不断循环生成数据,而不是一次性生成完.节省大量空间.</li>
<li><p>创建generator</p>
<ul>
<li><p>把列表生成式的[]改成()</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div></pre></td></tr></table></figure>
<p>调用<code>next(g)</code>可获取下一个值.<br>最常用<code>for n in g:</code>代入for循环.也没有抛出错误.</p>
</li>
<li><p>定义一个包含<code>yield</code>关键字的函数.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">while</span> n &lt; max:</div><div class="line">    <span class="keyword">yield</span> b</div><div class="line">    a, b = b, a + b</div><div class="line">    n = n + <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure>
<ul>
<li>变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</li>
<li>用for循环调用generator时，拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li><p>可以被for循环的对象统称为可迭代对象：<code>Iterable</code><br>使用isinstance()判断一个对象是否是Iterable对象</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(&#123;&#125;, Iterable)</div></pre></td></tr></table></figure>
</li>
<li><p>可以被next()函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code> 表示一个惰性计算的序列 <code>Iterator</code>甚至可以表示一个无限大的数据流<br>isinstance()判断一个对象是否是Iterator对象</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</div></pre></td></tr></table></figure>
</li>
<li><p>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</p>
</li>
<li>Python的for循环本质上就是通过不断调用next()</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;高级特性&quot;&gt;&lt;a href=&quot;#高级特性&quot; class=&quot;headerlink&quot; title=&quot;高级特性&quot;&gt;&lt;/a&gt;高级特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码精炼&lt;/li&gt;
&lt;li&gt;python代码量越少,开发效率越高.&lt;h3 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—基础</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/01/19/python—基础/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T14:54:56.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>整数 浮点数 <h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3></li>
<li>字符串以单引号 ‘ 或 “ 包括. </li>
<li>转义字符 \ 依然有效. r’’表示此字符串默认不转移.</li>
<li>/n有效, 可用 开头 … 替换<h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3></li>
<li>只有True 和 Flase </li>
<li>and or not 3种常用操作</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul>
<li>通常都为大写表示.</li>
<li>除法有两种 / 或 //<br>/ 结果可能为浮点, // 结果为整数(地板除)</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>None 空值,不为0.谨记</li>
<li>动态语言,so,变量的类型无所谓.</li>
<li>浮点数精度无限,但超过限制直接表示为 <code>inf</code></li>
</ul>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><ul>
<li>简而言之 文件使用utf-8就对了.</li>
<li>utf-8 属于万国码的简化,低位与 ASCII 兼容.</li>
</ul>
<h3 id="python字符串编码"><a href="#python字符串编码" class="headerlink" title="python字符串编码"></a>python字符串编码</h3><ul>
<li>py3中默认是 Unicode 万国码.</li>
<li>ord()获取字符的整数表示，chr()把编码转换为字符.</li>
<li>Python对bytes类型的数据用带b前缀的单引号或双引号表示 <code>x = b&#39;ABC&#39;</code></li>
<li><p>以Unicode表示的str通过encode()方法可以编码为指定的bytes</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">b'ABC'</span></div><div class="line"><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></div></pre></td></tr></table></figure>
</li>
<li><p>对应的decode()方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'中文'</span></div></pre></td></tr></table></figure>
<p>可以传入errors=’ignore’忽略错误的字节</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">b'\xe4\xb8\xad\xff'</span>.decode(<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>len(),str计算字符.bytes计算字节</p>
</li>
<li>开头,第一行,可执行文件(windows会忽视注释)<br>第二行,以utf-8处理文件.<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><ul>
<li><p>占位符与c基本相同 %d %s %x %f</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>))</div><div class="line">print(<span class="string">'%.2f'</span> % <span class="number">3.1415926</span>)</div></pre></td></tr></table></figure>
<p>需要 % 时, %%</p>
</li>
<li><p>format()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>, <span class="number">17.125</span>)</div><div class="line"><span class="string">'Hello, 小明, 成绩提升了 17.1%'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="list-tuple"><a href="#list-tuple" class="headerlink" title="list tuple"></a>list tuple</h2><h3 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h3><ul>
<li><p>示例, <code>= [ , , ]</code> 可变 有序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>索引以 0 开始,可以倒序 <code>-n</code> 当然越界都是 <code>IndexError</code> 错误</p>
</li>
<li>.len(),list元素个数.</li>
<li>.append(x) 末尾添加</li>
<li>.insert(i,x) 对应索引处插入</li>
<li>.pop(i) 删除i对应元素,为空则删除末尾元素.</li>
<li>替换i位置,直接赋值.</li>
<li>list的元素可以为一个list.多重数组.</li>
</ul>
<h3 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple 元组"></a>tuple 元组</h3><ul>
<li><p>示例<code>= ( , , )</code> 不可变 有序 更安全,其他与list相同</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t = (<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
<li><p><code>t = (1,)</code>声明一个元素元组,比较特殊.</p>
</li>
</ul>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul>
<li><p>示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> true :</div><div class="line">    print(<span class="string">"1"</span>)</div><div class="line"><span class="keyword">elif</span> true :</div><div class="line">    print(<span class="string">"2"</span>)</div><div class="line"><span class="keyword">else</span> :</div><div class="line">    print(<span class="string">"3"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>if 条件可简写,<code>if x</code> x非零数值、非空字符串、非空list 则为true</p>
</li>
<li>提及用户输入 input()</li>
<li>input默认返回字符串,如需要其他类型 int()转换.</li>
</ul>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li><p>示例 与c相同</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> names:</div><div class="line">    print(x)</div></pre></td></tr></table></figure>
</li>
<li><p>示例 与c相同</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">    print(n)</div></pre></td></tr></table></figure>
</li>
<li><p>break 跳出此层循环</p>
</li>
<li>continue 跳出本轮循环</li>
</ul>
<h2 id="dict-和-set"><a href="#dict-和-set" class="headerlink" title="dict 和 set"></a>dict 和 set</h2><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><ul>
<li>字典,使用键值对储存数据,索引极快,空间换时间.</li>
<li>对应其他语言的 map </li>
<li><p>示例: {‘’: ,’’: ,…}</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line">d[<span class="string">'Michael'</span>]</div><div class="line"><span class="number">95</span></div></pre></td></tr></table></figure>
</li>
<li><p>key</p>
<ul>
<li>必须为不可变对象,整数、字符串等</li>
<li>一个key对应一个value</li>
<li><p>key不存在</p>
<ul>
<li><p>in判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
</li>
<li><p>get()获取</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d.get(<span class="string">'Thomas'</span>) <span class="comment"># 返回空</span></div><div class="line">d.get(<span class="string">'Thomas'</span>, <span class="number">-1</span>) <span class="comment"># 不存在? 返回-1: ;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>pop()删除</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d.pop(<span class="string">'Bob'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul>
<li>key的集合,但不存在value</li>
<li>无序、不重复、元素为不可变对象</li>
<li>创建set需要一个list</li>
<li><p>示例 set([ , , …])</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>.add(key)</code>/<code>.remove(key)</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;整数 浮点数 &lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—面向对象</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/01/19/python—面向对象/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:00:27.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li>类 方法 实例</li>
<li>封装 继承 多态</li>
</ul>
<h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><ul>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">      self.name = name</div><div class="line">      self.score = score</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">      print(<span class="string">'%s: %s'</span> % (self.name, self.score))</div><div class="line"></div><div class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>定义类的关键词与java一样 <code>class</code> 括号内为继承的父类.没有父类时,选择 <code>object</code> 作为基类.(<code>object</code>是所有类的基类)</p>
</li>
<li><p>变量比较特殊,不像java中有单独字段.python 类中变量定义是在<code>__init__</code>方法</p>
</li>
<li><p>方法的声明和函数类似. <code>def 方法名 (参数)</code></p>
<ul>
<li>类中 第一个参数必须是<code>self</code>,意为创建的实例自身.方法中调用类中其他变量都要通过 <code>self.xxx</code> 访问.</li>
</ul>
</li>
<li><p>一些必须实现的属性在<code>__init__</code>方法中定义.如示例.第一个参数是 <code>self</code> 之后是具体变量值,在方法内 使用self访问类中定义的变量.</p>
</li>
<li><p>Python允许对实例变量绑定任何数据,so just do it😈</p>
</li>
</ul>
<h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><ul>
<li>类似java private 字段的python实现</li>
<li>属性的名称前加上两个下划线 <code>__</code> 该属性就成为了类的私有属性,只能在实例的内部访问.(<code>self.xxx</code>) </li>
<li><p>获取/修改,使用 <code>get/set</code> 获取或修改对应属性.(一般在set中可以添加类型检查)</p>
</li>
<li><p>类似<code>__xxx__</code>的变量，双下划线开头，并且以双下划线结尾的，是特殊变量.特殊变量是可以直接访问的，不是private变量.也<strong>最好不要定义<code>__xxx__</code>变量名</strong></p>
</li>
<li><p>以下划线开头的实例变量名，例如<code>_name</code>.可以在外部访问的，但是，约定俗成,请直接忽视.</p>
</li>
<li><p>特例:</p>
<ul>
<li>双下划线开头的实例变量不能直接访问是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>.<strong>仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量</strong>.</li>
<li><p>一个错误设置示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name()</div><div class="line"><span class="string">'Bart Simpson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name = <span class="string">'New Name'</span> <span class="comment"># 设置__name变量！</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name</div><div class="line"><span class="string">'New Name'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name() <span class="comment"># get_name()内部返回self.__name</span></div><div class="line"><span class="string">'Bart Simpson'</span></div></pre></td></tr></table></figure>
</li>
<li><p>如同示例,外部代码直接赋给 <code>bart.__name</code> 不会影响实例中原有属性,只会新增一个属性.究其原因,实例中的属性已经被解释器重命名为了<code>bart._Student__name</code>.</p>
</li>
</ul>
</li>
</ul>
<h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><ul>
<li>继承和多态概念与java类似.不多语了.</li>
<li>那么重点来了:</li>
<li>python本身是动态语言,体现在变量/类等各个方面,自由度极高.在继承上,亦是如此.<ul>
<li>java中定义一个su方法,调用model类实例实现的run方法.su方法可传入的只有 model类或其子类的实例</li>
<li>但python中 只要是定义了 run方法(别管内容/功能一样不一样)类的实例,都可以作为参数传入 su 方法.</li>
</ul>
</li>
<li>java中对类的类型的处理,相当于照猫🐱画虎🐯,传入的起码要是个猫科动物. python 中对类的类型处理,额头写个<code>王</code>字,哪怕传入具体对象是个猫头鹰🦉,也当作猫科处理了.</li>
</ul>
<hr>
<ul>
<li>note:<br>判断一个变量是否是某个类型可以用isinstance()<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a, list)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h3><hr>
<h2 id="让我想起了java反射-不过能获取的信息要全多了"><a href="#让我想起了java反射-不过能获取的信息要全多了" class="headerlink" title="* 让我想起了java反射..不过能获取的信息要全多了."></a>* 让我想起了java反射..不过能获取的信息要全多了.</h2><h4 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h4><ul>
<li><p>示例:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; type(123)</div><div class="line">&lt;class 'int'&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; type(a)</div><div class="line">&lt;class '__main__.Animal'&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt; type(123)==type(456)</div><div class="line">True</div></pre></td></tr></table></figure>
</li>
<li><p>判断对象类型</p>
</li>
<li>由变量指向函数或者类，也可以用type()判断</li>
<li><p>type返回对应的Class类型,可直接 <code>== 类型</code>判断</p>
</li>
<li><p>判断一个对象是否是函数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import types</div><div class="line">&gt;&gt;&gt; def fn():</div><div class="line">...     pass</div><div class="line">...</div><div class="line">&gt;&gt;&gt; type(fn)==types.FunctionType</div><div class="line">True</div><div class="line">&gt;&gt;&gt; type(abs)==types.BuiltinFunctionType</div><div class="line">True</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(h, Husky)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (list, tuple))</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>判断继承关系,一打一个准.</p>
</li>
<li>能用type()判断的基本类型也可以用isinstance()判断</li>
<li>总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。</li>
</ul>
<h4 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="string">'ABC'</span>)</div><div class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>,..., <span class="string">'__subclasshook__'</span>, <span class="string">'capitalize'</span>, <span class="string">'casefold'</span>,..., <span class="string">'zfill'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>获得一个对象的所有属性和方法.直接返回一个字符串list.</p>
</li>
<li><p>配合getattr()、setattr()以及hasattr()，可以直接操作一个对象的状态.</p>
</li>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'x'</span>) <span class="comment"># 有属性'x'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>obj.x</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(obj, <span class="string">'y'</span>, <span class="number">19</span>) <span class="comment"># 设置一个属性'y'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'y'</span>) <span class="comment"># 获取属性'y'</span></div><div class="line"><span class="number">19</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>obj.y <span class="comment"># 获取属性'y'</span></div><div class="line"><span class="number">19</span></div></pre></td></tr></table></figure>
</li>
<li><p>不存在的属性，会抛出AttributeError的错误,可以传入一个default参数，如果属性不存在，就返回默认值.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'z'</span>, <span class="number">404</span>) <span class="comment"># 获取属性'z'，如果不存在，返回默认值404</span></div><div class="line"><span class="number">404</span></div></pre></td></tr></table></figure>
</li>
<li><p>也可以获得对象的方法</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'power'</span>) <span class="comment"># 有属性'power'吗？</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'</span></div><div class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0x10077a6a0</span>&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn = getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'并赋值到变量fn</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn <span class="comment"># fn指向obj.power</span></div><div class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0x10077a6a0</span>&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn() <span class="comment"># 调用fn()与调用obj.power()是一样的</span></div><div class="line"><span class="number">81</span></div></pre></td></tr></table></figure>
</li>
<li><p>只有在不知道对象信息的时候，才会去获取对象信息.谨记,谨记.</p>
</li>
</ul>
<h3 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h3><ul>
<li>类似java类中静态变量 与 普通变量区别.</li>
<li><p>类的属性,直接在类的cclass中声明.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">  name = <span class="string">'Student'</span></div></pre></td></tr></table></figure>
</li>
<li><p>访问时,类的属性会被实例的同名属性覆盖,但不会被修改,互相独立.</p>
</li>
<li>删除实例属性后，再使用相同的名称，访问到的将是类属性</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类 方法 实例&lt;/li&gt;
&lt;li&gt;封装 继承 多态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类和实例&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—模块</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/01/19/python—模块/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:01:52.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li>模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。</li>
<li><p>涉及到概念 包(Package) 和 模块(Module)</p>
</li>
<li><p>创建自己的模块时，要注意：</p>
<ul>
<li>模块名要遵循Python变量命名规范，不要使用中文、特殊字符；</li>
<li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。</li>
</ul>
</li>
</ul>
<h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><ul>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">' a test module '</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Michael Liao'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        print(<span class="string">'Hello, world!'</span>)</div><div class="line">    <span class="keyword">elif</span> len(args)==<span class="number">2</span>:</div><div class="line">        print(<span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'Too many arguments!'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure>
</li>
<li><p>注释:</p>
<ul>
<li>第1行注释可以让这个hello.py文件直接在Unix/Linux/Mac上运行</li>
<li>第2行注释表示.py文件本身使用标准UTF-8编码；</li>
<li>第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释</li>
<li>第6行使用<strong>author</strong>变量把作者写进去</li>
</ul>
</li>
<li><p>重点<code>if __name__==&#39;__main__&#39;:</code></p>
</li>
<li>Python解释器把一个特殊变量<strong>name</strong>置为<strong>main</strong>，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试.</li>
</ul>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><ul>
<li>Python中，是通过<code>_</code>前缀 标记 private </li>
<li>note: <strong>python中语法没有限制 <code>_</code>开头的变量/函数!</strong></li>
</ul>
<h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><ul>
<li><p><code>pip</code>命令 </p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install xxx</div></pre></td></tr></table></figure>
</li>
<li><p>或者在文件中自定义路径.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;涉及到概念 包(Packag
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—函数式编程</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/19/python—函数式编程/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:02:50.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul>
<li>纯函数式编程没有变量,一个函数只要输出确定,输出就是确定的,称为没有副作用.使用变量的函数内部由于变量状态不确定性,有副作用.</li>
<li>函数式编程另一个特点是允许函数本身作为参数传入,也可以直接返回另外一个函数.</li>
<li>python对函数式编程提供有限支持.(还使用变量 so不是纯函数式编程语言)<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3></li>
<li>python中函数本身也可以赋值给变量,变量可以指向函数</li>
<li>函数的参数可以传入另一个函数,这种函数称为高阶函数.</li>
</ul>
<h4 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h4><ul>
<li>map()接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回</li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]) <span class="comment"># list所有数字转为字符串</span></div></pre></td></tr></table></figure>
</li>
<li><p>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算</p>
</li>
<li>示例<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></div><div class="line"><span class="meta">... </span>    digits = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> digits[s]</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, map(char2num, <span class="string">'13579'</span>))</div><div class="line"><span class="number">13579</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><ul>
<li>filter()接收一个函数和一个序列。filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</li>
<li>filter()函数返回的是一个 惰性序列 Iterator，也就是一个惰性序列,需要用list()函数获得所有结果并返回list</li>
<li>示例<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">  <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>])) <span class="comment"># 只保留奇数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></div><div class="line">  <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</div><div class="line"></div><div class="line">list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="keyword">None</span>, <span class="string">'C'</span>, <span class="string">'  '</span>])) <span class="comment"># 删除空字符</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><ul>
<li>sorted()函数接收一个key函数来实现自定义的排序.第三个参数<code>reverse=True</code>决定正序倒序.</li>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  &gt;&gt;&gt; sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>],key=str.lower)</div><div class="line">  [<span class="string">'about'</span>, <span class="string">'bob'</span>, <span class="string">'Credit'</span>, <span class="string">'Zoo'</span>]</div><div class="line"></div><div class="line">  &gt;&gt;&gt; sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</div><div class="line">  [<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</div><div class="line">  ``` </div><div class="line"></div><div class="line"><span class="comment">### 返回函数</span></div><div class="line">* 将函数作为结果返回.(很随便😂)</div><div class="line">* 闭包（Closure）:相关参数和变量都保存在返回函数.</div><div class="line">* **note:**返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用</div><div class="line">* 示例(坑):</div><div class="line">  ```py</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">  f1, f2, f3 = count()</div><div class="line"></div><div class="line">  &gt;&gt;&gt; f1()</div><div class="line">  <span class="number">9</span></div><div class="line">  &gt;&gt;&gt; f2()</div><div class="line">  <span class="number">9</span></div><div class="line">  &gt;&gt;&gt; f3()</div><div class="line">  <span class="number">9</span></div></pre></td></tr></table></figure>
</li>
<li><p>返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9</p>
</li>
<li>一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变</li>
<li>示例:<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">          <span class="keyword">return</span> j*j</div><div class="line">      <span class="keyword">return</span> g</div><div class="line">  fs = []</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">      fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></div><div class="line">  <span class="keyword">return</span> fs</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul>
<li>不显式定义的函数. python中是 <code>lambda</code> 但与java不同.</li>
<li>python中<code>lambda</code>限制，只能有一个表达式，不用写return，返回值就是该表达式的结果</li>
<li>匿名函数不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</li>
<li>示例<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f = <span class="keyword">lambda</span> x: x * x</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><ul>
<li>代码运行期间,动态增加功能方式称为装饰器(Decorator)</li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">      print(<span class="string">'call %s():'</span> % func.__name__)</div><div class="line">      <span class="keyword">return</span> func(*args, **kw)</div><div class="line">  <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'2015-3-25'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now()</div><div class="line">call now():</div><div class="line"><span class="number">2015</span><span class="number">-3</span><span class="number">-25</span></div></pre></td></tr></table></figure>
</li>
<li><p>如示例,装饰器 接受一个函数作为参数,并返回原函数.在原函数定义时,以 <code>@ xxx</code>作为标记.示例1 为2层,如果打印文本可以自定义.</p>
</li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">          print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">          <span class="keyword">return</span> func(*args, **kw)</div><div class="line">      <span class="keyword">return</span> wrapper</div><div class="line">  <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'2015-3-25'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now()</div><div class="line">execute now():</div><div class="line"><span class="number">2015</span><span class="number">-3</span><span class="number">-25</span></div></pre></td></tr></table></figure>
<p>打印可自定义 又加上了一层.</p>
</li>
<li><p>如上两种定义后,函数对象的名称等发生了变化,so,终极版</p>
</li>
<li>Python内置的functools.wraps 会将原始函数的<code>__name__</code>等属性复制到wrapper()函数中.</li>
<li>示例<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="comment"># 不带参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="comment"># 带参数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><ul>
<li>functools.partial的作用是把一个函数的某些参数设置默认值，返回一个新的函数.</li>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"></div><div class="line">int2(<span class="string">'1000000'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>注意: 仅仅是把base参数重新设定默认值为2，<strong>但也可以在函数调用时传入其他值</strong></p>
</li>
<li>由于python 中函数也可以最为参数传入,so,参数固定成某一个函数也可.</li>
<li><p>同理: <code>*args</code> 和 <code>**kw</code> 也可以.</p>
</li>
<li><p>简化函数调用.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;纯函数式编程没有变量,一个函数只要输出确定,输出就是确定的,称为没有副作用.使用变量的函数内部由于变量状
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python—n函数</title>
    <link href="http://yoursite.com/2018/01/19/python%E2%80%94n%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/19/python—n函数/</id>
    <published>2018-01-19T02:17:11.000Z</published>
    <updated>2018-01-19T15:04:49.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul>
<li>参数数量不对 TypeError错误</li>
<li>参数类型错误，TypeError的错误，并且给出错误信息</li>
<li>int()转换为int类型</li>
<li>float()</li>
<li>bool()</li>
<li><p>str()</p>
</li>
<li><p>函数名为一指向函数对象的引用,可以将变量指向函数,再调用</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = abs <span class="comment"># 变量a指向abs函数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">-1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><ul>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">      <span class="keyword">return</span> x</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">      <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
<p>def 函数名(参数) :<br>  函数体<br>  return </p>
</li>
<li>没有return 则返回 None</li>
<li><p>import 包含模块,java一样</p>
</li>
<li><p>空函数 pass 语句.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>示例 返回多个参数</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">  nx = x + step * math.cos(angle)</div><div class="line">  ny = y - step * math.sin(angle)</div><div class="line">  <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure>
<p>返回的是一个tuple .. 按位置赋值给变量</p>
</li>
</ul>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li><strong>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数</strong></li>
</ul>
<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></div><div class="line">...</div><div class="line"></div><div class="line">power(<span class="number">5</span>)   power(<span class="number">5</span>, <span class="number">2</span>)  power(n=<span class="number">3</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数必须指向不变对象</p>
</li>
<li>多个参数时，变化大的参数在前，变化小的参数在后。变化小的参数就可以作为默认参数。</li>
<li>多个默认参数，可以按顺序提供默认参数</li>
<li><p>也可以不按顺序提供。当不按顺序提供部分默认参数时，需要把参数名写上 <code>enroll(&#39;Adam&#39;, &#39;M&#39;, city=&#39;Tianjin&#39;)</code></p>
</li>
<li><p><strong><code>坑</code></strong></p>
<ul>
<li>默认参数 不可变性 每次调用均会改变其值.</li>
</ul>
</li>
</ul>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">  sum = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">      sum = sum + n * n</div><div class="line">  <span class="keyword">return</span> sum</div><div class="line"></div><div class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">calc(*nums)   <span class="comment">#相同</span></div><div class="line">calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>传入的参数个数可变,传入组装成了tuple</p>
</li>
<li>当作c语言指针吧😂 传入数组的地址</li>
</ul>
<h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><ul>
<li><p>示例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">  print(name, age, city, job)</div><div class="line"></div><div class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>命名关键字参数需要一个特殊分隔符<em>，</em>后面的参数被视为命名关键字参数</p>
</li>
<li><p>函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">  print(name, age, args, city, job)</div></pre></td></tr></table></figure>
</li>
<li><p>如果没有可变参数，就必须加一个<em>作为特殊分隔符。如果缺少</em>，Python解释器将无法识别位置参数和命名关键字参数</p>
<h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4></li>
<li><p>示例</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></div><div class="line">  print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div><div class="line"></div><div class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=extra[<span class="string">'city'</span>], job=extra[<span class="string">'job'</span>])</div><div class="line"><span class="comment">#相同</span></div><div class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</div></pre></td></tr></table></figure>
</li>
<li><p>关键字参数在函数内部组装为一个dict</p>
</li>
<li>函数内部获得是 dict的拷贝,修改对原值无影响.</li>
<li>可以传入任意不受限制的关键字参数</li>
</ul>
<h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><ul>
<li>python 不含尾递归优化,注意层级,否则非常容易堆栈溢出.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;常用&quot;&gt;&lt;a href=&quot;#常用&quot; class=&quot;headerlink&quot; title=&quot;常用&quot;&gt;&lt;/a&gt;常用&lt;/h3&gt;&lt;ul&gt;
&lt;
    
    </summary>
    
      <category term="python笔记" scheme="http://yoursite.com/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记—Linux文件夹操作</title>
    <link href="http://yoursite.com/2018/01/18/linux%E7%AC%94%E8%AE%B0%E2%80%94Linux%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/01/18/linux笔记—Linux文件夹操作/</id>
    <published>2018-01-18T02:17:11.000Z</published>
    <updated>2018-01-19T15:06:47.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux下文件夹相关操作"><a href="#linux下文件夹相关操作" class="headerlink" title="linux下文件夹相关操作"></a>linux下文件夹相关操作</h2><ul>
<li>参考<blockquote>
<p><a href="http://blog.csdn.net/u011118014/article/details/43232693" target="_blank" rel="external">http://blog.csdn.net/u011118014/article/details/43232693</a></p>
<h2 id="打开文件夹-遍历访问每个文件"><a href="#打开文件夹-遍历访问每个文件" class="headerlink" title="打开文件夹,遍历访问每个文件"></a>打开文件夹,遍历访问每个文件</h2><h3 id="切换到文件夹路径下"><a href="#切换到文件夹路径下" class="headerlink" title="切换到文件夹路径下"></a>切换到文件夹路径下</h3></blockquote>
</li>
<li>调用 chdir 即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chdir(&quot;/info&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="打开文件夹"><a href="#打开文件夹" class="headerlink" title="打开文件夹"></a>打开文件夹</h3><ul>
<li><p>源码,打开文件夹返回对应文件夹的DIR结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DIR *dir;	</div><div class="line">dir = opendir(pcDirName);</div><div class="line">if (NULL == dir)&#123;</div><div class="line">  continue ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>DIR结构体 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">struct __dirstream</div><div class="line"> &#123;</div><div class="line">  void *__fd;</div><div class="line">  char *__data;</div><div class="line">  int __entry_data;</div><div class="line">  char *__ptr;</div><div class="line">  int __entry_ptr;</div><div class="line">  size_t __allocation;</div><div class="line">  size_t __size;</div><div class="line">  __libc_lock_define (, __lock)</div><div class="line"> &#125;;</div><div class="line">typedef struct __dirstream DIR;</div></pre></td></tr></table></figure>
<p>保存文件夹相关内容,无需深究</p>
</li>
<li><p>源码,遍历文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">struct direct    *ent;</div><div class="line">while (NULL != (ent = readdir(dir)))&#123;</div><div class="line">  /*如果 指向 . ..*/</div><div class="line">  if (0 == strcmp(ent-&gt;d_name, &quot;.&quot;) \</div><div class="line">    || 0 == strcmp(ent-&gt;d_name, &quot;..&quot;) \</div><div class="line">    || 4 == ent-&gt;d_type)&#123;</div><div class="line">      continue;</div><div class="line">  &#125;    </div><div class="line">  /*遍历*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>dirent结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct dirent</div><div class="line">&#123;</div><div class="line">  long d_ino; /* inode number 索引节点号 */</div><div class="line">  off_t d_off; /* offset to this dirent 在目录文件中的偏移 */</div><div class="line">  unsigned short d_reclen; /* length of this d_name 文件名长 */</div><div class="line">  unsigned char d_type; /* the type of d_name 文件类型 */</div><div class="line">  char d_name [NAME_MAX+1]; /* file name (null-terminated) 文件名，最长255字符 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dirent指向目录和目录中某个具体文件,但还是桥梁作用,访问文件具体内容还需要通过d_name找到stat结构体支援.</p>
</li>
<li><p>源码,获取stat结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stat  f_stat;</div><div class="line">sdwRet = stat(ent-&gt;d_name, &amp;f_stat);</div></pre></td></tr></table></figure>
</li>
<li><p>stat结构体是指向文件的结构体 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">struct stat &#123;</div><div class="line">  mode_t     st_mode;       //文件访问权限</div><div class="line">  ino_t      st_ino;       //索引节点号</div><div class="line">  dev_t      st_dev;        //文件使用的设备号</div><div class="line">  dev_t      st_rdev;       //设备文件的设备号</div><div class="line">  nlink_t    st_nlink;      //文件的硬连接数</div><div class="line">  uid_t      st_uid;        //所有者用户识别号</div><div class="line">  gid_t      st_gid;        //组识别号</div><div class="line">  off_t      st_size;       //以字节为单位的文件容量</div><div class="line">  time_t     st_atime;      //最后一次访问该文件的时间</div><div class="line">  time_t     st_mtime;      //最后一次修改该文件的时间</div><div class="line">  time_t     st_ctime;      //最后一次改变该文件状态的时间</div><div class="line">  blksize_t st_blksize;    //包含该文件的磁盘块的大小</div><div class="line">  blkcnt_t   st_blocks;     //该文件所占的磁盘块</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>之后愉快访问吧</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux下文件夹相关操作&quot;&gt;&lt;a href=&quot;#linux下文件夹相关操作&quot; class=&quot;headerlink&quot; title=&quot;linux下文件夹相关操作&quot;&gt;&lt;/a&gt;linux下文件夹相关操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参考&lt;blockquote&gt;
&lt;p&gt;&lt;a
    
    </summary>
    
      <category term="linux笔记" scheme="http://yoursite.com/categories/linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android随手记—Android M闪退小记</title>
    <link href="http://yoursite.com/2017/11/23/Android%E9%9A%8F%E6%89%8B%E8%AE%B0-Android%20M%E9%97%AA%E9%80%80%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/23/Android随手记-Android M闪退小记/</id>
    <published>2017-11-23T04:00:00.000Z</published>
    <updated>2017-11-23T13:25:12.337Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>编程环境</p>
<ul>
<li>Android Studio 3.0.1</li>
</ul>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>MyPrivacy 在android M上闪退,在模拟器中复现.提示<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>进入第二个Activity应用设置时,才出现,而且 7.1无问题.模拟器复现,抓log.</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>log的意思是启动activity的context不是 activity.</li>
<li><p>对应代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(MyApplicantion.getContext(),   AppSettingActivity.class);</div><div class="line">intent.putExtra(&quot;PackageName&quot;, AppId);</div><div class="line">MyApplicantion.getContext().startActivity(intent);</div></pre></td></tr></table></figure>
</li>
<li><p>需要对intent声明 FLAG_ACTIVITY_NEW_TASK</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>网上的原因分析:</li>
<li>因为standard模式的Activity默认会进入启动它的Activity所属的任务栈中，但是由于非Activity类型的context（ApplicationContext）并没有所谓的任务栈，所以就出现问题了。需要指定Activity为FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候，就会为它创建一个新的任务栈了。–android开发艺术探究</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 3.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;M
    
    </summary>
    
      <category term="Android随手记" scheme="http://yoursite.com/categories/Android%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android随手记—ScrollView</title>
    <link href="http://yoursite.com/2017/11/12/Android%E9%9A%8F%E6%89%8B%E8%AE%B0-ScrollView/"/>
    <id>http://yoursite.com/2017/11/12/Android随手记-ScrollView/</id>
    <published>2017-11-12T04:00:00.000Z</published>
    <updated>2017-11-12T09:48:39.562Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>编程环境</p>
<ul>
<li>Android Studio 3.0</li>
</ul>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>横屏模式下,显示内容被遮挡</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>Google😂</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>ScrollView 只允许嵌套一个子布局.超出范围部分会自动增加滚动条</li>
</ul>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>ScrollView 只能添加竖直方向滚动条.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;横屏模
    
    </summary>
    
      <category term="Android随手记" scheme="http://yoursite.com/categories/Android%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—Rxjava2</title>
    <link href="http://yoursite.com/2017/11/06/Android%E7%AC%94%E8%AE%B0%E2%80%94Rxjava2/"/>
    <id>http://yoursite.com/2017/11/06/Android笔记—Rxjava2/</id>
    <published>2017-11-06T04:00:00.000Z</published>
    <updated>2017-11-06T15:10:08.181Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下<br><a href="http://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="external">给初学者的RxJava2.0教程</a>(demo代码来源)</p>
<blockquote>
<p><a href="http://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="external">http://www.jianshu.com/u/c50b715ccaeb</a></p>
</blockquote>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<hr>
<ul>
<li>在Gradle配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;io.reactivex.rxjava2:rxjava:2.0.1&apos;</div><div class="line">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul>
<li>在Eventbus中亦涉及了相关概念,比较简单.包括Observable(被观察者)、Observer(观察者)、subscribe().事件由Observable(被观察者)开始发出,通过subscribe()最终被传递到Observer(观察者).而整个过程中你是站在Observer(观察者)的位置,也就是事件的末尾,观察Observable(被观察者).</li>
<li><p>上图</p>
</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">              emitter.onNext(1);</div><div class="line">              emitter.onComplete();</div><div class="line">          &#125;</div><div class="line">      &#125;).subscribe(new Observer&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void onSubscribe(Disposable d) &#123;</div><div class="line">              Log.d(TAG, &quot;subscribe&quot;);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onNext(Integer value) &#123;</div><div class="line">              Log.d(TAG, &quot;&quot; + value);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onError(Throwable e) &#123;</div><div class="line">              Log.d(TAG, &quot;error&quot;);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onComplete() &#123;</div><div class="line">              Log.d(TAG, &quot;complete&quot;);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>事件由<code>emitter.onNext(1);</code>开始,最终被<code>public void onNext(Integer value)</code>相应.被观察者事件发送结束调用<code>emitter.onComplete();</code>,同时观察者最终以<code>public void onComplete()</code>相应.</p>
</li>
</ul>
<hr>
<h2 id="note-上下游以-subscribe建立连接后-事件才会开始发送"><a href="#note-上下游以-subscribe建立连接后-事件才会开始发送" class="headerlink" title="* note: 上下游以.subscribe建立连接后,事件才会开始发送."></a>* note: 上下游以<code>.subscribe</code>建立连接后,事件才会开始发送.</h2><h3 id="Observable-被观察者-Observer-观察者"><a href="#Observable-被观察者-Observer-观察者" class="headerlink" title="Observable(被观察者) Observer(观察者)"></a>Observable(被观察者) Observer(观察者)</h3><ul>
<li>ObservableEmitter<br>ObservableEmitter： Emitter意为发射器,事件发送.onNext(T value)、onComplete()和onError(Throwable error)分别对应next事件、complete事件和error事件。</li>
<li>Observer<integer>中onNext(Integer value)、onError(Throwable e)、onComplete()对应接受next事件、complete事件和error事件</integer></li>
<li>被观察者发送complete事件和error事件后,观察者接受后不再继续响应事件,即使被观察者还在发送事件.<strong>complete事件和error事件互斥.</strong></li>
<li>在Observer<integer>中,调用Disposable.dispose(),切断管道.被观察者继续发送,但观察者不再响应.</integer></li>
</ul>
<h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><ul>
<li>建立Observable(被观察者) Observer(观察者)之间的管道.有多个重载.</li>
<li><p>重载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final Disposable subscribe() &#123;&#125;</div><div class="line"></div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext) &#123;&#125;</div><div class="line"></div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError) &#123;&#125; </div><div class="line"></div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete) &#123;&#125;</div><div class="line"></div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe) &#123;&#125;</div><div class="line"></div><div class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重载说明</p>
<ul>
<li>不带参数 : 观察者不关心任何事件(有卵用😵)</li>
<li>只带onNext : 观察者只响应next事件.</li>
<li>其他类似….演绎推理….</li>
<li>最后一个是传入完整的Observer对象.(demo就是🙃)</li>
</ul>
</li>
</ul>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ul>
<li>基于Rxjava的观察者模式可以拆分大多数的业务逻辑,即使再增加很多功能整体也不会过于混乱.</li>
<li>但Rxjava的强大并不局限在拆分逻辑.由被观察者到观察者的整个事件传递过程,基于Rxjava我们可以<strong>任意拆分 合并 转换 事件、切换线程等.</strong></li>
</ul>
<hr>
<h2 id="note-操作符搭配-Lambda-表达式食用更佳-🤣"><a href="#note-操作符搭配-Lambda-表达式食用更佳-🤣" class="headerlink" title="* note: 操作符搭配 Lambda 表达式食用更佳 🤣"></a>* note: 操作符搭配 Lambda 表达式食用更佳 🤣</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li>产生并发送 Obserable 事件.</li>
<li>仅常用,详细在<a href="https://maxwell-nc.github.io/android/rxjava2-2.html#timer" target="_blank" rel="external"> RxJava 2.x 使用详解(二) 创建操作符</a> <h4 id="creat"><a href="#creat" class="headerlink" title=".creat"></a>.creat</h4></li>
<li>前面demo中已经实际使用过了</li>
<li>用于产生一个 Obserable 被观察者对象,demo如上所示.</li>
</ul>
<h4 id="just"><a href="#just" class="headerlink" title=".just"></a>.just</h4><ul>
<li>对于简单的几个数据,直接使用just发送即可,无需创建 Obserable 对象.just最多可以接收 <strong>10</strong> 个参数.</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable.just(&quot;test&quot;,&quot;test2&quot;)</div><div class="line">      .subscribe(str -&gt; Log.i(&quot;tag&quot;, str));</div></pre></td></tr></table></figure>
<p>相当于顺序调用onNext(“test”)和onNext(“test2”)，最后调用onComplete方法。</p>
</li>
</ul>
<h4 id="fromArray"><a href="#fromArray" class="headerlink" title=".fromArray"></a>.fromArray</h4><ul>
<li>功能与just类似但fromArray来接收任意长度的数据数组,也可以直接传入数组<code>fromArray(new int[]{1, 2, 3})</code></li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable.fromArray(1, 2, 3, 4, 5)</div><div class="line">      .subscribe(integer -&gt; Log.i(&quot;tag&quot;, String.valueOf(integer)));</div></pre></td></tr></table></figure>
<p>fromArray不支持直接传入list进，list会被当作一个整体发送.</p>
</li>
</ul>
<h4 id="fromIterable"><a href="#fromIterable" class="headerlink" title=".fromIterable"></a>.fromIterable</h4><ul>
<li>功能与fromArray类似,但是可以接收 list 类型,遍历可迭代数据集合.</li>
<li>demo<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line">list.add(&quot;a&quot;);</div><div class="line">list.add(&quot;b&quot;);</div><div class="line">list.add(&quot;c&quot;);</div><div class="line"></div><div class="line">Flowable.fromIterable(list).subscribe(</div><div class="line">      s -&gt; Log.i(&quot;tag&quot;, s)</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="timer"><a href="#timer" class="headerlink" title=".timer"></a>.timer</h4><ul>
<li>指定一段时间间隔后发送数据(一次性),不太常用.</li>
</ul>
<h3 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h3><ul>
<li>默认事件传递的双方在同一线程工作.</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribeOn(Schedulers.newThread())     </div><div class="line">       .subscribeOn(Schedulers.io())              </div><div class="line">       .observeOn(AndroidSchedulers.mainThread()) </div><div class="line">       .observeOn(Schedulers.io())                </div><div class="line">       .subscribe(consumer);</div></pre></td></tr></table></figure>
</li>
<li><p>方法:</p>
<ul>
<li>.subscribeOn() : 指定被观察者发送事件线程,<strong>仅第一次调用时有效!</strong>  </li>
<li>.observeOn() : 指定观察者/流变换(对发送的事件处理🖖)线程,<strong>多次调用,多次切换有效</strong></li>
</ul>
</li>
<li><p>参数:</p>
<ul>
<li>Schedulers.io() : 适用于io密集型操作,网络通信、磁盘操作等.</li>
<li>Schedulers.computation() : CPU密集操作,需要大量CPU计算的操作.</li>
<li>Schedulers.newThread() : 创建新线程.</li>
<li>AndroidSchedulers.mainThread() : Android主线程,通常为更新UI等.</li>
</ul>
</li>
</ul>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><ul>
<li>对 Obserable 事件筛选.</li>
<li>仅常用,详细在<a href="https://maxwell-nc.github.io/android/rxjava2-3.html#filter" target="_blank" rel="external">RxJava 2.x 使用详解(三) 过滤操作符</a></li>
</ul>
<h4 id="filter"><a href="#filter" class="headerlink" title=".filter"></a>.filter</h4><ul>
<li>基本过滤操作符,按照任意自定规则过滤.</li>
</ul>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><h4 id="map"><a href="#map" class="headerlink" title=".map"></a>.map</h4><ul>
<li>处理前后事件数量之比<strong>1:1</strong>,事件变换前后顺序<strong>不变</strong></li>
<li>map作用是对Observable发送的每一个事件,应用处理变换函数,再继续像下游发送.中间过程可以转换事件类型、改变事件内容等等.<strong>只需要变换后的事件类型与下游接收的类型匹配即可.</strong></li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">              emitter.onNext(1);</div><div class="line">              emitter.onNext(2);</div><div class="line">              emitter.onNext(3);</div><div class="line">          &#125;</div><div class="line">      &#125;).map(new Function&lt;Integer, String&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public String apply(Integer integer) throws Exception &#123;</div><div class="line">              return &quot;This is result &quot; + integer;</div><div class="line">          &#125;</div><div class="line">      &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void accept(String s) throws Exception &#123;</div><div class="line">              Log.d(TAG, s);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>这里是把int类型转换为了string类型,与观察者接收的类型匹配即可.</p>
</li>
</ul>
<h4 id="flatMap"><a href="#flatMap" class="headerlink" title=".flatMap"></a>.flatMap</h4><ul>
<li>处理前后事件数量之比 <strong>1:n</strong>,事件变换前后顺序<strong>不保证</strong></li>
<li>flatMap,通俗点就是把Observable发送的事件拆散变换再,继续像下游发送.1个Observable事件可拆成任意个.<strong>只需要变换后的事件类型与下游接收的类型匹配即可.</strong></li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">              emitter.onNext(1);</div><div class="line">              emitter.onNext(2);</div><div class="line">              emitter.onNext(3);</div><div class="line">          &#125;</div><div class="line">      &#125;).flatMap(new Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public ObservableSource&lt;String&gt; apply(Integer integer) throws Exception &#123;</div><div class="line">              final List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line">              for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">                  list.add(&quot;I am value &quot; + integer);</div><div class="line">              &#125;</div><div class="line">              return Observable.fromIterable(list).delay(10,TimeUnit.MILLISECONDS);</div><div class="line">          &#125;</div><div class="line">      &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void accept(String s) throws Exception &#123;</div><div class="line">              Log.d(TAG, s);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>这里是flatMap把一个int类型事件拆成了3个String类型,运行结果看,最终事件到达顺序与onNext(1);onNext(2);的发送顺序无关</p>
</li>
</ul>
<h4 id="concatMap"><a href="#concatMap" class="headerlink" title=".concatMap"></a>.concatMap</h4><ul>
<li>处理前后事件数量之比 <strong>1:n</strong>,事件变换前后顺序<strong>按顺序</strong></li>
<li>与flatMap作用相同,只是保证了事件严格按顺序达到下游.</li>
<li>demo 就不上了,直接替换flatMap的位置就好.</li>
</ul>
<h4 id="zip"><a href="#zip" class="headerlink" title=".zip"></a>.zip</h4><ul>
<li>处理前后事件数量之比 <strong>n:1</strong>,事件变换前后顺序<strong>严格按顺序</strong></li>
<li>zip.最常见的压缩文件格式,在这里也是类似的意思,zip可以严格按照顺序合并多个 <strong>不同类型</strong> Observable发送的事件.总的发送事件数量与上游Observable发送最少的那个数量相同.</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable1 = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;         </div><div class="line">  @Override                                                                                      </div><div class="line">  public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;                   </div><div class="line">      Log.d(TAG, &quot;emit 1&quot;);                                                                      </div><div class="line">      emitter.onNext(1);                                                                         </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit 2&quot;);                                                                      </div><div class="line">      emitter.onNext(2);                                                                         </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit 3&quot;);                                                                      </div><div class="line">      emitter.onNext(3);                                                                         </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit 4&quot;);                                                                      </div><div class="line">      emitter.onNext(4);                                                                         </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit complete1&quot;);                                                              </div><div class="line">      emitter.onComplete();                                                                      </div><div class="line">  &#125;                                                                                              </div><div class="line">&#125;).subscribeOn(Schedulers.io());                                                                   </div><div class="line"></div><div class="line">Observable&lt;String&gt; observable2 = Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;           </div><div class="line">  @Override                                                 public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception &#123;                    </div><div class="line">      Log.d(TAG, &quot;emit A&quot;);                                                                  </div><div class="line">      emitter.onNext(&quot;A&quot;);                                                                       </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit B&quot;);                                                                      </div><div class="line">      emitter.onNext(&quot;B&quot;);                                                                       </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit C&quot;);                                                                      </div><div class="line">      emitter.onNext(&quot;C&quot;);                                                                       </div><div class="line">      Thread.sleep(1000);                                                                        </div><div class="line"></div><div class="line">      Log.d(TAG, &quot;emit complete2&quot;);                                                              </div><div class="line">      emitter.onComplete();                                                                      </div><div class="line">  &#125;                                                                                              </div><div class="line">&#125;).subscribeOn(Schedulers.io());                                                                   </div><div class="line"></div><div class="line">Observable.zip(observable1, observable2, new BiFunction&lt;Integer, String, String&gt;() &#123;               </div><div class="line">  @Override                                                                                      </div><div class="line">  public String apply(Integer integer, String s) throws Exception &#123;                              </div><div class="line">      return integer + s;                                                                        </div><div class="line">  &#125;                                                                                              </div><div class="line">&#125;).subscribe(new Observer&lt;String&gt;() &#123;                    </div><div class="line">  @Override                                                                                      </div><div class="line">  public void onSubscribe(Disposable d) &#123;                                                        </div><div class="line">      Log.d(TAG, &quot;onSubscribe&quot;);                                                                 </div><div class="line">  &#125;                                                                                              </div><div class="line"></div><div class="line">  @Override                                                                                      </div><div class="line">  public void onNext(String value) &#123;                                                             </div><div class="line">      Log.d(TAG, &quot;onNext: &quot; + value);                                                            </div><div class="line">  &#125;                                                                                              </div><div class="line"></div><div class="line">  @Override                                                                                      </div><div class="line">  public void onError(Throwable e) &#123;                                                             </div><div class="line">      Log.d(TAG, &quot;onError&quot;);                                                                     </div><div class="line">  &#125;                                                                                              </div><div class="line"></div><div class="line">  @Override                                                                                      </div><div class="line">  public void onComplete() &#123;                                                                     </div><div class="line">      Log.d(TAG, &quot;onComplete&quot;);                                                                  </div><div class="line">  &#125;                                                                                              </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里两个事件发送在同一线程中.当两个事件发送不再同一线程时,情况类似,不过当异步时,数量较少的事件发送完成,发送Complete事件后,通道随即被切断.</p>
</li>
</ul>
<h4 id="Concat"><a href="#Concat" class="headerlink" title=".Concat"></a>.Concat</h4><ul>
<li>处理前后事件数量之比 <strong>n:1</strong>,事件变换前后顺序<strong>严格按顺序</strong></li>
<li>Concat,可以严格按照顺序合并 <strong>相同类型</strong> Observable发送的事件.</li>
</ul>
<h2 id="Backpressure"><a href="#Backpressure" class="headerlink" title="Backpressure"></a>Backpressure</h2><hr>
<h2 id="被翻译为背压…-如此文不达意的直译-能忍-往下都是因为原文-😈"><a href="#被翻译为背压…-如此文不达意的直译-能忍-往下都是因为原文-😈" class="headerlink" title="* 被翻译为背压…(如此文不达意的直译,能忍?往下都是因为原文..😈)"></a>* 被翻译为背压…(如此文不达意的直译,能忍?往下都是因为原文..😈)</h2><ul>
<li>其实概念有够简单:将整个事件产生/传递/处理的过程想象为一条河流由上而下, Backpressure 指的是上游产生的事件太快,远远超过了下游的处理速度,以至于缓冲区溢出.上游来了洪水,下游径流量不够,以至于中间河道跨过了堤岸,溢出.</li>
</ul>
<h3 id="Flowable基础"><a href="#Flowable基础" class="headerlink" title="Flowable基础"></a>Flowable基础</h3><ul>
<li><p>Rxjava 1.x中需要自行通过操作符处理,到了2.0中,则有了专门对付发洪水上游的被观察者- Flowable .我们常用的 observable 在2.x中一般用于不涉及 Backpressure 的情况.而对应与 observable 的 Observer ,改为了  Subscriber .</p>
</li>
<li><p>demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">Flowable&lt;Integer&gt; upstream = Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          public void subscribe(FlowableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">              Log.d(TAG, &quot;emit 1&quot;);</div><div class="line">              emitter.onNext(1);</div><div class="line">              Log.d(TAG, &quot;emit 2&quot;);</div><div class="line">              emitter.onNext(2);</div><div class="line">              Log.d(TAG, &quot;emit 3&quot;);</div><div class="line">              emitter.onNext(3);</div><div class="line">              Log.d(TAG, &quot;emit complete&quot;);</div><div class="line">              emitter.onComplete();</div><div class="line">          &#125;</div><div class="line">      &#125;, BackpressureStrategy.ERROR); //增加了一个参数</div><div class="line"></div><div class="line">      Subscriber&lt;Integer&gt; downstream = new Subscriber&lt;Integer&gt;() &#123;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onSubscribe(Subscription s) &#123;</div><div class="line">              Log.d(TAG, &quot;onSubscribe&quot;);</div><div class="line">              s.request(Long.MAX_VALUE);  //注意这句代码</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onNext(Integer integer) &#123;</div><div class="line">              Log.d(TAG, &quot;onNext: &quot; + integer);</div><div class="line"></div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onError(Throwable t) &#123;</div><div class="line">               Log.w(TAG, &quot;onError: &quot;, t);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          public void onComplete() &#123;</div><div class="line">              Log.d(TAG, &quot;onComplete&quot;);</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      upstream.subscribe(downstream);</div></pre></td></tr></table></figure>
</li>
<li><p>注意两个地方</p>
<ul>
<li>Flowable创建时比 observable 多了一个参数.(参数作用下节说明)</li>
<li>Subscriber中调用了 s.request .</li>
</ul>
</li>
<li><p>Flowable 与 Observable 最大的不同就是 Flowable再次发送事件需要等待 Subscriber 中调用 .request </p>
</li>
<li><p>.request() 实质上是下游告知上游自己的处理能力,使得上游根据下游处理能力发送事件.<strong>多次调用,上游表示处理能力的数字会叠加</strong>,上游每发送一个事件,该数字减一,到0抛出异常</p>
<ul>
<li>上下游在同一线程时,下游没有或没有及时调用 .request ,上游会抛出异常</li>
<li>异步线程时,下游即使没有调用 .request 会有128个事件的缓存区.上游可继续发出事件,缓存区超出128个事件后,抛出异常.</li>
</ul>
</li>
</ul>
<h3 id="Flowable拓展"><a href="#Flowable拓展" class="headerlink" title="Flowable拓展"></a>Flowable拓展</h3><h2 id="这里对-Flowable-多的参数进行说明"><a href="#这里对-Flowable-多的参数进行说明" class="headerlink" title="* 这里对 Flowable 多的参数进行说明."></a>* 这里对 Flowable 多的参数进行说明.</h2><ul>
<li>参数<ul>
<li>BackpressureStrategy.BUFFER : 默认缓存区128,这个参数极大拓展了缓存区,使得 Flowable 表现与 Observable 差不多.</li>
<li>BackpressureStrategy.DROP : 128缓存区满了,就丢弃上游事件,直到下游处理了一个事件,缓存区 -1 ,再允许存入新的上游事件.</li>
<li>BackpressureStrategy.LATEST : 永远保存最后达到的128个上游事件,上游有新的事件到达满载的缓存区时,丢弃第一个存入缓存区的上游事件.</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>对于不是由我们编写的 Flowable 也可以通过 interval 操作符来加工.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Flowable.interval(1, TimeUnit.MICROSECONDS)</div><div class="line">              .onBackpressureDrop()  //加上 Backpressure 策略</div></pre></td></tr></table></figure>
</li>
<li><p>对应上文,指定参数有3,意思同上.</p>
<ul>
<li>onBackpressureBuffer()</li>
<li>onBackpressureDrop()</li>
<li>onBackpressureLatest()</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/u/c50b715ccaeb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给初学者的RxJava2.0教程&lt;/a&gt;(demo代码来源)&lt;/p&gt;
&lt;blockqu
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android随手记—Glide加载Drawable对象</title>
    <link href="http://yoursite.com/2017/11/04/Android%E9%9A%8F%E6%89%8B%E8%AE%B0-Glide%E5%8A%A0%E8%BD%BDDrawable%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/11/04/Android随手记-Glide加载Drawable对象/</id>
    <published>2017-11-04T04:00:00.000Z</published>
    <updated>2017-11-04T13:59:36.566Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>编程环境</p>
<ul>
<li>Android Studio 3.0</li>
</ul>
<hr>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li><p>Glide是一个通用的图片缓存框架,但是在MyPrivacy显示appIcon时,传入 一个Drawable对象,提示类型不匹配. </p>
</li>
<li><p>(注意: 这里是直接传入Drawable对象,不是经过 R.xx 引用 !)</p>
</li>
</ul>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li>查阅资料后,确认Glide不支持直接加载传入的Drawable对象,转换为bitDrawable类型也不可.</li>
<li><p>解决思路来自</p>
<blockquote>
<p><a href="https://github.com/bumptech/glide/issues/588" target="_blank" rel="external">https://github.com/bumptech/glide/issues/588</a></p>
</blockquote>
</li>
<li><p>不支持直接加载,但Glide的.error(Icon)错误时显示   .placeholder(Icon)占位符,支持Drawable对象</p>
</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>不再直接加载 .load 传入空字符串, 通过 .placeholder 简洁加载.</li>
<li>demo <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Drawable Icon　＝　ｘｘｘ；</div><div class="line"></div><div class="line">RequestOptions options = new RequestOptions()</div><div class="line">             .error(Icon)</div><div class="line">             .placeholder(Icon);</div><div class="line"></div><div class="line"> Glide.with(context)</div><div class="line">             .load(&quot;&quot;)</div><div class="line">             .apply(options)</div><div class="line">             .into(imageView);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>placeholder 在Glide 4.x版本中,移入了 RequestOptions 对象中.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Android随手记" scheme="http://yoursite.com/categories/Android%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记—qemu运行linux</title>
    <link href="http://yoursite.com/2017/09/10/linux%E7%AC%94%E8%AE%B0%E2%80%94qemu%E8%BF%90%E8%A1%8Clinux/"/>
    <id>http://yoursite.com/2017/09/10/linux笔记—qemu运行linux/</id>
    <published>2017-09-10T02:17:11.000Z</published>
    <updated>2017-09-10T01:50:57.633Z</updated>
    
    <content type="html"><![CDATA[<hr>
<ul>
<li>ubuntu16.04</li>
<li>使用busybox编译最小文件系统，使用qemu运行起来。</li>
<li>内容来自 奔跑吧linux内核第6章</li>
<li>这里将输入代码过程集合到了几个.sh文件,不做重复的工作 !</li>
<li>当然网好是前提,最好挂代理.</li>
</ul>
<hr>
<h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><ul>
<li><p>首先需要安装qemu gcc, ubuntu16.04中自带的gcc版本较低,这里我们安装书中推荐的gcc-arm-linux-gnueabi </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install qemu libncurses5-dev gcc-arm-linux-gnueabi build-essential</div></pre></td></tr></table></figure>
</li>
<li><p>下载busybox源码</p>
<ul>
<li>书中推荐版本是1.24,但最新版本已经到了busybox-1.27.2.这里我们使用最新版<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://busybox.net/downloads/busybox-1.27.2.tar.bz2</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>解压到 busybox 文件夹<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -jxvf busybox-1.27.2.tar.bz2</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>下载linux内核源码<ul>
<li>还是以配套的4.0源码为例,(提醒:内核解压后大约占800MB,请预留出足够空间)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.0.tar.gz</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>解压到linux文件夹<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -jxvf linux-4.0.tar.gz</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="编译最小文件系统"><a href="#编译最小文件系统" class="headerlink" title="编译最小文件系统"></a>编译最小文件系统</h2><h2 id="别问我最小文件系统是什么-我也有点😵-但是先用起来"><a href="#别问我最小文件系统是什么-我也有点😵-但是先用起来" class="headerlink" title="* 别问我最小文件系统是什么,我也有点😵,但是先用起来."></a>* 别问我最小文件系统是什么,我也有点😵,但是先用起来.</h2><ul>
<li><p>首先利用 busybox 手工编译一个最小文件系统。<br>在busybox文件夹下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export ARCH=ARM</div><div class="line">export CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make menuconfig</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>进入menuconfig后,配置静态编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Busybox Settings ---&gt;</div><div class="line">Build Options ---&gt;</div><div class="line">[*] Build BusyBox as a static binary (no shared libs)</div></pre></td></tr></table></figure>
</li>
<li><p>然后 make install 编译完成。编译完成后,把 busybox 根目录下面的_install 目录拷贝到 linux-4.0 下。</p>
</li>
<li><p>进入_install 目录，创建 etc、dev 等目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir etc</div><div class="line">mkdir dev</div><div class="line">mkdir mnt</div><div class="line">mkdir -p etc/init.d/</div></pre></td></tr></table></figure>
</li>
<li><p>在_install /etc/init.d/目录下创建 文件名rcS 的文件，写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mkdir –p /proc</div><div class="line">mkdir –p /tmp</div><div class="line">mkdir -p /sys</div><div class="line">mkdir –p /mnt</div><div class="line">/bin/mount -a</div><div class="line">mkdir -p /dev/pts</div><div class="line">mount -t devpts devpts /dev/pts</div><div class="line">echo /sbin/mdev &gt; /proc/sys/kernel/hotplug</div><div class="line">mdev –s</div></pre></td></tr></table></figure>
<p>同时使用 <code>chmod +x rcS</code>修改rcS的可执行权限.</p>
</li>
<li><p>在_install /etc 目录创建文件名 fstab 的文件，并写入以下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">proc /proc proc defaults 0 0</div><div class="line">tmpfs /tmp tmpfs defaults 0 0</div><div class="line">sysfs /sys sysfs defaults 0 0</div><div class="line">tmpfs /dev tmpfs defaults 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs defaults 0 0</div></pre></td></tr></table></figure>
</li>
<li><p>在_install /etc 目录创建文件名 inittab 的文件，并写入如下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">::sysinit:/etc/init.d/rcS</div><div class="line">::respawn:-/bin/sh</div><div class="line">::askfirst:-/bin/sh</div><div class="line">::ctrlaltdel:/bin/umount -a –r</div></pre></td></tr></table></figure>
</li>
<li><p>在_install/dev 目录下创建如下设备节点，以root权限执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd _install/dev/</div><div class="line">sudo mknod console c 5 1</div><div class="line">sudo mknod null c 1 3</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="sh-配合chmod-x使用"><a href="#sh-配合chmod-x使用" class="headerlink" title=".sh(配合chmod +x使用)"></a>.sh(配合chmod +x使用)</h3><ul>
<li><p>build.sh: 编译busybox</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export ARCH=ARM</div><div class="line">export CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make menuconfig</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>creat.sh: _install文件夹下处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">rm -rf etc </div><div class="line">rm -rf dev </div><div class="line">rm -rf mnt </div><div class="line">mkdir etc</div><div class="line">mkdir dev</div><div class="line">mkdir mnt</div><div class="line">mkdir -p etc/init.d/</div><div class="line"></div><div class="line">echo &quot;mkdir -p /proc</div><div class="line">mkdir -p /tmp</div><div class="line">mkdir -p /sys</div><div class="line">mkdir -p /mnt</div><div class="line">/bin/mount -a</div><div class="line">mkdir -p /dev/pts</div><div class="line">mount -t devpts devpts /dev/pts</div><div class="line">echo /sbin/mdev &gt; /proc/sys/kernel/hotplug</div><div class="line">mdev -s</div><div class="line">&quot; &gt; etc/init.d/rcS</div><div class="line">chmod +x etc/init.d/rcS</div><div class="line"></div><div class="line">echo &quot;proc /proc proc defaults 0 0</div><div class="line">tmpfs /tmp tmpfs defaults 0 0</div><div class="line">sysfs /sys sysfs defaults 0 0</div><div class="line">tmpfs /dev tmpfs defaults 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs defaults 0 0</div><div class="line">&quot; &gt; etc/fstab</div><div class="line"></div><div class="line">echo &quot;::sysinit:/etc/init.d/rcS</div><div class="line">::respawn:-/bin/sh</div><div class="line">::askfirst:-/bin/sh</div><div class="line">::ctrlaltdel:/bin/umount -a -r</div><div class="line">&quot; &gt; etc/inittab</div><div class="line"></div><div class="line">cd dev/</div><div class="line">sudo mknod console c 5 1</div><div class="line">sudo mknod null c 1 3</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><ul>
<li><p>编译内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd linux-4.0</div><div class="line">export ARCH=arm</div><div class="line">export CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make vexpress_defconfig</div><div class="line">make menuconfig</div></pre></td></tr></table></figure>
</li>
<li><p>配置 initramfs，在 initramfs source file 中填入_install。另外需要把 Default kernel command string 清空。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">General setup ---&gt;</div><div class="line">[*] Initial RAM filesystem and RAM disk (initramfs/initrd) support</div><div class="line">(_install) Initramfs source file(s)</div><div class="line">Boot options --&gt;</div><div class="line">()Default kernel command string</div></pre></td></tr></table></figure>
</li>
<li><p>配置 memory split 为“3G/1G user/kernel split”以及打开高端内存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Kernel Features ---&gt;</div><div class="line">Memory split (3G/1G user/kernel split) ---&gt;</div><div class="line">[ *] High Memory Support</div></pre></td></tr></table></figure>
</li>
<li><p>开始编译 kernel</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make bzImage -j4 ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make dtbs</div></pre></td></tr></table></figure>
</li>
<li><p>运行 QEMU 来模拟 4 核 Cortex-A9 的 Versatile Express 开发平台。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-system-arm -M vexpress-a9 -smp 4 -m 1024M -kernel arch/arm/boot/zImage -append &quot;rdinit=/linuxrc console=ttyAMA0 loglevel=8&quot; -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="sh-配合chmod-x"><a href="#sh-配合chmod-x" class="headerlink" title=".sh(配合chmod +x)"></a>.sh(配合chmod +x)</h3><ul>
<li><p>build.sh : 编译内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">export ARCH=arm</div><div class="line">export CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make vexpress_defconfig</div><div class="line">make menuconfig</div><div class="line">make bzImage -j4 ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">make dtbs</div></pre></td></tr></table></figure>
</li>
<li><p>run.sh : 运行arm内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-system-arm -M vexpress-a9 -smp 4 -m 1024M -kernel arch/arm/boot/zImage -append &quot;rdinit=/linuxrc console=ttyAMA0 loglevel=8&quot; -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographicyun</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;ubuntu16.04&lt;/li&gt;
&lt;li&gt;使用busybox编译最小文件系统，使用qemu运行起来。&lt;/li&gt;
&lt;li&gt;内容来自 奔跑吧linux内核第6章&lt;/li&gt;
&lt;li&gt;这里将输入代码过程集合到了几个.sh文件,不做重复的工作 !&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="qemu" scheme="http://yoursite.com/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记——看门狗内核API文档翻译</title>
    <link href="http://yoursite.com/2017/08/23/linux%E7%AC%94%E8%AE%B0%E2%80%94%E7%9C%8B%E9%97%A8%E7%8B%97%E5%86%85%E6%A0%B8API%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2017/08/23/linux笔记—看门狗内核API文档翻译/</id>
    <published>2017-08-23T09:52:16.000Z</published>
    <updated>2017-09-10T01:35:25.037Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>wdt第二弹，内核API，勉强翻译下来了，还需要进一步整理</li>
</ul>
<hr>
<h2 id="看门狗定时器驱动内核API"><a href="#看门狗定时器驱动内核API" class="headerlink" title="看门狗定时器驱动内核API"></a>看门狗定时器驱动内核API</h2><ul>
<li>最后更新时间 2013.2.12</li>
<li>Wim Van Sebroeck <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#119;&#105;&#109;&#x40;&#105;&#x67;&#117;&#x61;&#x6e;&#97;&#x2e;&#x62;&#101;">&#119;&#105;&#109;&#x40;&#105;&#x67;&#117;&#x61;&#x6e;&#97;&#x2e;&#x62;&#101;</a></li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>本文档没有描述看门狗设备或驱动。也不涉及那些在用户空间调用的API，对应在 Documentation/watchdog/watchdog-api.txt （也就是<a href="">上一篇</a>）</li>
<li>本文档描述的是，利用看门狗子系统框架方式进行看门狗驱动编写时所使用到的API。看门狗子系统框架提供了所有与用户空间交互的接口，不需要每次编写重复的代码。这意味这驱动程序只需要提供几个不同的操作函数，就可以控制WDT了。</li>
</ul>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul>
<li><p>每一个想要使用看门狗核心子系统的驱动程序都必须包含<code>#include&lt;linux/watchdog.h&gt;</code>(编写驱动程序是不得不做的工作)。<code>linux/watchdog.h</code>包含以下两个注册/卸载函数：</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">extern int watchdog_register_device(struct watchdog_device *);</div><div class="line">extern void watchdog_unregister_device(struct watchdog_device *);</div></pre></td></tr></table></figure>
</li>
<li><p>注册函数将wdt设备注册进wdt子系统，函数的参数是一个指向struct watchdog<em>device的结构体</em>。当注册成功时返回0.注册失败返回一个负值。</p>
</li>
<li>卸载函数是将wdt设备从wdt子系统卸载，函数参数是一个指向struct watchdog<em>device的结构体</em></li>
<li>看门子系统包含了注册时间调整机制（原文是 an registration deferral mechanism 一种延期机制？上下文不太对啊），允许在开机阶段，你可以按照你设定的尽可早的注册一个看门狗设备。</li>
</ul>
<h3 id="struct-watchdogdevice"><a href="#struct-watchdogdevice" class="headerlink" title="struct watchdogdevice"></a>struct watchdog<em>device</em></h3><ul>
<li>这里粘贴的是linux4.1里定义的watchdog_device，原文的watchdog_device更长但跟源码对不起来，所以这里就以内核4.1里定义的为准了😑：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> struct watchdog_device &#123;</div><div class="line">int id;</div><div class="line">struct cdev cdev;</div><div class="line">struct device *dev;</div><div class="line">struct device *parent;</div><div class="line">const struct watchdog_info *info;</div><div class="line">const struct watchdog_ops *ops;</div><div class="line">unsigned int bootstatus;</div><div class="line">unsigned int timeout;</div><div class="line">unsigned int min_timeout;</div><div class="line">unsigned int max_timeout;</div><div class="line">void *driver_data;</div><div class="line">struct mutex lock;</div><div class="line">unsigned long status;</div><div class="line">/* Bit numbers for status flags */</div><div class="line">#define WDOG_ACTIVE		0	/* Is the watchdog running/active */</div><div class="line">#define WDOG_DEV_OPEN		1	/* Opened via /dev/watchdog ? */</div><div class="line">#define WDOG_ALLOW_RELEASE	2	/* Did we receive the magic char ? */</div><div class="line">#define WDOG_NO_WAY_OUT		3	/* Is &apos;nowayout&apos; feature set ? */</div><div class="line">#define WDOG_UNREGISTERED	4	/* Has the device been unregistered */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>包含以下字段：<ul>
<li>id：由watchdog_register_device函数注册。id 0是一个特殊的，id 0 有/dev/watchdog0 cdev（动态主设备号，次设备号0） 和 /dev/watchdog miscdev。id 在调用到watchdog_register_device时自动注册。<ul>
<li><strong>NOTE</strong>看源码，wdt子系统是基于misc子系统的，注册wdt设备调用的是<code>misc_register(&amp;watchdog_miscdev);</code>而misc设备主设备号只能为10,这里结论有冲突，等待解决中。。。<ul>
<li>parent：在调用watchdog_register_device函数前，设置父设备（或者设置为null）</li>
<li>info：指向watchdog_info结构体的指针，watchdog_info提供了看门狗本身的一些附加信息（像是看门狗独有的名称之类的）</li>
<li>ops：指向watchdog_ops结构体的指针，watchdog_ops是看门狗支持操作(函数)的集合。</li>
<li>bootstatus:启动后设备状态(与看门狗WDIOF<em>* 标志位一同开启)</em></li>
<li>timeout:看门狗超时的时间(秒为单位).如果设置了WDOG<em>ACTIVE </em>启用了看门狗,在这个时间长度后,用户空间还没有发送心跳包,看门狗会将系统复位重启.</li>
<li>min<em>timeout:</em>可设置的看门狗最小超时时间</li>
<li>max<em>timeout:</em>可设置的看门狗最大超时时间</li>
<li>driver<em>data:</em>指向看门狗设备私有数据的指针,这个data只能由watchdog_set_drvdata 和 watchdog_get_drvdata routines函数访问.</li>
<li>struct mutex lock; <strong>原文档没有🙄</strong></li>
<li>status:这个字段包含了许多状态位,提供有关设备的额外信息(例如:看门狗的活动状态\限制,现在nowayout 位设置与否)(括号里翻译是否准确存疑)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="struct-watchdog-ops"><a href="#struct-watchdog-ops" class="headerlink" title="struct watchdog_ops"></a>struct watchdog_ops</h3><ul>
<li><p>watchdog<em>ops</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> struct watchdog_ops &#123;</div><div class="line">struct module *owner;</div><div class="line">/* mandatory operations */</div><div class="line">int (*start)(struct watchdog_device *);</div><div class="line">int (*stop)(struct watchdog_device *);</div><div class="line">/* optional operations */</div><div class="line">int (*ping)(struct watchdog_device *);</div><div class="line">unsigned int (*status)(struct watchdog_device *);</div><div class="line">int (*set_timeout)(struct watchdog_device *, unsigned int);</div><div class="line">unsigned int (*get_timeleft)(struct watchdog_device *);</div><div class="line">void (*ref)(struct watchdog_device *);</div><div class="line">void (*unref)(struct watchdog_device *);</div><div class="line">long (*ioctl)(struct watchdog_device *, unsigned int, unsigned long);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>你一开始定义的看门狗的module owner是非常重要的,module owner 在使用看门狗时会同时锁定看门狗设备.(这样避免了在卸载模块时/dev/watchdog依然是打开状态引起的系统崩溃)</p>
</li>
<li><p>某些函数是必须实现的,其他是可选的,必须实现的函数如下:</p>
<ul>
<li><em>start  :</em>指向看门狗设备启动函数的指针.这个函数参数为一个 struct watchdog<em>device,</em>成功返回0,失败返回负数.</li>
<li><em>stop :</em>通过这个函数关闭看门狗设备.这个函数参数为一个 struct watchdog<em>device,</em>成功返回0,失败返回负数.<ul>
<li>一些硬件看门狗设备只能启动,没有关闭选项.对应这些设备的驱动,不用实现 <em>stop  ,</em>如果驱动程序没有关闭设备功能,看门狗核心层会在设备关闭后设置 WDOG_HW_RUNNING 并调用驱动程序的 keepalive pings功能.</li>
<li>如果看门狗驱动没有实现<em>stop  </em>必须设置max_hw_heartbeat<em>ms</em></li>
</ul>
</li>
</ul>
</li>
<li><p>不是所有的硬件看门狗都有相同的功能,这就是为什么会有可选函数了,只有但这项功能被硬件看门🐶支持时,才编写对应函数.</p>
<ul>
<li>ping:这是看门狗驱动实现的喂狗函数,这个函数的参数时一个指向struct watchdog<em>device的指针</em>.函数执行成功返回0,失败返回负数.<ul>
<li>大多数的硬件不支持直接喂狗的特殊功能,一般是直接重启硬件看门狗.</li>
<li>看门狗子系统的核心层也是这样做的:但定期喂狗的操作转发到硬件看门狗时,核心层在 <em>ping 实现</em>时调用喂狗函数,但喂狗函数没有实现时,使用 start  对应函数</li>
<li>( WDIOC_KEEPALIVE对应的 ioctl命令只有在i看门狗info里的WDIOF_KEEPALIVEPING被设置为1后才会生效 )</li>
</ul>
</li>
<li>status: 这个函数用来检查看门狗设备的状态,通过看门狗的WDIOF<em>*</em>状态标志位报告.WDIOF_MAGICCLOSE and WDIOF_KEEPALIVEPING由看门狗核心层报告.没有必要在驱动程序中报告.此外如果驱动程序没有实现该函数,看门狗核心层会返回 struct watchdog<em>device</em>中的bootstatus状态位.</li>
<li>set_timeout:这个函数设置和检查 超时时间的变化,返回0表示成功,返回-EINVAL表示超出范围,返回-EIO表示无法写入看门狗.设置成功后,函数应该将设定的超时时间写入看门狗.(或许与通过接口获取的超时时间不同,因为看门狗的分辨率不一定能到1s). <ul>
<li>实现了max_hw_heartbeat_ms的驱动将硬件看门狗心跳值设置为超时时间和max_hw_heartbeat_ms之间的最小值.Those drivers set the timeout value of the watchdog_device either to the requested timeout value (if it is larger than max_hw_heartbeat_ms), or to the achieved timeout value.</li>
<li>如果看门狗驱动程序没有执行任何操作,但设置了watchdog<em>device.timeout</em>,此回掉函数忽略.</li>
<li>如果没有设置 set_timeout,但设置了WDIOF_SETTIMEOUT,看门狗架构会将 watchdog_device中timeout值更新为请求的值.</li>
<li>如果使用了pretimeout feature (WDIOF_PRETIMEOUT),那么set_timeout 必须同时检查 pretimeout 是否有效 ,设置相应定时器. 这些操作在核心层没有races无法完成,所以必须在驱动中完成.</li>
</ul>
</li>
<li>set<em>pretimeout</em>:这个函数支持检查/改变看门狗中pretimeout值(pretimeout详情见wdt用户层api翻译).这个函数是可选支持的,因为不是所有的看门狗都支持这个功能.pretimeout 不是绝对时间,其数值是在超时时间之前几秒发生.<ul>
<li>返回0表示执行成功,返回-EINVAL,表示超出范围,返回-EIO表示未能成功向看门狗写入.</li>
<li>设置pretimeou为0值,代表禁用pretimeout功能.(WDIOF<em>PRETIMEOUT</em>需要在看门狗的info 结构体中设置)</li>
<li>如果驱动没有实现任何功能,但设定了 watchdog<em>device.pretimeout</em>,此回掉函数忽略.这意味这,如果没有提供set<em>pretimeout</em>函数,但设定了WDIOF<em>PRETIMEOUT</em>,看门狗架构会将pretimeout的值更新为请求值.</li>
</ul>
</li>
<li>get<em>timeleft:</em>这个函数返回复位前剩余时间.</li>
<li>restart:此函数重启看门狗硬件,返回0表示成功,失败返回对应错误码.</li>
<li>ioctl:如果这个函数存在,在系统进行内部ioctl命令处理前,会首先调用此函数.如果不支持ioctrl命令,应该返回 -ENOIOCTLCMD .这个函数的参数为(watchdog<em>device, cmd and arg)</em></li>
<li>ref和unref 已经不再被支持.</li>
</ul>
</li>
<li><p>The status bits should (preferably) be set with the set_bit and clear_bit alike bit-operations. The status bits that are defined are:</p>
<ul>
<li>WDOG<em>ACTIVE:</em>这个状态位标识着从用户空间看一个看门狗设备是否被激活,如果被激活,用户空间需要执行喂狗动作</li>
<li>WDOG_NO_WAY<em>OUT:</em>这个状态位标识这nowayout的设置,如果被激活,那看门狗启动后,无法被停止.</li>
<li>WDOG_HW_RUNNING:如果硬件看门狗运行,此状态位被置1.<ul>
<li>当硬件看门狗不能被停止时,这个状态位必须被置1.</li>
<li>如果系统启动后自动启动看门狗,在看门狗打开前,必须设置此状态位.</li>
<li>当此状态位被置1,即使WDOG<em>ACTIVE为0</em>.看门狗架构也会执行喂狗动作.</li>
<li>(当你直接注册设置了 WDOG_HW_RUNNING位的看门狗设备时,执行open /dev/watchdog动作,系统会直接跳过启动操作,直接执行喂狗操作 )</li>
</ul>
</li>
</ul>
<ul>
<li><p>要设置WDOG_NO_WAY<em>OUT</em>状态位(在注册看门狗设备前)你可以:</p>
<ul>
<li><p>在watchdog<em>device</em>的结构体中设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.status = WATCHDOG_NOWAYOUT_INIT_STATUS,</div></pre></td></tr></table></figure>
<p>这样等同于将WDOG_NO_WAY<em>OUT</em>值设置为CONFIG_WATCHDOG_NOWAYOUT</p>
</li>
<li>使用下面的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static inline void watchdog_set_nowayout(struct watchdog_device *wdd, int nowayout)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>(note:)   wdt驱动程序核心支持magic close和 nowayout功能.要使用magic close,需要在看门狗的 info中设置WDIOF<em>MAGICCLOSE </em>位.开启 nowayout 会覆盖magic close.</p>
</li>
<li><p>获取或设定驱动程序特殊数据,应该使用以下两个函数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">static inline void watchdog_set_drvdata(struct watchdog_device *wdd, void *data)</div><div class="line">static inline void *watchdog_get_drvdata(struct watchdog_device *wdd)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>watchdog_set_drvdata函数允许你添加向驱动程序添加特殊数据,此函数的参数为指向看门狗设备的指针,和指向需要添加数据的指针.</li>
<li>watchdog_get_drvdata函数运行你读取驱动程序中的特殊数据,此函数的参数为指向你想读取的看门狗设备的指针.</li>
</ul>
<ul>
<li><p>初始化 timeout ,会用到下面的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  extern int watchdog_init_timeout(struct watchdog_device *wdd,unsigned int timeout_parm, struct device *dev);</div><div class="line">  ``` </div><div class="line">  </div><div class="line">  * watchdog_init_timeout允许使用模块的 timeout 字段初始化 timeout ,当模块的 timeout 字段无效时,设备树中的timeout-sec也可.最好的做法是将watchdog_device_中timeout的值,设置为初始默认值,然后使用到函数的用户可以分别设置自定义值.</div><div class="line"></div><div class="line">* 重启后禁用看门狗,需要使用以下函数:</div></pre></td></tr></table></figure>
<p>static inline void watchdog_stop_on_reboot(struct watchdog_device *wdd);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 卸载看门狗设备时禁用看门狗,必须调用此函数,如果 nowayout 没有设置,这个函数只会停止看门狗.</div></pre></td></tr></table></figure>
<p>static inline void watchdog_stop_on_unregister(struct watchdog_device *wdd);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">* 更改重启处理程序的优先级,(猜测是不同看门狗的优先级)调用下面的函数:</div></pre></td></tr></table></figure>
<p>oid watchdog_set_restart_priority(struct watchdog_device *wdd, int priority);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  * 设定优先级时,用户需要遵循以下规则</div><div class="line">    * 0:优先级最低,非常有限的重启能力</div><div class="line">    * 128:重启处理的默认选择,如果没有其他的重启处理程序可用,或者没有重启整个系统的重启处理程序可用.</div><div class="line">    * 255:最高优先级,会覆盖其他所有重启处理程序</div><div class="line"></div><div class="line">* 使用pretimeout 通知功能,需要利用以下函数:</div></pre></td></tr></table></figure>
<p>void watchdog_notify_pretimeout(struct watchdog_device *wdd)<br>```</p>
<ul>
<li>这个函数可以在中断上下文中调用,如果启用了watchdog pretimeout governor 框架(kbuild CONFIG_WATCHDOG_PRETIMEOUT_GOV),就会采用进入驱动程序分配好的处理程序,如果没有启用watchdog pretimeout governor 框架,watchdog_notify_pretimeout()会将信息输出到内核日志缓存.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;wdt第二弹，内核API，勉强翻译下来了，还需要进一步整理&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;看门狗定时器驱动内核API&quot;&gt;&lt;a href=&quot;#看门狗定时器驱动内核API&quot; class=&quot;headerlink&quot; title=&quot;看门狗定时器驱动内核A
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="wdt" scheme="http://yoursite.com/tags/wdt/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记—看门狗API文档翻译</title>
    <link href="http://yoursite.com/2017/08/22/linux%E7%AC%94%E8%AE%B0%E2%80%94%E7%9C%8B%E9%97%A8%E7%8B%97API%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2017/08/22/linux笔记—看门狗API文档翻译/</id>
    <published>2017-08-22T09:52:16.000Z</published>
    <updated>2017-09-10T01:35:42.263Z</updated>
    
    <content type="html"><![CDATA[<hr>
<ul>
<li>随手翻译的文档，要看懂linux内核，内核附带的文档自然是逃不过😂，全英文配合Google翻译也得上。。。。</li>
</ul>
<hr>
<ul>
<li><p>最后更新时间 10/05/2007</p>
</li>
<li><p>linux看门狗设备API</p>
</li>
<li>Copyright 2002 Christer Weingel <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x77;&#105;&#x6e;&#103;&#x65;&#x6c;&#64;&#110;&#x61;&#x6e;&#x6f;&#x2d;&#x73;&#x79;&#115;&#116;&#x65;&#109;&#46;&#x63;&#111;&#109;">&#x77;&#105;&#x6e;&#103;&#x65;&#x6c;&#64;&#110;&#x61;&#x6e;&#x6f;&#x2d;&#x73;&#x79;&#115;&#116;&#x65;&#109;&#46;&#x63;&#111;&#109;</a></li>
<li><p>本文档的一些内容来自 sbc60xxwdt ，版权属于 Copyright 2000 Jakob Oestergaard <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#106;&#97;&#107;&#x6f;&#98;&#64;&#111;&#115;&#116;&#101;&#110;&#102;&#x65;&#108;&#100;&#x2e;&#100;&#x6b;">&#106;&#97;&#107;&#x6f;&#98;&#64;&#111;&#115;&#116;&#101;&#110;&#102;&#x65;&#108;&#100;&#x2e;&#100;&#x6b;</a></p>
</li>
<li><p>本文档基于linux内核 2.4.18</p>
</li>
</ul>
<hr>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>你应该已经知道了，看门狗定时器（WDT）是一个硬件复位电路，在系统软件出现故障时复位系统。</li>
<li>通常，用户空间的定期喂狗程序通过/dev/watchdog的设备文件通知内核看门狗驱动程序。驱动收到通知，会告知硬件看门狗一切正常，硬件看门狗需要等一会再复位系统。如果用户空间通知失败（RAM错误、内核漏洞等等），通知将停止。超时后，硬件看门狗将复位系统（重启）。</li>
<li>linux看门狗的API是相当特殊的结构，不同的驱动程序对API的执行各不相同，有时会碰到不兼容的情况。本文档参数记录现有的情况，以供未来的驱动开发参考。<h3 id="最简单的API"><a href="#最简单的API" class="headerlink" title="最简单的API"></a>最简单的API</h3></li>
<li>所有驱动都支持的基本操作模式。/dev/watchdog被打开后，看门狗被激活并复位系统，除非在一小段时间内被ping通？（喂狗），这段时间被称为超时时间或间断时间。简单的喂狗的方式是向驱动程序写入一些数据，一个非常简单的实例在<code>see samples/watchdog/watchdog-simple.c</code>下.</li>
<li>更高级的驱动程序可以做到例如检查一个http服务器，在执行喂狗操作之前，做出回应。</li>
<li>/dev/下设备节点被关闭后，看门狗也同时被禁用，除非支持“Magic Close”（见下文），这并不是个好办法。因为如果看看门狗demo有bug导致系统崩溃，但系统不会重启。因为这样一些驱动支持”Disable watchdog shutdown on close”, CONFIG_WATCHDOG_NOWAYOUT”这样的配置选项。一旦编译内核时候启用这些选项，一旦看门狗程序激活，就不可能禁用看门狗。如果看门狗demo崩溃，系统会在超时后自动重启。看门狗驱动通常也支持nowayout module parameter，以便在运行时控制nowayout module。</li>
</ul>
<h3 id="Magic-Close-feature"><a href="#Magic-Close-feature" class="headerlink" title="Magic Close feature"></a>Magic Close feature</h3><ul>
<li>如果驱动程序支持<code>Magic Close</code>,那么设备将不支持禁用看门狗，除非在关闭设备文件前，向/dev/watchdog下设备文件写入特定的magic 字符 ‘V’。如果用户空间的 daemon关闭了看门的设备文件，但是没有发送那个特定的字符，驱动会认为daemon进程已经被杀，并且停止了定期喂狗行为。这样会导致超时后系统重启。<h3 id="ioctl-API"><a href="#ioctl-API" class="headerlink" title="ioctl API"></a>ioctl API</h3></li>
<li>所有的驱动程序都支持ioctl API</li>
<li><strong>喂狗操作使用ioctl完成</strong></li>
<li>所有的驱动都要支持一个KEEPALIVE的ioctl命令，这个命令可以起到向驱动写入数据一样的作用。所以watchdog daemon的主函数循环可以这样实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> while (1) &#123;</div><div class="line">	ioctl(fd, WDIOC_KEEPALIVE, 0);</div><div class="line">	sleep(10);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Setting-and-getting-the-timeout"><a href="#Setting-and-getting-the-timeout" class="headerlink" title="Setting and getting the timeout"></a>Setting and getting the timeout</h3><ul>
<li>某些驱动支持运行时通过SETTIMEOUT ioctl命令修改超时时间，这些驱动都有WDIOF<em>SETTIMEOUT的标志位</em>。超时时间是一个单位为秒的整数，驱动程序会返回这个变量实际设置的数值，但是由于硬件限制，返回的数值可能与设置数值不同。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int timeout = 45;</div><div class="line">ioctl(fd, WDIOC_SETTIMEOUT, &amp;timeout);</div><div class="line">printf(&quot;The timeout was set to %d seconds\n&quot;, timeout);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>这个实例或许会输出”The timeout was set to 60 seconds”，如果设备超时时间为分钟。</p>
</li>
<li><p>自从2.4.18内核开始，可以使用GETTIMEOUT ioctl命令，获取超时时间。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ioctl(fd, WDIOC_GETTIMEOUT, &amp;timeout);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"The timeout was is %d seconds\n"</span>, timeout);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Pretimeouts"><a href="#Pretimeouts" class="headerlink" title="Pretimeouts"></a>Pretimeouts</h3><ul>
<li><p>一些看门狗定时器可以在系统重启前一段时间设置一个触发器。这样运行linux在系统从前记录一些重要的信息（像panic信息和kernel coredumps），具体可以通过NMT、中断等机制实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pretimeout = 10;</div><div class="line">ioctl(fd, WDIOC_SETPRETIMEOUT, &amp;pretimeout);</div></pre></td></tr></table></figure>
</li>
<li><p>请注意，pretimeout 时间是在 超时关闭系统 之前的秒数。不是直到发生pretimeout 事件的秒数。例如设定的超时时间是60s， pretimeout是10s。pretimeout事件会在50s时发生。pretimeout设置为0代表禁用pretimeout。</p>
</li>
<li><p>同样存在一个获取pretimeout的ioctl命令。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ioctl(fd, WDIOC_GETPRETIMEOUT, &amp;timeout);</div><div class="line">printf(&quot;The pretimeout was is %d seconds\n&quot;, timeout);</div></pre></td></tr></table></figure>
</li>
<li><p>不是所有看门狗驱动都支持 pretimeout</p>
</li>
</ul>
<h3 id="获取重启前秒数"><a href="#获取重启前秒数" class="headerlink" title="获取重启前秒数"></a>获取重启前秒数</h3><ul>
<li>一些看门狗驱动支持获取系统重启前秒数。通过WDIOC<em>GETTIMELEFT  ioctl  </em>命令可以返回系统重启前秒数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ioctl(fd, WDIOC_GETTIMELEFT, &amp;timeleft);</div><div class="line">printf(&quot;The timeout was is %d seconds\n&quot;, timeleft);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="环境监测"><a href="#环境监测" class="headerlink" title="环境监测"></a>环境监测</h3><ul>
<li><p>所有的看门狗驱动都被要求返回更多关于系统最后一次重启的信息，像是温度、风扇转速、电源等。GETSUPPORT ioctl 的命令可以返回 设备可以支持的信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">struct watchdog_info ident;</div><div class="line">ioctl(fd, WDIOC_GETSUPPORT, &amp;ident);</div></pre></td></tr></table></figure>
</li>
<li><p>返回的结构ident中的字段如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   identity		描述watchdog driver的字符串</div><div class="line">firmware_version	the firmware version of the card if available</div><div class="line">options			设备支持情况的标志位</div></pre></td></tr></table></figure>
</li>
<li><p>options描述了GET_STATUS 和GET_BOOT<em>STATUS ioctl命令</em>可以返回那些信息。并且可以设置。（）<strong>??无法理解什么意思??</strong></p>
</li>
</ul>
<ul>
<li>WDIOF<em>OVERHEAT     cpu过热复位</em><br>系统重启因为，超过了温度限制上限。</li>
<li><p>WDIOF<em>FANFAULT        风扇失效复位</em></p>
</li>
<li><p>WDIOF<em>EXTERN1        External relay 1 </em><br>外部监控电源1被触发，？？？Controllers intended for real world applications include external monitoring pins that will trigger a reset.？？（不明白什么意思）</p>
</li>
<li><p>WDIOF_EXTERN2        External relay 2<br>外部监控电源2被触发</p>
</li>
<li><p>WDIOF_POWERUNDER    电源坏了，电源带不动了<br>机器显示欠压。</p>
</li>
</ul>
<hr>
<ul>
<li>后面一点不翻了，有时间再添坑</li>
</ul>
<hr>
<ul>
<li><p>WDIOF_CARDRESET        Card previously reset the CPU<br>The last reboot was caused by the watchdog card</p>
</li>
<li><p>WDIOF_POWEROVER        Power over voltage<br>The machine is showing an overvoltage status. Note that if one level is under and one over both bits will be set - this may seem odd but makes sense.</p>
</li>
<li><p>WDIOF_KEEPALIVEPING    Keep alive ping reply<br>The watchdog saw a keepalive ping since it was last queried.</p>
</li>
<li><p>WDIOF_SETTIMEOUT    Can set/get the timeout<br>The watchdog can do pretimeouts.</p>
</li>
<li><p>WDIOF_PRETIMEOUT    Pretimeout (in seconds), get/set<br>For those drivers that return any bits set in the option field, the GETSTATUS and GETBOOTSTATUS ioctls can be used to ask for the current status, and the status at the last reboot, respectively.  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int flags;</div><div class="line">ioctl(fd, WDIOC_GETSTATUS, &amp;flags);</div></pre></td></tr></table></figure>
<p>  or</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ioctl(fd, WDIOC_GETBOOTSTATUS, &amp;flags);</div></pre></td></tr></table></figure>
</li>
<li><p>Note that not all devices support these two calls, and some only support the GETBOOTSTATUS call.</p>
</li>
<li><p>Some drivers can measure the temperature using the GETTEMP ioctl.  The returned value is the temperature in degrees fahrenheit.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int temperature;</div><div class="line">ioctl(fd, WDIOC_GETTEMP, &amp;temperature);</div></pre></td></tr></table></figure>
</li>
<li><p>Finally the SETOPTIONS ioctl can be used to control some aspects of the cards operation.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int options = 0;</div><div class="line">ioctl(fd, WDIOC_SETOPTIONS, &amp;options);</div></pre></td></tr></table></figure>
</li>
<li><p>The following options are available:</p>
<ul>
<li>WDIOS_DISABLECARD    Turn off the watchdog timer</li>
<li>WDIOS_ENABLECARD    Turn on the watchdog timer</li>
<li>WDIOS_TEMPPANIC        Kernel panic on temperature trip</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;随手翻译的文档，要看懂linux内核，内核附带的文档自然是逃不过😂，全英文配合Google翻译也得上。。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最后更新时间 10/05/2007&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linux看门
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="wdt" scheme="http://yoursite.com/tags/wdt/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记—rtc子系统</title>
    <link href="http://yoursite.com/2017/08/19/linux%E7%AC%94%E8%AE%B0%E2%80%94rtc%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2017/08/19/linux笔记—rtc子系统/</id>
    <published>2017-08-19T02:17:11.000Z</published>
    <updated>2017-09-10T01:51:07.106Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>正式开始让人崩溃的linux系列，希望自己能写完。<br>先拿rtc开刀。</li>
<li><p>这里我尽可能记录下思维的细节，而不是仅局限于代码，希望自己能领会Linux内核开发者的想法。</p>
</li>
<li><p>内核版本：linux4.1</p>
</li>
<li>需要了解：简略了解字符驱动 和 Linux设备驱动模型</li>
</ul>
<hr>
<h3 id="RTC"><a href="#RTC" class="headerlink" title="RTC"></a>RTC</h3><ul>
<li>rtc即real time clock，实时时钟。</li>
<li>rtc一般负责系统关机后计时，面对繁多的Linux RTC设备，内核干脆提供了一个rtc子系统，来支持所有的rtc设备。</li>
<li>参考资料 </li>
</ul>
<h3 id="rtc子系统"><a href="#rtc子系统" class="headerlink" title="rtc子系统"></a>rtc子系统</h3><ul>
<li>rtc设备本质上是一个字符设备，rtc子系统在字符设备的基础上抽象与硬件无关的部分，并在这个基础上拓展sysfs和proc文件系统下的访问。</li>
<li>分析时候始终记住两点：<ul>
<li>rtc子系统是为了让rtc设备驱动编写更为简单，与硬件无关部分已被抽离。</li>
<li>rtc子系统是基于字符设备而来的。<h3 id="文件框架"><a href="#文件框架" class="headerlink" title="文件框架"></a>文件框架</h3></li>
</ul>
</li>
<li><p>rtc子系统的源码在 /drivers/rtc<br><img src="https://my.mixtape.moe/anynhb.jpg" alt="1.jpg"><br>删减了很多rtc-xxx.c的驱动，只留下了ds1307作为示例，这里看到实际上代码并不多。</p>
</li>
<li><p>具体文件分析</p>
<ul>
<li><p>rtc.h：定义与RTC有关的数据结构。</p>
</li>
<li><p>class.c：向内核注册RTC类，为底层驱动提供rtc_device_register与rtc_device_unregister接口用于RTC设备的注册/注销。初始化RTC设备结构、sysfs、proc。</p>
</li>
<li>Interface.c：提供用户程序与RTC的接口函数，其中包括ioctl命令。</li>
<li>rtc-dev.c：将RTC设备抽象为通用的字符设备，提供文件操作函数集。</li>
<li>rtc-sysfs.c：管理RTC设备的sysfs属性，获取RTC设备名、日期、时间等。</li>
<li>rtc-proc.c：管理RTC设备的procfs属性，提供中断状态和标志查询。</li>
<li>rtc-lib.c：提供RTC、Data和Time之间的转换函数。</li>
<li>rtc-xxx,c：RTC设备的实际驱动，此处以rtc-ds1307为例。</li>
<li>hctosys.c：开机时获取RTC时间。</li>
</ul>
</li>
<li><p>整个文件系统框架<br><img src="https://my.mixtape.moe/fdixml.jpg" alt=""></p>
</li>
<li><p>RTC子系统具体可分为3层：</p>
<ul>
<li>用户层：RTC子系统向上层提供了接口，用户通过虚拟文件系统，间接调用RTC设备，具体有3种方式。<ul>
<li>/dev/rtc  RTC设备抽象而来的字符设备，常规文件操作集合。</li>
<li>/sys/class/rtc/rtcx 通过sysfs文件系统进行RTC操作，也是最常用的方式。</li>
<li>/proc/driver/rtc  通过proc文件系统获取RTC相关信息。</li>
</ul>
</li>
<li>RTC核心层：与硬件无关，用于管理RTC设备注册/注销、提供上层文件操作的接口等。</li>
<li>RTC驱动：特定RTC设备的驱动程序，实现RTC核心层的回掉函数。编写RTC驱动需要按照RTC子系统的接口填写对应函数并建立映射即可。RTC核心层函数实现的过程和数量与特定硬件紧密相关。</li>
</ul>
</li>
</ul>
<ul>
<li>初看linux系统的人来说，这个图够头晕的了，但是呢，实际上没那么麻烦。由浅入深，一点一点来分析。</li>
</ul>
<h3 id="rtc子系统分析"><a href="#rtc子系统分析" class="headerlink" title="rtc子系统分析"></a>rtc子系统分析</h3><h4 id="rtc-dev"><a href="#rtc-dev" class="headerlink" title="rtc-dev"></a>rtc-dev</h4><ul>
<li>rtc子系统基于字符设备，字符设备对应的肯定是rtc-dev.c了，我们的分析由rtc-dev起步。</li>
<li><p>rtc-dev.c<br><img src="https://my.mixtape.moe/ukpdro.jpg" alt=""></p>
</li>
<li><p>典型的字符设备，模块的初始化/卸载自然是 rtc_dev_init(void) 和  rtc_dev_exit(void)。<br>设备接入，添加/删除设备 rtc_dev_add_device(struct rtc_device <em>rtc) 和  e)    void rtc_dev_del_device(struct rtc_device </em>rtc)<br>还有ioctl和open等函数，熟悉字符设备驱动的不用多说。</p>
</li>
<li><p>追踪一下这两组函数在哪里调用的。</p>
<ul>
<li>rtc_dev_init(void)对应在 class.c的rtc_init(void)函数</li>
<li>rtc_dev_add_device对应在class.c的 rtc_device_register()函数。</li>
</ul>
</li>
<li><p>rtc_dev_init(void)对应实在系统初始化时使用，对应rtc_init(void)也是在系统初始化之后调用。</p>
</li>
<li>rtc_dev_add_device()是在驱动匹配后调用，rtc_device_register()也是在驱动匹配后调用。打开rtc-ds1307.c&gt;-prob函数，能找到rtc_device_register()也就证实了这个思路。</li>
<li>接下来转入class.c</li>
</ul>
<h4 id="class-c"><a href="#class-c" class="headerlink" title="class.c"></a>class.c</h4><ul>
<li><p>linux驱动模型中class.c对应类的意思，是rtc类。<br>每个class对应都有自己核心数据结果，对应rtc类就是rtc-device</p>
</li>
<li><p>rtc_device<br> rtc_device代表 RTC设备基础的数据结构</p>
<ul>
<li>数据结构<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">rtc_device</span>  &#123;</span>  </div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">device</span> <span class="title">dev</span>;</span>  </div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span>  </div><div class="line">   <span class="keyword">int</span> id;                                   <span class="comment">//RTC设备的次设备号  </span></div><div class="line">   <span class="keyword">char</span> name[RTC_DEVICE_NAME_SIZE];  </div><div class="line">   <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">rtc_class_ops</span> *<span class="title">ops</span>;</span>  </div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">ops_lock</span>;</span>  </div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">char_dev</span>;</span>  </div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;  </div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">long</span> irq_data;  </div><div class="line">   <span class="keyword">spinlock_t</span> irq_lock;  </div><div class="line">   <span class="keyword">wait_queue_head_t</span> irq_queue;  </div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">async_queue</span>;</span>  </div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">rtc_task</span> *<span class="title">irq_task</span>;</span>  </div><div class="line">   <span class="keyword">spinlock_t</span> irq_task_lock;  </div><div class="line">   <span class="keyword">int</span> irq_freq;  </div><div class="line">   <span class="keyword">int</span> max_user_freq;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_RTC_INTF_DEV_UIE_EMUL  </span></div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">uie_task</span>;</span>  </div><div class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">timer_list</span> <span class="title">uie_timer</span>;</span>  </div><div class="line">   <span class="comment">/* Those fields are protected by rtc-&gt;irq_lock */</span>  </div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> oldsecs;  </div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> uie_irq_active:<span class="number">1</span>;  </div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> stop_uie_polling:<span class="number">1</span>;  </div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> uie_task_active:<span class="number">1</span>;  </div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> uie_timer_active:<span class="number">1</span>;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>很长？很😵对不对？只要关注一点就行_</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int id;                                              //代表是那个rtc设备  </div><div class="line">char name[RTC_DEVICE_NAME_SIZE];                     //代表rtc设备的名称  </div><div class="line">const struct rtc_class_ops *ops;                     //rtc操作函数集，需要驱动实现  </div><div class="line">struct mutex ops_lock;                               //操作函数集的互斥锁  </div><div class="line">  </div><div class="line">struct cdev char_dev;                                //代表rtc字符设备，因为rtc就是个字符设备  </div><div class="line">unsigned long flags;                                 //rtc的状态标志，例如RTC_DEV_BUSY</div></pre></td></tr></table></figure>
</li>
<li><p>上文书说到，驱动程序的prob函数里面调用了rtc_device_register()这货的类型就是rtc_device。参加驱动程序怎样调用rtc_device<em>register(),</em>与其他核心的基本结构不同的是，驱动程序以不是以rtc-device为参数注册设备到子系统，而是注册函数会返回一个rtc<em>deivce的结构给驱动。</em></p>
</li>
</ul>
</li>
<li><p>rtc_class_ops<br>  这个是rtc<em>device的一部分。</em></p>
<ul>
<li><p>数据结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   struct rtc_class_ops &#123;  </div><div class="line">   int (*open)(struct device *);     //打开设备时的回调函数，这个函数应该初始化硬件并申请资源  </div><div class="line">   void (*release)(struct device *); //这个函数是设备关闭时被调用的，应该注销申请的资源  </div><div class="line">   int (*ioctl)(struct device *, unsigned int, unsigned long); //ioctl函数，对想让RTC自己实现的命令应返回ENOIOCTLCMD  </div><div class="line">   int (*read_time)(struct device *, struct rtc_time *);       //读取时间  </div><div class="line">   int (*set_time)(struct device *, struct rtc_time *);        //设置时间  </div><div class="line">   int (*read_alarm)(struct device *, struct rtc_wkalrm *);    //读取下一次定时中断的时间  </div><div class="line">   int (*set_alarm)(struct device *, struct rtc_wkalrm *);     //设置下一次定时中断的时间  </div><div class="line">   int (*proc)(struct device *, struct seq_file *);            //procfs接口  </div><div class="line">   int (*set_mmss)(struct device *, unsigned long secs);       //将传入的参数secs转换为struct rtc_time然后调用set_time函数。程序员可以不实现这个函数，但  前提是定义好了read_time/set_time，因为RTC框架需要用这两个函数来实现这个功能。  </div><div class="line">   int (*irq_set_state)(struct device *, int enabled);         //周期采样中断的开关，根据enabled的值来设置  </div><div class="line">   int (*irq_set_freq)(struct device *, int freq);             //设置周期中断的频率  </div><div class="line">   int (*read_callback)(struct device *, int data);            ///用户空间获得数据后会传入读取的数据，并用这个函数返回的数据更新数据。  </div><div class="line">   int (*alarm_irq_enable)(struct device *, unsigned int enabled);  //alarm中断使能开关，根据enabled的值来设置  </div><div class="line">   int (*update_irq_enable)(struct device *, unsigned int enabled); //更新中断使能开关，根据enabled的值来设置  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>该结构体中函数大多数都是和rtc芯片的操作有关，需要驱动程序实现。<br>所有RTC驱动都必须实现read_time、set_time函数，其他函数可选。</p>
</li>
</ul>
</li>
<li><p>参考其他的资料，class的分析如下<br><img src="https://my.mixtape.moe/xrsnkw.jpg" alt=""></p>
</li>
<li><p>static int __init rtc_init(void)</p>
<ul>
<li>调用class_create创建RTC类，创建/sys/class/rtc目录，初始化RTC类相关成员，向用户空间提供设备信息。</li>
<li>调用rtc-dev.c实现的rtc_dev_init();动态分配RTC字符设备的设备号。</li>
<li>调用rtc_sysfs_init(rtc<em>class)；创建/sys/class/rtc下属性文件</em></li>
</ul>
</li>
<li><p>static void __exit rtc<em>exit(void)</em></p>
<ul>
<li>调用rtc-dev.c实现的rtc_dev_exit()；注销设备号。</li>
<li>调用class_destroy(rtc_class)；注销/sys/class下的rtc目录</li>
</ul>
</li>
</ul>
<ul>
<li>struct rtc_device <em>rtc_device_register(const char </em>name, struct device <em>dev,const struct rtc_class_ops </em>ops,struct module *owner）_<ul>
<li>申请一个idr整数ID管理机制结构体，并且初始化相关成员</li>
<li>将设备dev关联sysfs下的rtc类</li>
<li>初始化rtc结构体的信号量</li>
<li>初始化rtc结构体中的中断</li>
<li>设置rtc的名字</li>
<li>初始化rtc字符设备的设备号，然后注册rtc设备,自动创建/dev/rtc(n)设备节点文件</li>
<li>注册字符设备</li>
<li>在/sys/rtc/目录下创建一个闹钟属性文件</li>
<li>创建/proc/driver/rtc目录</li>
</ul>
</li>
<li>void rtc_device_unregister(struct rtc_device *rtc)<ul>
<li>删除sysfs中的rtc设备,即删除/sys/class/rtc目录</li>
<li>删除dev下的/dev/rtc(n)设备节点文件</li>
<li>删除虚拟文件系统接口,即删除/proc/driver/rtc目录</li>
<li>卸载字符设备</li>
<li>清空rtc的操作函数指针rtc-&gt;ops</li>
<li>释放rtc的device结构体_</li>
</ul>
</li>
<li>static void rtc_device_release(struct device <em>dev)    </em><ul>
<li>卸载idr数字管理机制结构体</li>
<li>释放rtc结构体的内存</li>
</ul>
</li>
</ul>
<h4 id="Rtc子系统初始化"><a href="#Rtc子系统初始化" class="headerlink" title="Rtc子系统初始化"></a>Rtc子系统初始化</h4><ul>
<li>上图<br><img src="https://my.mixtape.moe/driyxr.jpg" alt=""></li>
</ul>
<ul>
<li>使用rtc子系统首先需要在内核编译选项中启用RTC子系统支持。<ul>
<li>必须启用Real Time Clock</li>
<li>使用/dev下的设备文件对应开启CONFIG_RTC_INTF_DEV</li>
<li>使用/proc下的接口对应开启CONFIG_RTC_INTF_PROC</li>
<li>使用/sysfs下的接口对应开启CONFIG_RTC_INTF_SYSFS</li>
</ul>
</li>
<li>_系统启动后，如配置启用rtc子系统，则会首先执行rtc<em>init</em>函数，创建rtc类、初始化相关成员、分配设备号等</li>
<li>创建rtc类后，之后调用rtc_dev_init()动态分配rtc字符设备的设备号。之后调用rtc_sysfs_init()初始化/sys/class/rtc目录中的属性文件</li>
</ul>
<h4 id="Rtc设备注册"><a href="#Rtc设备注册" class="headerlink" title="Rtc设备注册"></a>Rtc设备注册</h4><ul>
<li>Rtc设备本质上属于字符设备，依附于系统内总线。一般来说cpu内部rtc依附于platform总线，外置rtc芯片则依附于通信方式对应总线。其过程与通用字符设备相似，rtc子系统在设备注册过程中附加了prob和sysfs相关的注册和初始化操作。</li>
<li><p>上图<br><img src="https://my.mixtape.moe/urumgu.jpg" alt=""></p>
<ul>
<li>Rtc设备挂载后，相应总线会搜索匹配的驱动程序，驱动程序成功match后，进入驱动实现的probe函数，执行设备注册等操作。</li>
</ul>
</li>
<li>完成总线设备注册后，probe会跳转到rtc_device_register()函数，将设备注册到rtc子系统。</li>
<li>Rtc设备本质属于字符设备，会调用rtc_dev_prepare()函数，初始化字符设备，设置rtc相关的file operation函数集合。</li>
<li>之后依次调用rtc_dev_add_device(rtc)、rtc_sysfs_add_device(rtc)、rtc_proc_add_device(rtc) ，进行注册字符设备、在/sys/rtc/目录下创建一个闹钟属性文件、创建/proc/driver/rtc目录等操作。</li>
<li>rtc_device_register()会将驱动实现的rtc_class_ops结构体与具体设备联系起来。</li>
</ul>
<h4 id="interface-c"><a href="#interface-c" class="headerlink" title="interface.c"></a>interface.c</h4><ul>
<li>在rtc-proc.c、rtc_sysfs和ioctl命令中，所有的操作调用的都是interface.c提供的接口，这里以ioctl的一个例子说明整个调用的过程</li>
<li><p>上图<br><img src="https://my.mixtape.moe/bvtlqf.jpg" alt=""></p>
</li>
<li><p>以icotl命令RTC_RD_TIME为例，说明命令调用的流程。</p>
<ul>
<li>RTC_RD_TIME对应的是/dev下ioctl命令，调用被转发至/rtc-dev.c</li>
<li>rtc-dev.c-&gt;rtc_dev_ioctl(struct file *file,unsigned int cmd, unsigned long arg)函数中。RTC_RD_TIME对应的代码为err = rtc_read_time(rtc, &amp;tm); rtc_read_time是interface.c文件提供的接口之一。</li>
<li>interface.c-&gt;rtc_read_time(struct rtc_device <em>rtc, struct rtc_time </em>tm)函数中对应rtc_class_ops转发代码为err = rtc-&gt;ops-&gt;read_time(rtc-&gt;dev.parent, tm);将操作转发至匹配的rtc设备。</li>
<li><p>设备驱动这里以rtc-ds1307为例，但设备注册时通过mcp794xx_rtc_ops结构体将rtc_class_ops对应函数与驱动程序实现的函数绑定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">static const struct rtc_class_ops mcp794xx_rtc_ops = &#123;</div><div class="line">.read_time  = ds1307_get_time,</div><div class="line">.set_time   = ds1307_set_time,</div><div class="line">.read_alarm = mcp794xx_read_alarm,</div><div class="line">.set_alarm  = mcp794xx_set_alarm,</div><div class="line">.alarm_irq_enable = mcp794xx_alarm_irq_enable,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>最终执行转入ds1307.c-&gt; ds1307_get_time函数，执行与硬件相关的操作。</p>
<h4 id="rtc-sysfs-c"><a href="#rtc-sysfs-c" class="headerlink" title="rtc-sysfs.c"></a>rtc-sysfs.c</h4></li>
</ul>
</li>
<li><p>由前半部分可知，/sys/class/rtc/是在rtc-init调用rtc_sysfs_init后生成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void __init rtc_sysfs_init(struct class *rtc_class) &#123;</div><div class="line">	rtc_class-&gt;dev_groups = rtc_groups;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>这里的rtc_groups是rtc-sysfs.c中定义了这样一个attribute函数指针数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">static struct attribute *rtc_attrs[] = &#123;</div><div class="line">&amp;dev_attr_name.attr,</div><div class="line">&amp;dev_attr_date.attr,</div><div class="line">&amp;dev_attr_time.attr,</div><div class="line">&amp;dev_attr_since_epoch.attr,</div><div class="line">&amp;dev_attr_max_user_freq.attr,</div><div class="line">&amp;dev_attr_hctosys.attr,</div><div class="line">NULL,</div><div class="line">&#125;;</div><div class="line">ATTRIBUTE_GROUPS(rtc);</div></pre></td></tr></table></figure>
</li>
<li><p>_在rtc_sysfs_init函数调用后绑定了sysfs节点操作函数的集合，使得设备匹配驱动程序后而生成对应的rtcn文件夹。</p>
</li>
<li><code>dev_attr_name和dev_attr_data</code>由宏<code>DEVICE_ATTR_RO</code>和DEVICE_ATTR_RW生成，他们分别定义了只读的和可读可写的attribute节点。每个属性函数下都有DEVICE_ATTR_XX()宏声明，绑定到对应attribute节点。</li>
</ul>
<h4 id="rtc-proc-c"><a href="#rtc-proc-c" class="headerlink" title="rtc-proc.c"></a>rtc-proc.c</h4><ul>
<li>proc文件系统是软件创建的文件系统，内核通过他向外界导出信息，下面的每一个文件都绑定一个函数，当用户读取这个文件的时候，这个函数会向文件写入信息。</li>
<li><p>rtc-proc.c中初始化了file_operations结构体：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static const struct file_operations rtc_proc_fops = &#123;  </div><div class="line">  .open       = rtc_proc_open,  </div><div class="line">  .read       = seq_read,  </div><div class="line">  .llseek     = seq_lseek,  </div><div class="line">  .release    = rtc_proc_release,  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>_RTC驱动在向RTC核心注册自己的时候，由注册函数rtc_device_resgister调用rtc_proc_add_device来实现proc接口的初始化，这个函数如下定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void rtc_proc_add_device(struct rtc_device *rtc)  </div><div class="line">&#123;	  </div><div class="line">   	if (rtc-&gt;id == 0)  </div><div class="line">       	proc_create_data(&quot;driver/rtc&quot;, 0, NULL, &amp;rtc_proc_fops, rtc);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要是完成创建文件节点，并将文件的操作函数与节点联系起来。调用这个函数后，在/proc/driver目录下就会有一个文件rtc</p>
</li>
</ul>
<h3 id="rtc设备访问"><a href="#rtc设备访问" class="headerlink" title="rtc设备访问"></a>rtc设备访问</h3><ul>
<li>rtc子系统最多可以支持16个rtc设备，多个rtc设备会在/dev/和 /sys/class/rtc/下生成rtc0、rtc1…等不同节点(下文以rtcn代称)。而系统启动时会选择一个rtc设备读取计时，在/dev下有rtc文件，rtc文件指向系统选择的rtc设备对应的rtcn（一般为rtc0）。</li>
<li>用户层访问rtc设备有3种途径：<ul>
<li>/dev/rtcn open等字符设备操作和ioctl命令。</li>
<li>/sys/class/rtc/rtcn   sysfs 属性，一些属性是只读。</li>
<li>/proc/driver/rtc 第一个rtc会占用procfs接口，在procfs下暴露更多信息。</li>
</ul>
</li>
</ul>
<h4 id="dev"><a href="#dev" class="headerlink" title="/dev"></a>/dev</h4><ul>
<li>在/dev下用户可以通过两种方式访问rtc设备，第一个是通过字符设备定义的open、read等函数（需要驱动程序实现）、另一个是通过定义的ioctl命令。第一种方式是直接打开rtc-dev.c定义的open等函数，在open等中直接调用驱动程序实现的函数。通过ioctl命令访问则是将操作转发到了interface.c定义的接口，间接调用驱动程序实现的函数。</li>
<li><p>ioctl()函数访问/dev下的设备。以下是典型函数：_</p>
<ul>
<li><p>ioctl(fd,RTC_ALM_SET, &amp;rtc_tm);<br>设置alarm中断的触发时刻，不超过24小时。第三个参数为structrtc_time结构体，读取时会忽略年月日信息。alarm中断与wakeupalarm中断只能同时使用1个，以最后一次设定为准。</p>
<ul>
<li>ioctl(fd,RTC_ALM_READ, &amp;rtc_tm)<br>读取alarm中断的触发时刻。</li>
</ul>
</li>
<li><p>ioctl(fd,RTC_WKALM_SET, &amp;alarm);<br>设置wakeupalarm中断的触发时刻， wakeupalarm中断的触发时刻可以在未来的任意时刻。alarm中断与wakeupalarm中断只能同时使用1个，以最后一次设定为准。</p>
</li>
<li><p>ioctl(fd,RTC_WKALM_RD, &amp;alarm);<br>读取wakeupalarm中断的触发时刻。</p>
</li>
<li><p>ioctl(fd,RTC_IRQP_SET, tmp);<br>设置周期中断的频率，tmp的值必须是2的幂，非Root用户无法使用64HZ以上的周期中断。</p>
</li>
<li><p>ioctl(fd,RTC_IRQP_READ, &amp;tmp);<br>读取周期中断的频率。</p>
</li>
<li><p>ioctl(fd,RTC_SET_TIME, &amp;rtc_tm)<br>更新RTC芯片的当前时间。</p>
</li>
<li><p>ioctl(fd,RTC_RD_TIME, &amp;rtc_tm);<br>读取RTC硬件中的当前时间。</p>
</li>
</ul>
</li>
<li><p>以open操作为例，在用户层对/dev下设备执行open会被转发至<code>rtc_dev_open(struct inode *inode, struct file *file)</code>函数，通过err<code>= ops-&gt;open ? ops-&gt;open(rtc-&gt;dev.parent) : 0;</code>判断驱动程序是否通过连接的rtc_class_ops结构体实现了open函数，驱动程序实现了open函数，则将open操作转发至驱动程序。</p>
</li>
</ul>
<h4 id="sys"><a href="#sys" class="headerlink" title="/sys"></a>/sys</h4><ul>
<li>/sys/class/rtc/rtcn下面的sysfs接口提供了操作rtc属性的方法，所有的日期时间都是墙上时间，而不是系统时间。<ul>
<li>date:    RTC提供的日期</li>
<li>hctosys:    如果在内核配置选项中配置了CONFIG_RTC_HCTOSYS，RTC会在系统启动的时候提供系统时间，这种情况下这个位就是1,否则为0</li>
<li>max_user_freq:    非特权用户可以从RTC得到的最大中断频</li>
<li>name:     RTC的名字，与sysfs目录相关</li>
<li>since_epoch:    从纪元开始所经历的秒数</li>
<li>time:    RTC提供的时间</li>
<li>wakealarm:    唤醒时间的时间事件。 这是一种单次的唤醒事件，所以如果还需要唤醒，在唤醒发生后必须复位。这个域的数据结构或者是从纪元开始经历的妙数，或者是相对的秒数</li>
</ul>
</li>
</ul>
<h4 id="proc"><a href="#proc" class="headerlink" title="/proc"></a>/proc</h4><ul>
<li>/proc/driver/rtc下只对应第一个rtc设备，与sysfs下相比，该设备暴露更多信息</li>
<li>对应截图<br><img src="https://my.mixtape.moe/qbuavl.jpg" alt=""></li>
</ul>
<h3 id="RTC子系统测试"><a href="#RTC子系统测试" class="headerlink" title="RTC子系统测试"></a>RTC子系统测试</h3><p><strong>Hwclock命令或使用测试文件。</strong></p>
<ul>
<li>Hwclock命令可以执行最简单的RTC测试。常用命令示例如下<ul>
<li>hwclock #查看RTC时间</li>
<li>hwclock -set -date=”07/07/17 10:10” #设置硬件RTC时间（月/日/年 时:分:秒）</li>
<li>hwclock -w #系统时间同步至RTC</li>
<li>hwclock -s #同步RTC到系统时间</li>
</ul>
</li>
<li>Linux内核提供了RTC子系统的测试示例文件，位于tools/testing/selftests/timers/rtctest.c，包含了基于ioctl命令的完整测试。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;正式开始让人崩溃的linux系列，希望自己能写完。&lt;br&gt;先拿rtc开刀。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这里我尽可能记录下思维的细节，而不是仅局限于代码，希望自己能领会Linux内核开发者的想法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内核版本：linux4.1&lt;/p&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="rtc" scheme="http://yoursite.com/tags/rtc/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记——时间子系统（一）</title>
    <link href="http://yoursite.com/2017/08/15/linux%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%97%B6%E9%97%B4%E5%AD%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/08/15/linux笔记——时间子系统（一）/</id>
    <published>2017-08-15T09:52:16.000Z</published>
    <updated>2017-09-10T01:36:52.141Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>ss</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ss&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="timer" scheme="http://yoursite.com/tags/timer/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核C语言中的面向对象</title>
    <link href="http://yoursite.com/2017/07/11/Linux%E5%86%85%E6%A0%B8C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/07/11/Linux内核C语言中的面向对象/</id>
    <published>2017-07-11T02:17:11.000Z</published>
    <updated>2017-09-10T01:36:14.773Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>转载自”Blog of UnicornX” (<a href="http://unicornx.github.io/" target="_blank" rel="external">http://unicornx.github.io/</a>)</p>
</li>
<li><p>面向对象的思想在c语言中的应用，第一次看到才知道c语言还能这么用。。。</p>
</li>
</ul>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>语言只是工具，重要的是思想。但是！！C语言用面向对象？？看了内核代码，真给那些写Linux、内核的大神跪了。。。</li>
<li>当然因为C语言的局限性，并非完全面向对象的实现，私有成员等就没有了。</li>
</ul>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul>
<li>既类在C语言中的实现，实际上是 struct + 函数体 = 函数表<br>结构体里不允许存在成员函数，但是换成指向函数的指针是可以滴。</li>
<li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct foo_operations &#123;</div><div class="line">	void (*op_a) (struct foo *, loff_t, int);</div><div class="line">  void (*op_b) (struct foo *, char __user *, size_t, loff_t *);</div><div class="line">  void (*op_c) (struct foo *, const char __user *, size_t, loff_t *);</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul>
<li>这个简单点， struct 里面套 struct ，警告熟悉c语言的应该都清除。。。这里没有父类子类的严格区分，实际上是完全自由的。</li>
<li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct foo &#123;</div><div class="line">  int a;</div><div class="line">  int b;</div><div class="line">  int c;</div><div class="line">  struct foo_operations ops;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul>
<li>这个是最有意思的，c语言中严格规定同一个.c文件/工程中不能存在重名函数，但是c语言的精华-指针给了思路，借助结构体，我函数名不变，每指向不同的结构体变量就行了。。。虽然还是很麻烦。。</li>
<li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct foo a;</div><div class="line">a-&gt;ops = ops1;</div><div class="line">a-&gt;ops-&gt;op_a(a);</div><div class="line">//切换</div><div class="line">a-&gt;ops = ops2;</div><div class="line">a-&gt;ops-&gt;op_a(a);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul>
<li>内核内大量运用链表，开始不清楚真是头晕。。</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   struct list_head &#123;</div><div class="line">struct list_head *next, *prev;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>一个指向自身的结构体，包含下一个与自身的指针。<br>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct A_LIST &#123;</div><div class="line">  data_t            data;</div><div class="line">  struct list_head    *list;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>offsetof宏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define offsetof(type, member) (size_t)&amp;(((type*)0)-&gt;member)</div></pre></td></tr></table></figure>
<p>offsetof是用来判断结构体中成员的偏移位置</p>
</li>
<li><p>container<em>of</em>宏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#define container_of(ptr, type, member) (&#123; \</div><div class="line">   const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); \</div><div class="line">   (type *)( (char *)__mptr - offsetof(type,member) );&#125;)</div></pre></td></tr></table></figure>
<p>根据一个结构体变量中的一个域成员变量的指针来获取指向整个结构体变量的指针..链表元素常用</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;转载自”Blog of UnicornX” (&lt;a href=&quot;http://unicornx.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://unicornx.github.io/&lt;/a&gt;)&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="c语言" scheme="http://yoursite.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记—乐联网上传数据 TCP长连接总结</title>
    <link href="http://yoursite.com/2017/06/11/Android%E7%AC%94%E8%AE%B0-%E4%B9%90%E8%81%94%E7%BD%91%E4%B8%8A%E4%BC%A0%E6%95%B0%E6%8D%AE%20TCP%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/06/11/Android笔记-乐联网上传数据 TCP长连接总结/</id>
    <published>2017-06-11T04:00:00.000Z</published>
    <updated>2017-06-11T14:55:38.909Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>资料来源如下</p>
<ul>
<li>乐联网</li>
</ul>
<p>编程环境</p>
<ul>
<li>Android Studio 2.2.3 </li>
</ul>
<p>导语</p>
<ul>
<li>毕设中的乐联网部分,记录以供复习</li>
<li>开源在github上</li>
<li><a href="https://github.com/Jasper-1024/HbuLeWei" target="_blank" rel="external">https://github.com/Jasper-1024/HbuLeWei</a></li>
</ul>
<hr>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><ul>
<li>使用okhttp上传数据。</li>
<li>Tcp长连接实现方向控制</li>
<li>以代码为主</li>
</ul>
<h2 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h2><ul>
<li><p>okhttp入门</p>
<blockquote>
<p><a href="http://blog.csdn.net/biezhihua/article/details/50603624" target="_blank" rel="external">http://blog.csdn.net/biezhihua/article/details/50603624</a></p>
</blockquote>
</li>
<li><p>乐联网</p>
<blockquote>
<p><a href="https://www.lewei50.com/dev/doc/176" target="_blank" rel="external">https://www.lewei50.com/dev/doc/176</a><br><a href="https://www.lewei50.com/dev/doc/155" target="_blank" rel="external">https://www.lewei50.com/dev/doc/155</a></p>
</blockquote>
</li>
<li><p>Tcp长连接</p>
<blockquote>
<p><a href="http://ls15114843569.blog.51cto.com/11015399/1767195" target="_blank" rel="external">http://ls15114843569.blog.51cto.com/11015399/1767195</a></p>
</blockquote>
</li>
<li><p>简易上传</p>
<blockquote>
<p><a href="http://ls15114843569.blog.51cto.com/11015399/1767195" target="_blank" rel="external">http://ls15114843569.blog.51cto.com/11015399/1767195</a></p>
</blockquote>
</li>
</ul>
<h2 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h2><ul>
<li><p>API介绍</p>
<blockquote>
<p><a href="https://www.lewei50.com/dev/apiinfo/3" target="_blank" rel="external">https://www.lewei50.com/dev/apiinfo/3</a></p>
</blockquote>
</li>
<li><p>API测试</p>
<blockquote>
<p><a href="https://www.lewei50.com/dev/apitest/3" target="_blank" rel="external">https://www.lewei50.com/dev/apitest/3</a></p>
</blockquote>
</li>
<li><p>地址：<a href="http://www.lewei50.com/api/v1/gateway/updatesensors/你的网关号" target="_blank" rel="external">http://www.lewei50.com/api/v1/gateway/updatesensors/你的网关号</a></p>
<p>POST方式</p>
<p>需要配置header头 Userkey</p>
</li>
<li><p>数据发送/返回方式JSON</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"Name"</span>:<span class="string">"T1"</span>,</div><div class="line">      <span class="attr">"Value"</span>:<span class="string">"1"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      <span class="attr">"Name"</span>:<span class="string">"01H1"</span>,</div><div class="line">      <span class="attr">"Value"</span>:<span class="string">"96.2"</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>返回格式</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Successful"</span>: <span class="literal">true</span>, </div><div class="line">  <span class="attr">"Message"</span>: <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>okhttp POST 传感器数据 这里使用了一个静态内部类。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">//返回数据处理</span></div><div class="line">  <span class="keyword">public</span> okhttp3.Callback callback = <span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">          <span class="comment">//返回服务器内容</span></div><div class="line">          String responsedata = response.body().string();</div><div class="line">          LogUtil.d(<span class="string">"okHttp"</span>, responsedata);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">          <span class="comment">//异常处理</span></div><div class="line">          LogUtil.d(<span class="string">"okHttp"</span>, <span class="string">"POST错误"</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">//内部类</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</div><div class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN</div><div class="line">              = MediaType.parse(<span class="string">"text/x-markdown; charset=utf-8"</span>);</div><div class="line"><span class="comment">//POST数据，指定接收回掉</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postData</span><span class="params">(String sensor_name, String sensor_data, okhttp3.Callback callback)</span> </span>&#123;</div><div class="line">          OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">          <span class="keyword">final</span> String value =</div><div class="line">                  <span class="string">"["</span> +</div><div class="line">                          <span class="string">"    &#123;"</span> +</div><div class="line">                          <span class="string">"        \"Name\":\""</span> + sensor_name + <span class="string">"\","</span> +</div><div class="line">                          <span class="string">"        \"Value\":\""</span> + sensor_data + <span class="string">"\""</span> +</div><div class="line">                          <span class="string">"    &#125;"</span> +</div><div class="line">                          <span class="string">"]"</span>;</div><div class="line">          RequestBody requestBody = <span class="keyword">new</span> RequestBody() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">                  <span class="keyword">return</span> MEDIA_TYPE_MARKDOWN;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                  sink.write(value.getBytes());</div><div class="line">              &#125;</div><div class="line">          &#125;;</div><div class="line">          Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                  .url(<span class="string">"http://www.lewei50.com/api/V1/gateway/UpdateSensors/01"</span>)</div><div class="line">                  .header(<span class="string">"userkey"</span>, <span class="string">"你的userkey"</span>)</div><div class="line">                  .post(requestBody)</div><div class="line">                  .build();</div><div class="line">          client.newCall(request).enqueue(callback);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>实际使用 放在一个后台服务内，调用相当简单<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Http.postData(<span class="string">"PM2.5"</span>, <span class="string">"你的数据转为String"</span>, callback);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Tcp长连接，远程控制"><a href="#Tcp长连接，远程控制" class="headerlink" title="Tcp长连接，远程控制"></a>Tcp长连接，远程控制</h2><ul>
<li>首先参考<a href="https://wenku.baidu.com/view/f3457b63dd3383c4bb4cd2f0.html" target="_blank" rel="external">乐联网反向控制教程</a>，新建一个控制器，这里以开关为例。</li>
<li>原理是与服务器保持一个TCP长连接，不到40s刷新一次，以此保持通道，与被控制段通信，发送控制信息。</li>
<li><p>Tcp长连接参考了@墨迹流韶的<a href="http://blog.cocoper.com/2017/01/21/Android/Common/2017-01-21-Android%E5%9F%BA%E4%BA%8ETcp%E5%8D%8F%E8%AE%AE%E7%9A%84Socket%E9%95%BF%E9%93%BE%E6%8E%A5%E5%B0%81%E8%A3%85/" target="_blank" rel="external">Android基于Tcp协议的Socket长链接封装</a></p>
</li>
<li><p>地址 tcp.lewei50.com<br>端口号 9960<br>心跳包间隔 1min以内</p>
</li>
<li><p>发送/接收数据格式 Json<br>本地发送数据格式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"></div><div class="line">  "method": "update",</div><div class="line"></div><div class="line">  "gatewayNo": "你的网关号",</div><div class="line"></div><div class="line">  "userkey": "你的userkey"</div><div class="line"></div><div class="line">&#125;&amp;^!</div></pre></td></tr></table></figure>
<p>服务器发送控制命令格式，数据处理时需要去掉字符串最后的&amp;^! </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">"method":"send",</div><div class="line"></div><div class="line">"gatewayNo":"01",</div><div class="line"></div><div class="line">"userkey":"6d16ddb3c58c4e448a7e15e7acxxxxxx",</div><div class="line"></div><div class="line">"f":" updateSensor",</div><div class="line"></div><div class="line">"p1":"D1",</div><div class="line"></div><div class="line">"p2":"1"</div><div class="line"></div><div class="line">&#125;&amp;^!</div></pre></td></tr></table></figure>
<p>本地响应控制命令后返回数据格式</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="attr">"method"</span>:<span class="string">"response"</span>,</div><div class="line"></div><div class="line"><span class="attr">"result"</span>:&#123;</div><div class="line">	</div><div class="line">  <span class="attr">"successful"</span>:<span class="literal">true</span>,</div><div class="line">  </div><div class="line">  <span class="attr">"message"</span>:<span class="string">"ok!"</span>,</div><div class="line">  </div><div class="line">  <span class="attr">"data"</span>:[&#123;</div><div class="line">	    </div><div class="line">       <span class="attr">"id"</span>:<span class="string">"D1"</span>,</div><div class="line">      </div><div class="line">  	<span class="attr">"value"</span>:<span class="string">"1"</span></div><div class="line">  	</div><div class="line">    &#125;,</div><div class="line">  </div><div class="line">&#125;&amp;^!</div></pre></td></tr></table></figure>
</li>
<li><p>TCP连接类  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpSocketHelper</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String mTag = <span class="string">"TcpSocketHelper"</span>;</div><div class="line">  <span class="keyword">private</span> Socket socket;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> _connect;</div><div class="line">  <span class="keyword">private</span> ReceiveThread mReceiveThread;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> receiveStop;</div><div class="line">  <span class="keyword">private</span> Date lastKeepAliveOkTime;</div><div class="line">  <span class="keyword">private</span> OnRecivedListener mRecivedListener;</div><div class="line">  <span class="comment">//地址</span></div><div class="line">  <span class="keyword">private</span> String mIpAddr = <span class="string">"http://tcp.lewei50.com"</span>;</div><div class="line">  <span class="comment">//端口</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mPort = <span class="number">9960</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 开启链接socket</div><div class="line">   * <span class="doctag">@param</span> ipAddr</div><div class="line">   * <span class="doctag">@param</span> port</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startConnect</span><span class="params">(String ipAddr, <span class="keyword">int</span> port)</span></span>&#123;</div><div class="line">      LogUtil.d(mTag, <span class="string">"准备链接..."</span>);</div><div class="line">      <span class="keyword">this</span>.mIpAddr = ipAddr;</div><div class="line">      <span class="keyword">this</span>.mPort = port;</div><div class="line">      InetAddress serverAddr;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          socket = <span class="keyword">new</span> Socket(ipAddr, port);</div><div class="line">          LogUtil.d(mTag, <span class="string">"准备链接..."</span>);</div><div class="line">          _connect = <span class="keyword">true</span>;</div><div class="line">          mReceiveThread = <span class="keyword">new</span> ReceiveThread();</div><div class="line">          receiveStop = <span class="keyword">false</span>;</div><div class="line">          mReceiveThread.start();</div><div class="line">          LogUtil.d(mTag, <span class="string">"链接成功..."</span>);</div><div class="line"></div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          LogUtil.d(mTag, <span class="string">"链接出错..."</span> + e.getMessage());</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 关闭链接</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConnect</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">if</span> (socket != <span class="keyword">null</span>)&#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              socket.close();</div><div class="line">              socket = <span class="keyword">null</span>;</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 保持心跳</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">KeepAlive</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// 判断socket是否已断开,断开就重连</span></div><div class="line">      <span class="keyword">if</span> (lastKeepAliveOkTime != <span class="keyword">null</span>) &#123;</div><div class="line">          LogUtil.d(mTag, <span class="string">"上次心跳成功时间:"</span>+ DateFormat.format(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, lastKeepAliveOkTime));</div><div class="line">          Date now = Calendar.getInstance().getTime();</div><div class="line">          <span class="keyword">long</span> between = (now.getTime() - lastKeepAliveOkTime.getTime());<span class="comment">// 得到两者的毫秒数</span></div><div class="line">          <span class="keyword">if</span> (between &gt; <span class="number">60</span> * <span class="number">1000</span>) &#123;</div><div class="line">              LogUtil.d(mTag, <span class="string">"心跳异常超过40,重新连接:"</span>);</div><div class="line">              lastKeepAliveOkTime = <span class="keyword">null</span>;</div><div class="line">              socket = <span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          lastKeepAliveOkTime = Calendar.getInstance().getTime();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!checkIsAlive()) &#123;</div><div class="line">          LogUtil.d(mTag, <span class="string">"链接已断开,重新连接."</span>);</div><div class="line">          startConnect(mIpAddr, mPort);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 此方法是检测是否连接</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkIsAlive</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (socket == <span class="keyword">null</span>||!socket.isConnected())</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 发送数据的方法</div><div class="line">   * <span class="doctag">@param</span> msg</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendmessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">      <span class="keyword">boolean</span> isAlive = checkIsAlive();</div><div class="line">      <span class="keyword">if</span> (!isAlive)</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      LogUtil.d(mTag, <span class="string">"准备发送消息:"</span> + msg);</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isConnected()) &#123;</div><div class="line">              <span class="keyword">if</span> (!socket.isOutputShutdown()) &#123;</div><div class="line"></div><div class="line">                  <span class="comment">//2.得到socket读写流</span></div><div class="line">                  OutputStream os=socket.getOutputStream();</div><div class="line">                  <span class="comment">//true:是否自动flush</span></div><div class="line">                  PrintWriter outStream=<span class="keyword">new</span> PrintWriter(os, <span class="keyword">true</span>);</div><div class="line">                  outStream.print(msg);</div><div class="line">                  outStream.flush();</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">          LogUtil.d(mTag, <span class="string">"发送成功!"</span>);</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 设置接收数据监听器</div><div class="line">   * <span class="doctag">@param</span> mRecivedListener</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmRecivedListener</span><span class="params">(OnRecivedListener mRecivedListener)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.mRecivedListener = mRecivedListener;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 数据接收线程</div><div class="line">   */</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReceiveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  sleep(<span class="number">2000</span>);</div><div class="line">                    <span class="comment">// 判断 Socket 是否处于连接状态</span></div><div class="line">                  <span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isConnected()) &#123;</div><div class="line">                      <span class="comment">// 客户端接收服务器端的响应，读取服务器端向客户端的输入流</span></div><div class="line">                      InputStream isRead = socket.getInputStream();</div><div class="line">                      <span class="comment">// 缓冲区</span></div><div class="line">                      <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[isRead.available()];</div><div class="line">                      <span class="comment">// 读取缓冲区</span></div><div class="line">                      isRead.read(buffer);</div><div class="line">                      <span class="comment">// 转换为字符串</span></div><div class="line">                      String responseInfo = <span class="keyword">new</span> String(buffer);</div><div class="line">                      <span class="comment">// 日志中输出</span></div><div class="line">                      <span class="keyword">if</span>(responseInfo != <span class="keyword">null</span>&amp;&amp;!responseInfo.equals(<span class="string">""</span>))&#123;</div><div class="line">                          LogUtil.d(<span class="string">"TcpManager"</span>, <span class="string">"返回："</span>+responseInfo);</div><div class="line">                          mRecivedListener.onRecived(responseInfo);</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                      lastKeepAliveOkTime = Calendar.getInstance().getTime();</div><div class="line">                      KeepAlive();</div><div class="line"></div><div class="line">                      <span class="keyword">continue</span>;</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="keyword">if</span> (socket != <span class="keyword">null</span>)</div><div class="line">                          LogUtil.d(mTag, <span class="string">"链接状态:"</span> + socket.isConnected());</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                  LogUtil.d(mTag, <span class="string">"监听出错:"</span> + e.toString());</div><div class="line">                  e.printStackTrace();</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用,包装在一个后台service中，在service中实现TcpSocketHelper的onRecived方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  //tcp返回信息</div><div class="line">  @Override</div><div class="line">  public void onRecived(String data) &#123;</div><div class="line">      LogUtil.d(&quot;okHttpService&quot;, data);</div><div class="line">      //处理服务器发回的数据      </div><div class="line">  &#125;</div><div class="line"></div><div class="line">TcpSocketHelper tcpSocketHelper  = new TcpSocketHelper();</div><div class="line">tcpSocketHelper.startConnect(&quot;tcp.lewei50.com&quot;, 9960);</div><div class="line">//设置监听</div><div class="line">tcpSocketHelper.setmRecivedListener(this);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>发送心跳包<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String value =</div><div class="line">          <span class="string">"    &#123;"</span> +</div><div class="line">                  <span class="string">"        \"method\":\"update\","</span> +</div><div class="line">                  <span class="string">"        \"gatewayNo\":\"01\","</span> +</div><div class="line">                  <span class="string">"        \"userkey\":\"你的userkey\""</span> +</div><div class="line">                  <span class="string">"    &#125;&amp;^!"</span>;</div><div class="line"> <span class="comment">//发送数据</span></div><div class="line"> tcpSocketHelper.sendmessage(value);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>处理数据 在service的onRecived中</p>
</li>
<li><p>本地处理完毕后，向服务器返回被控制器状态</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String value5 = <span class="string">"&#123;\"method\":\"response\",\"result\":&#123;\"successful\":true,\"message\":\"ok!\",\"data\":[&#123;\"id\":\"D1\",\"value \":\"1\"&#125;]&#125;&#125;&amp;^! "</span>;</div><div class="line"> </div><div class="line">tcpSocketHelper.sendmessage(value6);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;资料来源如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乐联网&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio 2.2.3 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;导语&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;毕设中的乐联网部分,记录以供复习&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="Android笔记" scheme="http://yoursite.com/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习记录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="毕设" scheme="http://yoursite.com/tags/%E6%AF%95%E8%AE%BE/"/>
    
  </entry>
  
</feed>
